#!/usr/bin/env python
# this is a old version of continuous_learning_node
# beacuse the version of pytorch, it can not be used in the car
# it can be useed after the socker is updated



# 
import rospy
import traceback

from zzz_common.params import parse_private_args
from zzz_cognition_msgs.msg import MapState
from zzz_navigation_msgs.msg import Map
from zzz_planning_decision_lane_models.local_trajectory import Werling_planner, PolylineTrajectory #FIXME(ksj)
from zzz_planning_msgs.msg import DecisionTrajectory
from nav_msgs.msg import Path
from visualization_msgs.msg import Marker, MarkerArray

from continuous_learning_planner import ContinuousLearningPlanner
from input_builder import InputBuilder

class ContLearingNode(object):
    def __init__(self):

        params = parse_private_args(
            decision_trajectory_topic="decision_trajectory",
            dynamic_map_topic="/zzz/cognition/local_dynamic_map/map_with_ref",
            static_map_topic="/zzz/navigation/local_static_map",
            RVIZ_decision_trajectory_topic="decision_trajectory_path", 
            RVIZ_all_trajectory_topic="all_trajectory_path", 
            RVIZ_predi_trajectory_topic="predi_trajectory_path", 
            RVIZ_collision_circle_topic="collision_circle", 
            hz = 5,
        )

        self.dmap_buffer = None
        #------------------------Planner------------------------------#
        self._decision_instance = ContinuousLearningPlanner()
        self._input_builder = InputBuilder()


        #------------------------Subscriber--------------------------#
        self._dynamic_map_subscriber = rospy.Subscriber(params.dynamic_map_topic, MapState, self.receive_dynamic_map)
        
        #------------------------Publishers--------------------------#
        self._decision_trajectory_publisher = rospy.Publisher(params.decision_trajectory_topic, DecisionTrajectory, queue_size=1)
        self._rviz_decision_trajectory_publisher = rospy.Publisher(params.RVIZ_decision_trajectory_topic, Path, queue_size=1)
        self._rviz_all_trajectory_publisher = rospy.Publisher(params.RVIZ_all_trajectory_topic, MarkerArray, queue_size=1)
        self._rviz_predi_trajectory_publisher = rospy.Publisher(params.RVIZ_predi_trajectory_topic, MarkerArray, queue_size=1)
        self._rviz_collision_circle_publisher = rospy.Publisher(params.RVIZ_collision_circle_topic, MarkerArray, queue_size=1)
        
        #------------------------Others------------------------------#
        self._rate = rospy.Rate(params.hz)


    def loop(self):
        while not rospy.is_shutdown():
            if self.dmap_buffer is None:
                continue
            # generate trajectory
            try:
                obs = _input_builder.get_obs(self.dmap_buffer)
                print("start pub")
                chosen_trajectory, chosen_action_id, worst_q_list, worst_Q_list,faster_trajectory=self._decision_instance.run_update_path(obs, done=False)
                print("end pub")
                publish_msg = chosen_trajectory
            except Exception as e:
                rospy.logerr("Planning (lanes): Exception in idm_lane_utility !!! {} \n {}".format(e.message, traceback.format_exc()))
                pass
            
            # publish trajectory
            if publish_msg:
                self._decision_trajectory_publisher.publish(publish_msg)
                self._rviz_decision_trajectory_publisher.publish(publish_msg.trajectory)
                rospy.loginfo(" Planning (lanes): Publish Trajectory length = %d, desired_speed = %f km/h",
                    len(publish_msg.trajectory.poses), publish_msg.desired_speed[-1]*3.6)

            self.pub_rviz()
            self._rate.sleep()

    def receive_dynamic_map(dynamic_map):
        self.dmap_buffer = dynamic_map

    # ??
    def pub_rviz(self):
        all_trajectory, obs_paths, collision_circle = self._decision_instance._local_trajectory_instance.get_rviz_info()
        
        if all_trajectory:
            self._rviz_all_trajectory_publisher.publish(all_trajectory)
        if obs_paths:
            self._rviz_predi_trajectory_publisher.publish(obs_paths)
        if collision_circle:
            self._rviz_collision_circle_publisher.publish(collision_circle)


if __name__ == "__main__":

    rospy.init_node("ContLearingNode", log_level=rospy.DEBUG)
    node = ContLearingNode()
    node.loop()
