# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_navigation_msgs/Map.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import zzz_navigation_msgs.msg

class Map(genpy.Message):
  _md5sum = "6a0ce8991715e99e47d9ef00be19691c"
  _type = "zzz_navigation_msgs/Map"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message describes a static local map. This map contains all essential
# information that should be generated by map provider. Generally this map is
# limited in a scope of a road section (i.e. road network edge)
# For extension, the junction shape information is provided
# For safety concerns, the next unit (i.e. edge or junction) is provided

Header header

# Whether the map is in a structured environment
bool in_junction # = True

# Target lane index at the end of the section.
int8[] exit_lane_index

# Lanes if it's in a structured road, should be sorted by ascending index
# The index is starting from right most lane, i.e. the right most lane is indexed as 0
Lane[] lanes

# Road area if in junction
geometry_msgs/Polygon drivable_area

# Next unit
geometry_msgs/Polygon next_drivable_area
Lane[] next_lanes
int8 next_road_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: zzz_navigation_msgs/Lane
# This message describe a lane with polyline representation

# ----- Basic properties -----
# the rightest lane is 0, reference lane is -1
# TODO: remove this field
int16 index

# Speed limit (km/h)
float32 speed_limit

# Length of the lane. Provided for easy computation
float32 length
float32 width

# Whether this lane allow two way traffic
# This can be true when the road is too narrow or in the center turning lane
bool bidirectional # = False

# The situation when lane ends. This field could be updated with dynamic info.
uint8 stop_state # = 0
uint8 STOP_STATE_UNKNOWN = 0
uint8 STOP_STATE_THRU = 1 # e.g. drive through at lane connection, green light
uint8 STOP_STATE_YIELD = 2 # e.g. unprotected left/right turn, flashing yellow light
uint8 STOP_STATE_STOP = 3 # e.g. red light, yellow light
uint8 STOP_STATE_STOP_YIELD = 4 # e.g. stop sign, right turn at red light
uint8 STOP_STATE_STOP_YIELD_ALL_WAY = 5 # e.g. flashing red light, all way stop sign

# ----- Central path representation -----
# The central_path_points field is used when central_path_type is waypoint.
# Otherwise, central_path_coeffs should be used
LanePoint[] central_path_points
float32[] central_path_coeffs

uint8 central_path_type # = 0
uint8 CENTRAL_PATH_WAYPOINT = 0 # discretized
uint8 CENTRAL_PATH_LINE = 1
uint8 CENTRAL_PATH_CONIC = 2 # conic section, including parabola and hyperbola
uint8 CENTRAL_PATH_POLYNOMIAL = 3 #
uint8 CENTRAL_PATH_BEZIER = 4

# ----- Boundary representation -----
# The boundary description of current lane.
# Not that the boundary type only describe the behaviour from current lane to neighbour lane or road shoulder
LaneBoundary[] left_boundaries
LaneBoundary[] right_boundaries

# ----- Auxiliary information of the lane -----
# Road situations on this line. This field could be updated with dynamic info.
LaneSituation[] situations

# ---- traffic ligth position ------ 
float32[] traffic_light_pos
================================================================================
MSG: zzz_navigation_msgs/LanePoint
# This message describe a road point from polyline represented lane

# The 3D position of the lane point
geometry_msgs/Point position

# ----- Other useful information -----
# Distance from lane start to current point. The distance of the first point should be zero
float32 s

# Slope at current position of the road
# Can be used to control the throttle
float32 slope

# Road curvature at current position of the road
# Can be used to slow down before turning
float32 curvature

# The yaw angle of tangent line (in radian)
float32 tangent

# Road width at current position
# Can be used to determine the carefulness of driving
float32 width

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: zzz_navigation_msgs/LaneBoundary
# This message describe the boundary type of a part of a lane

# Lane boundary point
LanePoint boundary_point

# Boundary type from between `s` and `s` of the next section start
uint8 boundary_type
uint8 BOUNDARY_UNKNOWN = 0
uint8 BOUNDARY_DASHED_WHITE = 1  # neighbour lane has same direction.
uint8 BOUNDARY_DASHED_YELLOW = 2 # neighbour lane has different direction.
uint8 BOUNDARY_SOLID_WHITE = 3   # neighbour lane has same direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW = 4  # neighbour lane has different direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW_TURN = 5  # neighbour lane has different direction, not allowed to change lane unless turning.
uint8 BOUNDARY_CURB = 6          # neighbour is road shoulder

# Confidence of the lane boundary classification
float32 confidence

================================================================================
MSG: zzz_navigation_msgs/LaneSituation
# This message store any uncommon situations on a road
# Situation can be a map specified object or fresh events

# The location of the situation in a lane (distance from lane start)
float32 s

# How long this situation affect along the lane.
# Inf means take effect until lane ends
float32 length

# Type of situation
uint8 situation_type
uint8 SITUATION_NOT_SPECIFIED = 0
uint8 SITUATION_BLOCKED = 1 # Something blocked this lane, vehicle should stop here
uint8 SITUATION_CROSSWALK = 2 # Crosswalk
uint8 SITUATION_REDUCE_SPEED = 3 # Reducing speed is required. This can be due to speed bump, construction, or school bus stop, etc

# ------- Situation information -------
# The new speed limit. Zero means the vehicle is required to stop
float32 reduced_max_speed

# Additional information
string comments

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','in_junction','exit_lane_index','lanes','drivable_area','next_drivable_area','next_lanes','next_road_id']
  _slot_types = ['std_msgs/Header','bool','int8[]','zzz_navigation_msgs/Lane[]','geometry_msgs/Polygon','geometry_msgs/Polygon','zzz_navigation_msgs/Lane[]','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,in_junction,exit_lane_index,lanes,drivable_area,next_drivable_area,next_lanes,next_road_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Map, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.in_junction is None:
        self.in_junction = False
      if self.exit_lane_index is None:
        self.exit_lane_index = []
      if self.lanes is None:
        self.lanes = []
      if self.drivable_area is None:
        self.drivable_area = geometry_msgs.msg.Polygon()
      if self.next_drivable_area is None:
        self.next_drivable_area = geometry_msgs.msg.Polygon()
      if self.next_lanes is None:
        self.next_lanes = []
      if self.next_road_id is None:
        self.next_road_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.in_junction = False
      self.exit_lane_index = []
      self.lanes = []
      self.drivable_area = geometry_msgs.msg.Polygon()
      self.next_drivable_area = geometry_msgs.msg.Polygon()
      self.next_lanes = []
      self.next_road_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.in_junction
      buff.write(_get_struct_B().pack(_x))
      length = len(self.exit_lane_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.exit_lane_index))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _x = val1
        buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
        length = len(val1.central_path_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.central_path_points:
          _v1 = val2.position
          _x = _v1
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        length = len(val1.central_path_coeffs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.central_path_coeffs))
        _x = val1.central_path_type
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.left_boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left_boundaries:
          _v2 = val2.boundary_point
          _v3 = _v2.position
          _x = _v3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v2
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(val1.right_boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right_boundaries:
          _v4 = val2.boundary_point
          _v5 = _v4.position
          _x = _v5
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v4
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(val1.situations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.situations:
          _x = val2
          buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
          _x = val2.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.traffic_light_pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.traffic_light_pos))
      length = len(self.drivable_area.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.drivable_area.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.next_drivable_area.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_drivable_area.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.next_lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_lanes:
        _x = val1
        buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
        length = len(val1.central_path_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.central_path_points:
          _v6 = val2.position
          _x = _v6
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        length = len(val1.central_path_coeffs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.central_path_coeffs))
        _x = val1.central_path_type
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.left_boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left_boundaries:
          _v7 = val2.boundary_point
          _v8 = _v7.position
          _x = _v8
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v7
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(val1.right_boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right_boundaries:
          _v9 = val2.boundary_point
          _v10 = _v9.position
          _x = _v10
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v9
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(val1.situations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.situations:
          _x = val2
          buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
          _x = val2.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.traffic_light_pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.traffic_light_pos))
      _x = self.next_road_id
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = None
      if self.drivable_area is None:
        self.drivable_area = geometry_msgs.msg.Polygon()
      if self.next_drivable_area is None:
        self.next_drivable_area = geometry_msgs.msg.Polygon()
      if self.next_lanes is None:
        self.next_lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.in_junction,) = _get_struct_B().unpack(str[start:end])
      self.in_junction = bool(self.in_junction)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.exit_lane_index = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.Lane()
        _x = val1
        start = end
        end += 16
        (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
        val1.bidirectional = bool(val1.bidirectional)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.central_path_points = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LanePoint()
          _v11 = val2.position
          _x = _v11
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          val1.central_path_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.central_path_coeffs = s.unpack(str[start:end])
        start = end
        end += 1
        (val1.central_path_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left_boundaries = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneBoundary()
          _v12 = val2.boundary_point
          _v13 = _v12.position
          _x = _v13
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v12
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val2
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          val1.left_boundaries.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right_boundaries = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneBoundary()
          _v14 = val2.boundary_point
          _v15 = _v14.position
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v14
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val2
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          val1.right_boundaries.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.situations = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneSituation()
          _x = val2
          start = end
          end += 13
          (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comments = str[start:end]
          val1.situations.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.traffic_light_pos = s.unpack(str[start:end])
        self.lanes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drivable_area.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.drivable_area.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_drivable_area.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.next_drivable_area.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_lanes = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.Lane()
        _x = val1
        start = end
        end += 16
        (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
        val1.bidirectional = bool(val1.bidirectional)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.central_path_points = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LanePoint()
          _v16 = val2.position
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          val1.central_path_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.central_path_coeffs = s.unpack(str[start:end])
        start = end
        end += 1
        (val1.central_path_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left_boundaries = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneBoundary()
          _v17 = val2.boundary_point
          _v18 = _v17.position
          _x = _v18
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v17
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val2
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          val1.left_boundaries.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right_boundaries = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneBoundary()
          _v19 = val2.boundary_point
          _v20 = _v19.position
          _x = _v20
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v19
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val2
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          val1.right_boundaries.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.situations = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneSituation()
          _x = val2
          start = end
          end += 13
          (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comments = str[start:end]
          val1.situations.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.traffic_light_pos = s.unpack(str[start:end])
        self.next_lanes.append(val1)
      start = end
      end += 1
      (self.next_road_id,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.in_junction
      buff.write(_get_struct_B().pack(_x))
      length = len(self.exit_lane_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.exit_lane_index.tostring())
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _x = val1
        buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
        length = len(val1.central_path_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.central_path_points:
          _v21 = val2.position
          _x = _v21
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        length = len(val1.central_path_coeffs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.central_path_coeffs.tostring())
        _x = val1.central_path_type
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.left_boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left_boundaries:
          _v22 = val2.boundary_point
          _v23 = _v22.position
          _x = _v23
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v22
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(val1.right_boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right_boundaries:
          _v24 = val2.boundary_point
          _v25 = _v24.position
          _x = _v25
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v24
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(val1.situations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.situations:
          _x = val2
          buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
          _x = val2.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.traffic_light_pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.traffic_light_pos.tostring())
      length = len(self.drivable_area.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.drivable_area.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.next_drivable_area.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_drivable_area.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.next_lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_lanes:
        _x = val1
        buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
        length = len(val1.central_path_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.central_path_points:
          _v26 = val2.position
          _x = _v26
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        length = len(val1.central_path_coeffs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.central_path_coeffs.tostring())
        _x = val1.central_path_type
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.left_boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left_boundaries:
          _v27 = val2.boundary_point
          _v28 = _v27.position
          _x = _v28
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v27
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(val1.right_boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right_boundaries:
          _v29 = val2.boundary_point
          _v30 = _v29.position
          _x = _v30
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v29
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(val1.situations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.situations:
          _x = val2
          buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
          _x = val2.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.traffic_light_pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.traffic_light_pos.tostring())
      _x = self.next_road_id
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = None
      if self.drivable_area is None:
        self.drivable_area = geometry_msgs.msg.Polygon()
      if self.next_drivable_area is None:
        self.next_drivable_area = geometry_msgs.msg.Polygon()
      if self.next_lanes is None:
        self.next_lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.in_junction,) = _get_struct_B().unpack(str[start:end])
      self.in_junction = bool(self.in_junction)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.exit_lane_index = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.Lane()
        _x = val1
        start = end
        end += 16
        (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
        val1.bidirectional = bool(val1.bidirectional)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.central_path_points = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LanePoint()
          _v31 = val2.position
          _x = _v31
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          val1.central_path_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.central_path_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 1
        (val1.central_path_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left_boundaries = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneBoundary()
          _v32 = val2.boundary_point
          _v33 = _v32.position
          _x = _v33
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v32
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val2
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          val1.left_boundaries.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right_boundaries = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneBoundary()
          _v34 = val2.boundary_point
          _v35 = _v34.position
          _x = _v35
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v34
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val2
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          val1.right_boundaries.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.situations = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneSituation()
          _x = val2
          start = end
          end += 13
          (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comments = str[start:end]
          val1.situations.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.traffic_light_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.lanes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drivable_area.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.drivable_area.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_drivable_area.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.next_drivable_area.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_lanes = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.Lane()
        _x = val1
        start = end
        end += 16
        (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
        val1.bidirectional = bool(val1.bidirectional)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.central_path_points = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LanePoint()
          _v36 = val2.position
          _x = _v36
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          val1.central_path_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.central_path_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 1
        (val1.central_path_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left_boundaries = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneBoundary()
          _v37 = val2.boundary_point
          _v38 = _v37.position
          _x = _v38
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v37
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val2
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          val1.left_boundaries.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right_boundaries = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneBoundary()
          _v39 = val2.boundary_point
          _v40 = _v39.position
          _x = _v40
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v39
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val2
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          val1.right_boundaries.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.situations = []
        for i in range(0, length):
          val2 = zzz_navigation_msgs.msg.LaneSituation()
          _x = val2
          start = end
          end += 13
          (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comments = str[start:end]
          val1.situations.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.traffic_light_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.next_lanes.append(val1)
      start = end
      end += 1
      (self.next_road_id,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fBf = None
def _get_struct_2fBf():
    global _struct_2fBf
    if _struct_2fBf is None:
        _struct_2fBf = struct.Struct("<2fBf")
    return _struct_2fBf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_h3f2B = None
def _get_struct_h3f2B():
    global _struct_h3f2B
    if _struct_h3f2B is None:
        _struct_h3f2B = struct.Struct("<h3f2B")
    return _struct_h3f2B
