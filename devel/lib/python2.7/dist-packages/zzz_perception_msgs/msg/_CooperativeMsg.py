# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_perception_msgs/CooperativeMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import nav_msgs.msg
import std_msgs.msg
import zzz_perception_msgs.msg

class CooperativeMsg(genpy.Message):
  _md5sum = "1eb7e08de1b3eb164f8e2508c317da20"
  _type = "zzz_perception_msgs/CooperativeMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Combined msg of zzz_perception_msgs/TrackingBoxArray and nav_msgs/Odometry Message

Header header

TrackingBoxArray tbox_arr
nav_msgs/Odometry odo_msg

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: zzz_perception_msgs/TrackingBoxArray
# Describe a list of 3D tracking targets, for a multi-object 3D detector.

Header header

# A list of the detected targets.
TrackingBox[] targets

================================================================================
MSG: zzz_perception_msgs/TrackingBox
# Defines a box-shaped 3D tracking result.

# Unique id to determine the identification of tracked object.
# This field could be a increasing number from zero or random hash number
uint64 uid

# Defines the (existence) confidence of the object [-1 ~ 1].
# The confidence can be negative to demonstrate that this object is invalid.
# This confidence should not be fed into decision system. It should be used for validation purpose.
float32 confidence

# Describe several classification result for the object
# This field is required to be sorted in descending order of scores
ObjectClass[] classes

# This field contains the behavior identification based on light signal or hand signal
ObjectSignals signal

# Current 3D bounding box.
BoundingBox bbox

# Estimated 3D velocity and accelaration
geometry_msgs/TwistWithCovariance twist
geometry_msgs/AccelWithCovariance accel

# This field is for store auxiliary text or data
string comments


================================================================================
MSG: zzz_perception_msgs/ObjectClass
# The size of (in meters) the bounding box surrounding the object's center pose.

# The unique numeric classification ID of object detected
uint32 classid

# The probability or confidence value of the detected object. By convention, this value should lie in the range 0~1.
float32 score

# Other information about the class (e.g. class name). Only for debug
string comments

##############################################################
###   Here is a hierarchical table of all included types   ###
##############################################################
# Hierarchy is encoded in a 32-bit integer. Each 8 bit stand for a level, and leftmost 8 bit is the top level

uint32 UNKNOWN                          = 0     # 0x0000
uint32 UNKNOWN_DYNAMIC                  = 16    # 0x0010
uint32 UNKNOWN_STATIC                   = 32    # 0x0020

uint32 VEHICLE                          = 1     # 0x0001
uint32 VEHICLE_PASSENGER                = 17    # 0x0011, normal passenger_vehicles
uint32 VEHICEL_VAN                      = 33    # 0x0021
uint32 VEHICLE_TRUCK                    = 49    # 0x0031
uint32 VEHICLE_BUS                      = 65    # 0x0041
uint32 VEHICLE_SCHOOLBUS                = 321   # 0x0141
uint32 VEHICLE_SCHOOLBUS_STOP           = 4417  # 0x1141
uint32 VEHICLE_EMERGENCY                = 81    # 0x0051, emergency vehicles, including 
uint32 VEHICLE_EMERGENCY_POLICE         = 337   # 0x0151
uint32 VEHICLE_EMERGENCY_POLICE_FLASH   = 4433  # 0x1151
uint32 VEHICLE_EMERGENCY_FIRE           = 593   # 0x0251
uint32 VEHICLE_EMERGENCY_FIRE_FLASH     = 4689  # 0x1251
uint32 VEHICLE_EMERGENCY_CIVIL          = 849   # 0x0351, including utility vehicle and tow trucks
uint32 VEHICLE_EMERGENCY_CIVIL_FLASH    = 4945  # 0x1351

uint32 HUMAN                            = 2     # 0x0002
uint32 HUMAN_PEDESTRIAN                 = 18    # 0x0012
uint32 HUMAN_ROADWORKER                 = 34    # 0x0022

uint32 CYCLIST                          = 3     # 0x0003
uint32 CYCLIST_BICYCLE                  = 19    # 0x0013
uint32 CYCLIST_MOTORCYCLE               = 35    # 0x0023
uint32 CYCLIST_TRICYCLE                 = 51    # 0x0033

uint32 ANIMAL                           = 4     # 0x0004
uint32 ANIMAL_DOGLIKE                   = 20    # 0x0014, includes dog, cat, wolf, etc.
uint32 ANIMAL_DEERLIKE                  = 36    # 0x0024, includes deer, etc.
uint32 ANIMAL_COWLIKE                   = 52    # 0x0034, includes cow, horse, pig, etc.

uint32 ROAD_OBJECT                      = 5     # 0x0005, objects in road area
uint32 ROAD_TRAFFIC_CONE                = 21    # 0x0015, traffic cone
uint32 ROAD_TRAFFIC_BLOCKER             = 37    # 0x0025, traffic blocker, e.g. "Road Closed" sign

uint32 ROADSIDE_OBJECT                  = 6     # 0x0006, objects in road side
uint32 ROADSIDE_TRAFFIC_LIGHT           = 22    # 0x0016
uint32 ROADSIDE_TRAFFIC_SIGN            = 38    # 0x0026
uint32 ROADSIDE_TREE                    = 54    # 0x0036, including all roadside vegetation

uint32 LEVEL_MASK_0                     = 15    # 0x000f
uint32 LEVEL_MASK_1                     = 255   # 0x00ff
uint32 LEVEL_MASK_2                     = 4095  # 0x0fff
uint32 LEVEL_MASK_3                     = 65535 # 0xffff

================================================================================
MSG: zzz_perception_msgs/ObjectSignals
# This message is used to represent detected vehicle light signals or human hand signals

# Signal flags. Multiple signal emission can exists in the same time.
uint16 flags

uint16 UNKNOWN                          = 0     # 0x00
uint16 NONE                             = 16    # 0x10

# This field is related to https://en.wikipedia.org/wiki/Automotive_lighting
uint16 VEHICLE_SIGNAL                   = 1     # 0x01
uint16 VEHICLE_SIGNAL_LEFT_TURN         = 17    # 0x11
uint16 VEHICLE_SIGNAL_RIGHT_TURN        = 33    # 0x21
uint16 VEHICLE_SIGNAL_HAZARD            = 49    # 0x31
uint16 VEHICLE_SIGNAL_BRAKE             = 65    # 0x41
uint16 VEHICLE_SIGNAL_REVERSE           = 81    # 0x51
uint16 VEHICLE_SIGNAL_SPEED_30_LIMIT    = 97    # 0x61

# This field is related to https://en.wikipedia.org/wiki/Traffic_light#Single_aspects
uint16 TRAFFIC_LIGHT                    = 2     # 0x02
uint16 TRAFFIC_LIGHT_RED                = 18    # 0x12
uint16 TRAFFIC_LIGHT_YELLOW             = 34    # 0x22
uint16 TRAFFIC_LIGHT_GREEN              = 50    # 0x32
uint16 TRAFFIC_LIGHT_GREEN_LEFT_TURN    = 66    # 0x42
uint16 TRAFFIC_LIGHT_GREEN_RIGHT_TURN   = 66    # 0x42

# Confidence of the signal detection
float32 score

================================================================================
MSG: zzz_perception_msgs/BoundingBox

# A 3D bounding box that can be positioned and rotated about its center (6 DOF). Dimensions of this box are in meters

# The position and orientation of the rigid body center
geometry_msgs/PoseWithCovariance pose

# The size of (in meters) the bounding box surrounding the object's center pose.
DimensionWithCovariance dimension
================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: zzz_perception_msgs/DimensionWithCovariance
# Describing the size object in 3D space (in meters) with uncertainty

float64 length_x # length(longitudinal direction)
float64 length_y # width(lateral direction)
float64 length_z # height

# Row-major representation of the 3x3 covariance matrix
# In order, the parameters are: (length_x, length_y, length_z)
float64[9] covariance

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: nav_msgs/Odometry
# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist
"""
  __slots__ = ['header','tbox_arr','odo_msg']
  _slot_types = ['std_msgs/Header','zzz_perception_msgs/TrackingBoxArray','nav_msgs/Odometry']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tbox_arr,odo_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CooperativeMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tbox_arr is None:
        self.tbox_arr = zzz_perception_msgs.msg.TrackingBoxArray()
      if self.odo_msg is None:
        self.odo_msg = nav_msgs.msg.Odometry()
    else:
      self.header = std_msgs.msg.Header()
      self.tbox_arr = zzz_perception_msgs.msg.TrackingBoxArray()
      self.odo_msg = nav_msgs.msg.Odometry()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.tbox_arr.header.seq, _x.tbox_arr.header.stamp.secs, _x.tbox_arr.header.stamp.nsecs))
      _x = self.tbox_arr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.tbox_arr.targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.tbox_arr.targets:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        length = len(val1.classes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.classes:
          _x = val2
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = val2.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.signal
        _x = _v1
        buff.write(_get_struct_Hf().pack(_x.flags, _x.score))
        _v2 = val1.bbox
        _v3 = _v2.pose
        _v4 = _v3.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v3.covariance))
        _v7 = _v2.dimension
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_get_struct_9d().pack(*_v7.covariance))
        _v8 = val1.twist
        _v9 = _v8.twist
        _v10 = _v9.linear
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.angular
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v8.covariance))
        _v12 = val1.accel
        _v13 = _v12.accel
        _v14 = _v13.linear
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.angular
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v12.covariance))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.odo_msg.header.seq, _x.odo_msg.header.stamp.secs, _x.odo_msg.header.stamp.nsecs))
      _x = self.odo_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.odo_msg.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odo_msg.pose.pose.position.x, _x.odo_msg.pose.pose.position.y, _x.odo_msg.pose.pose.position.z, _x.odo_msg.pose.pose.orientation.x, _x.odo_msg.pose.pose.orientation.y, _x.odo_msg.pose.pose.orientation.z, _x.odo_msg.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.odo_msg.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.odo_msg.twist.twist.linear.x, _x.odo_msg.twist.twist.linear.y, _x.odo_msg.twist.twist.linear.z, _x.odo_msg.twist.twist.angular.x, _x.odo_msg.twist.twist.angular.y, _x.odo_msg.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.odo_msg.twist.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tbox_arr is None:
        self.tbox_arr = zzz_perception_msgs.msg.TrackingBoxArray()
      if self.odo_msg is None:
        self.odo_msg = nav_msgs.msg.Odometry()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.tbox_arr.header.seq, _x.tbox_arr.header.stamp.secs, _x.tbox_arr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tbox_arr.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tbox_arr.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tbox_arr.targets = []
      for i in range(0, length):
        val1 = zzz_perception_msgs.msg.TrackingBox()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.classes = []
        for i in range(0, length):
          val2 = zzz_perception_msgs.msg.ObjectClass()
          _x = val2
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comments = str[start:end]
          val1.classes.append(val2)
        _v16 = val1.signal
        _x = _v16
        start = end
        end += 6
        (_x.flags, _x.score,) = _get_struct_Hf().unpack(str[start:end])
        _v17 = val1.bbox
        _v18 = _v17.pose
        _v19 = _v18.pose
        _v20 = _v19.position
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v21 = _v19.orientation
        _x = _v21
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v18.covariance = _get_struct_36d().unpack(str[start:end])
        _v22 = _v17.dimension
        _x = _v22
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v22.covariance = _get_struct_9d().unpack(str[start:end])
        _v23 = val1.twist
        _v24 = _v23.twist
        _v25 = _v24.linear
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v26 = _v24.angular
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v23.covariance = _get_struct_36d().unpack(str[start:end])
        _v27 = val1.accel
        _v28 = _v27.accel
        _v29 = _v28.linear
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v30 = _v28.angular
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v27.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comments = str[start:end]
        self.tbox_arr.targets.append(val1)
      _x = self
      start = end
      end += 12
      (_x.odo_msg.header.seq, _x.odo_msg.header.stamp.secs, _x.odo_msg.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odo_msg.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.odo_msg.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odo_msg.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.odo_msg.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odo_msg.pose.pose.position.x, _x.odo_msg.pose.pose.position.y, _x.odo_msg.pose.pose.position.z, _x.odo_msg.pose.pose.orientation.x, _x.odo_msg.pose.pose.orientation.y, _x.odo_msg.pose.pose.orientation.z, _x.odo_msg.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odo_msg.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.odo_msg.twist.twist.linear.x, _x.odo_msg.twist.twist.linear.y, _x.odo_msg.twist.twist.linear.z, _x.odo_msg.twist.twist.angular.x, _x.odo_msg.twist.twist.angular.y, _x.odo_msg.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.odo_msg.twist.covariance = _get_struct_36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.tbox_arr.header.seq, _x.tbox_arr.header.stamp.secs, _x.tbox_arr.header.stamp.nsecs))
      _x = self.tbox_arr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.tbox_arr.targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.tbox_arr.targets:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        length = len(val1.classes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.classes:
          _x = val2
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = val2.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v31 = val1.signal
        _x = _v31
        buff.write(_get_struct_Hf().pack(_x.flags, _x.score))
        _v32 = val1.bbox
        _v33 = _v32.pose
        _v34 = _v33.pose
        _v35 = _v34.position
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.orientation
        _x = _v36
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v33.covariance.tostring())
        _v37 = _v32.dimension
        _x = _v37
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_v37.covariance.tostring())
        _v38 = val1.twist
        _v39 = _v38.twist
        _v40 = _v39.linear
        _x = _v40
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v41 = _v39.angular
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v38.covariance.tostring())
        _v42 = val1.accel
        _v43 = _v42.accel
        _v44 = _v43.linear
        _x = _v44
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v45 = _v43.angular
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v42.covariance.tostring())
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.odo_msg.header.seq, _x.odo_msg.header.stamp.secs, _x.odo_msg.header.stamp.nsecs))
      _x = self.odo_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.odo_msg.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odo_msg.pose.pose.position.x, _x.odo_msg.pose.pose.position.y, _x.odo_msg.pose.pose.position.z, _x.odo_msg.pose.pose.orientation.x, _x.odo_msg.pose.pose.orientation.y, _x.odo_msg.pose.pose.orientation.z, _x.odo_msg.pose.pose.orientation.w))
      buff.write(self.odo_msg.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.odo_msg.twist.twist.linear.x, _x.odo_msg.twist.twist.linear.y, _x.odo_msg.twist.twist.linear.z, _x.odo_msg.twist.twist.angular.x, _x.odo_msg.twist.twist.angular.y, _x.odo_msg.twist.twist.angular.z))
      buff.write(self.odo_msg.twist.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tbox_arr is None:
        self.tbox_arr = zzz_perception_msgs.msg.TrackingBoxArray()
      if self.odo_msg is None:
        self.odo_msg = nav_msgs.msg.Odometry()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.tbox_arr.header.seq, _x.tbox_arr.header.stamp.secs, _x.tbox_arr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tbox_arr.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tbox_arr.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tbox_arr.targets = []
      for i in range(0, length):
        val1 = zzz_perception_msgs.msg.TrackingBox()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.classes = []
        for i in range(0, length):
          val2 = zzz_perception_msgs.msg.ObjectClass()
          _x = val2
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.comments = str[start:end]
          val1.classes.append(val2)
        _v46 = val1.signal
        _x = _v46
        start = end
        end += 6
        (_x.flags, _x.score,) = _get_struct_Hf().unpack(str[start:end])
        _v47 = val1.bbox
        _v48 = _v47.pose
        _v49 = _v48.pose
        _v50 = _v49.position
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v51 = _v49.orientation
        _x = _v51
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v48.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v52 = _v47.dimension
        _x = _v52
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v52.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        _v53 = val1.twist
        _v54 = _v53.twist
        _v55 = _v54.linear
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = _v54.angular
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v53.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v57 = val1.accel
        _v58 = _v57.accel
        _v59 = _v58.linear
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v60 = _v58.angular
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v57.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comments = str[start:end]
        self.tbox_arr.targets.append(val1)
      _x = self
      start = end
      end += 12
      (_x.odo_msg.header.seq, _x.odo_msg.header.stamp.secs, _x.odo_msg.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odo_msg.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.odo_msg.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odo_msg.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.odo_msg.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odo_msg.pose.pose.position.x, _x.odo_msg.pose.pose.position.y, _x.odo_msg.pose.pose.position.z, _x.odo_msg.pose.pose.orientation.x, _x.odo_msg.pose.pose.orientation.y, _x.odo_msg.pose.pose.orientation.z, _x.odo_msg.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odo_msg.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.odo_msg.twist.twist.linear.x, _x.odo_msg.twist.twist.linear.y, _x.odo_msg.twist.twist.linear.z, _x.odo_msg.twist.twist.angular.x, _x.odo_msg.twist.twist.angular.y, _x.odo_msg.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.odo_msg.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_Hf = None
def _get_struct_Hf():
    global _struct_Hf
    if _struct_Hf is None:
        _struct_Hf = struct.Struct("<Hf")
    return _struct_Hf
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_Qf = None
def _get_struct_Qf():
    global _struct_Qf
    if _struct_Qf is None:
        _struct_Qf = struct.Struct("<Qf")
    return _struct_Qf
