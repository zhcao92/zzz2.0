# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_perception_msgs/DetectionBox.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg
import zzz_perception_msgs.msg

class DetectionBox(genpy.Message):
  _md5sum = "0a13bac53d8ff42860cb5814e580ec83"
  _type = "zzz_perception_msgs/DetectionBox"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Defines a box-shaped 3D detection result.

# ----------------- Data -----------------

# The 3D data that generated these results (i.e. object region cropped out of
#   the point cloud). This information is not required for all detectors, so it may be empty.
sensor_msgs/PointCloud2 source_cloud

# The 2D data in the same area for fusion purpose
sensor_msgs/Image source_img

# The frame id of source_img
string source_frame

# ---------------- Properties --------------------

# Describe several classification result for the object
# This field is required to be sorted in descending order of scores
ObjectClass[] classes

# This field indicates visual (or sound?) signal from the object
ObjectSignals signal

# 3D bounding box surrounding the object.
BoundingBox bbox

# This field is for store auxiliary text or data. (e.g. annotation notes)
string comments

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: zzz_perception_msgs/ObjectClass
# The size of (in meters) the bounding box surrounding the object's center pose.

# The unique numeric classification ID of object detected
uint32 classid

# The probability or confidence value of the detected object. By convention, this value should lie in the range 0~1.
float32 score

# Other information about the class (e.g. class name). Only for debug
string comments

##############################################################
###   Here is a hierarchical table of all included types   ###
##############################################################
# Hierarchy is encoded in a 32-bit integer. Each 8 bit stand for a level, and leftmost 8 bit is the top level

uint32 UNKNOWN                          = 0     # 0x0000
uint32 UNKNOWN_DYNAMIC                  = 16    # 0x0010
uint32 UNKNOWN_STATIC                   = 32    # 0x0020

uint32 VEHICLE                          = 1     # 0x0001
uint32 VEHICLE_PASSENGER                = 17    # 0x0011, normal passenger_vehicles
uint32 VEHICEL_VAN                      = 33    # 0x0021
uint32 VEHICLE_TRUCK                    = 49    # 0x0031
uint32 VEHICLE_BUS                      = 65    # 0x0041
uint32 VEHICLE_SCHOOLBUS                = 321   # 0x0141
uint32 VEHICLE_SCHOOLBUS_STOP           = 4417  # 0x1141
uint32 VEHICLE_EMERGENCY                = 81    # 0x0051, emergency vehicles, including 
uint32 VEHICLE_EMERGENCY_POLICE         = 337   # 0x0151
uint32 VEHICLE_EMERGENCY_POLICE_FLASH   = 4433  # 0x1151
uint32 VEHICLE_EMERGENCY_FIRE           = 593   # 0x0251
uint32 VEHICLE_EMERGENCY_FIRE_FLASH     = 4689  # 0x1251
uint32 VEHICLE_EMERGENCY_CIVIL          = 849   # 0x0351, including utility vehicle and tow trucks
uint32 VEHICLE_EMERGENCY_CIVIL_FLASH    = 4945  # 0x1351

uint32 HUMAN                            = 2     # 0x0002
uint32 HUMAN_PEDESTRIAN                 = 18    # 0x0012
uint32 HUMAN_ROADWORKER                 = 34    # 0x0022

uint32 CYCLIST                          = 3     # 0x0003
uint32 CYCLIST_BICYCLE                  = 19    # 0x0013
uint32 CYCLIST_MOTORCYCLE               = 35    # 0x0023
uint32 CYCLIST_TRICYCLE                 = 51    # 0x0033

uint32 ANIMAL                           = 4     # 0x0004
uint32 ANIMAL_DOGLIKE                   = 20    # 0x0014, includes dog, cat, wolf, etc.
uint32 ANIMAL_DEERLIKE                  = 36    # 0x0024, includes deer, etc.
uint32 ANIMAL_COWLIKE                   = 52    # 0x0034, includes cow, horse, pig, etc.

uint32 ROAD_OBJECT                      = 5     # 0x0005, objects in road area
uint32 ROAD_TRAFFIC_CONE                = 21    # 0x0015, traffic cone
uint32 ROAD_TRAFFIC_BLOCKER             = 37    # 0x0025, traffic blocker, e.g. "Road Closed" sign

uint32 ROADSIDE_OBJECT                  = 6     # 0x0006, objects in road side
uint32 ROADSIDE_TRAFFIC_LIGHT           = 22    # 0x0016
uint32 ROADSIDE_TRAFFIC_SIGN            = 38    # 0x0026
uint32 ROADSIDE_TREE                    = 54    # 0x0036, including all roadside vegetation

uint32 LEVEL_MASK_0                     = 15    # 0x000f
uint32 LEVEL_MASK_1                     = 255   # 0x00ff
uint32 LEVEL_MASK_2                     = 4095  # 0x0fff
uint32 LEVEL_MASK_3                     = 65535 # 0xffff

================================================================================
MSG: zzz_perception_msgs/ObjectSignals
# This message is used to represent detected vehicle light signals or human hand signals

# Signal flags. Multiple signal emission can exists in the same time.
uint16 flags

uint16 UNKNOWN                          = 0     # 0x00
uint16 NONE                             = 16    # 0x10

# This field is related to https://en.wikipedia.org/wiki/Automotive_lighting
uint16 VEHICLE_SIGNAL                   = 1     # 0x01
uint16 VEHICLE_SIGNAL_LEFT_TURN         = 17    # 0x11
uint16 VEHICLE_SIGNAL_RIGHT_TURN        = 33    # 0x21
uint16 VEHICLE_SIGNAL_HAZARD            = 49    # 0x31
uint16 VEHICLE_SIGNAL_BRAKE             = 65    # 0x41
uint16 VEHICLE_SIGNAL_REVERSE           = 81    # 0x51
uint16 VEHICLE_SIGNAL_SPEED_30_LIMIT    = 97    # 0x61

# This field is related to https://en.wikipedia.org/wiki/Traffic_light#Single_aspects
uint16 TRAFFIC_LIGHT                    = 2     # 0x02
uint16 TRAFFIC_LIGHT_RED                = 18    # 0x12
uint16 TRAFFIC_LIGHT_YELLOW             = 34    # 0x22
uint16 TRAFFIC_LIGHT_GREEN              = 50    # 0x32
uint16 TRAFFIC_LIGHT_GREEN_LEFT_TURN    = 66    # 0x42
uint16 TRAFFIC_LIGHT_GREEN_RIGHT_TURN   = 66    # 0x42

# Confidence of the signal detection
float32 score

================================================================================
MSG: zzz_perception_msgs/BoundingBox

# A 3D bounding box that can be positioned and rotated about its center (6 DOF). Dimensions of this box are in meters

# The position and orientation of the rigid body center
geometry_msgs/PoseWithCovariance pose

# The size of (in meters) the bounding box surrounding the object's center pose.
DimensionWithCovariance dimension
================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: zzz_perception_msgs/DimensionWithCovariance
# Describing the size object in 3D space (in meters) with uncertainty

float64 length_x # length(longitudinal direction)
float64 length_y # width(lateral direction)
float64 length_z # height

# Row-major representation of the 3x3 covariance matrix
# In order, the parameters are: (length_x, length_y, length_z)
float64[9] covariance
"""
  __slots__ = ['source_cloud','source_img','source_frame','classes','signal','bbox','comments']
  _slot_types = ['sensor_msgs/PointCloud2','sensor_msgs/Image','string','zzz_perception_msgs/ObjectClass[]','zzz_perception_msgs/ObjectSignals','zzz_perception_msgs/BoundingBox','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       source_cloud,source_img,source_frame,classes,signal,bbox,comments

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectionBox, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.source_cloud is None:
        self.source_cloud = sensor_msgs.msg.PointCloud2()
      if self.source_img is None:
        self.source_img = sensor_msgs.msg.Image()
      if self.source_frame is None:
        self.source_frame = ''
      if self.classes is None:
        self.classes = []
      if self.signal is None:
        self.signal = zzz_perception_msgs.msg.ObjectSignals()
      if self.bbox is None:
        self.bbox = zzz_perception_msgs.msg.BoundingBox()
      if self.comments is None:
        self.comments = ''
    else:
      self.source_cloud = sensor_msgs.msg.PointCloud2()
      self.source_img = sensor_msgs.msg.Image()
      self.source_frame = ''
      self.classes = []
      self.signal = zzz_perception_msgs.msg.ObjectSignals()
      self.bbox = zzz_perception_msgs.msg.BoundingBox()
      self.comments = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.source_cloud.header.seq, _x.source_cloud.header.stamp.secs, _x.source_cloud.header.stamp.nsecs))
      _x = self.source_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.source_cloud.height, _x.source_cloud.width))
      length = len(self.source_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.source_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.source_cloud.is_bigendian, _x.source_cloud.point_step, _x.source_cloud.row_step))
      _x = self.source_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.source_cloud.is_dense, _x.source_img.header.seq, _x.source_img.header.stamp.secs, _x.source_img.header.stamp.nsecs))
      _x = self.source_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.source_img.height, _x.source_img.width))
      _x = self.source_img.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.source_img.is_bigendian, _x.source_img.step))
      _x = self.source_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.source_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.classes)
      buff.write(_struct_I.pack(length))
      for val1 in self.classes:
        _x = val1
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Hf7d().pack(_x.signal.flags, _x.signal.score, _x.bbox.pose.pose.position.x, _x.bbox.pose.pose.position.y, _x.bbox.pose.pose.position.z, _x.bbox.pose.pose.orientation.x, _x.bbox.pose.pose.orientation.y, _x.bbox.pose.pose.orientation.z, _x.bbox.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.bbox.pose.covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.bbox.dimension.length_x, _x.bbox.dimension.length_y, _x.bbox.dimension.length_z))
      buff.write(_get_struct_9d().pack(*self.bbox.dimension.covariance))
      _x = self.comments
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.source_cloud is None:
        self.source_cloud = sensor_msgs.msg.PointCloud2()
      if self.source_img is None:
        self.source_img = sensor_msgs.msg.Image()
      if self.classes is None:
        self.classes = None
      if self.signal is None:
        self.signal = zzz_perception_msgs.msg.ObjectSignals()
      if self.bbox is None:
        self.bbox = zzz_perception_msgs.msg.BoundingBox()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.source_cloud.header.seq, _x.source_cloud.header.stamp.secs, _x.source_cloud.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_cloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.source_cloud.height, _x.source_cloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.source_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.source_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.source_cloud.is_bigendian, _x.source_cloud.point_step, _x.source_cloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.source_cloud.is_bigendian = bool(self.source_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.source_cloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.source_cloud.is_dense, _x.source_img.header.seq, _x.source_img.header.stamp.secs, _x.source_img.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.source_cloud.is_dense = bool(self.source_cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_img.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_img.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.source_img.height, _x.source_img.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_img.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_img.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.source_img.is_bigendian, _x.source_img.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.source_img.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.classes = []
      for i in range(0, length):
        val1 = zzz_perception_msgs.msg.ObjectClass()
        _x = val1
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comments = str[start:end]
        self.classes.append(val1)
      _x = self
      start = end
      end += 62
      (_x.signal.flags, _x.signal.score, _x.bbox.pose.pose.position.x, _x.bbox.pose.pose.position.y, _x.bbox.pose.pose.position.z, _x.bbox.pose.pose.orientation.x, _x.bbox.pose.pose.orientation.y, _x.bbox.pose.pose.orientation.z, _x.bbox.pose.pose.orientation.w,) = _get_struct_Hf7d().unpack(str[start:end])
      start = end
      end += 288
      self.bbox.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.bbox.dimension.length_x, _x.bbox.dimension.length_y, _x.bbox.dimension.length_z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.bbox.dimension.covariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comments = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comments = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.source_cloud.header.seq, _x.source_cloud.header.stamp.secs, _x.source_cloud.header.stamp.nsecs))
      _x = self.source_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.source_cloud.height, _x.source_cloud.width))
      length = len(self.source_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.source_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.source_cloud.is_bigendian, _x.source_cloud.point_step, _x.source_cloud.row_step))
      _x = self.source_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.source_cloud.is_dense, _x.source_img.header.seq, _x.source_img.header.stamp.secs, _x.source_img.header.stamp.nsecs))
      _x = self.source_img.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.source_img.height, _x.source_img.width))
      _x = self.source_img.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.source_img.is_bigendian, _x.source_img.step))
      _x = self.source_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.source_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.classes)
      buff.write(_struct_I.pack(length))
      for val1 in self.classes:
        _x = val1
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Hf7d().pack(_x.signal.flags, _x.signal.score, _x.bbox.pose.pose.position.x, _x.bbox.pose.pose.position.y, _x.bbox.pose.pose.position.z, _x.bbox.pose.pose.orientation.x, _x.bbox.pose.pose.orientation.y, _x.bbox.pose.pose.orientation.z, _x.bbox.pose.pose.orientation.w))
      buff.write(self.bbox.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.bbox.dimension.length_x, _x.bbox.dimension.length_y, _x.bbox.dimension.length_z))
      buff.write(self.bbox.dimension.covariance.tostring())
      _x = self.comments
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.source_cloud is None:
        self.source_cloud = sensor_msgs.msg.PointCloud2()
      if self.source_img is None:
        self.source_img = sensor_msgs.msg.Image()
      if self.classes is None:
        self.classes = None
      if self.signal is None:
        self.signal = zzz_perception_msgs.msg.ObjectSignals()
      if self.bbox is None:
        self.bbox = zzz_perception_msgs.msg.BoundingBox()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.source_cloud.header.seq, _x.source_cloud.header.stamp.secs, _x.source_cloud.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_cloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.source_cloud.height, _x.source_cloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.source_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.source_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.source_cloud.is_bigendian, _x.source_cloud.point_step, _x.source_cloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.source_cloud.is_bigendian = bool(self.source_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.source_cloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.source_cloud.is_dense, _x.source_img.header.seq, _x.source_img.header.stamp.secs, _x.source_img.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.source_cloud.is_dense = bool(self.source_cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_img.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_img.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.source_img.height, _x.source_img.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_img.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_img.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.source_img.is_bigendian, _x.source_img.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.source_img.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source_frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.classes = []
      for i in range(0, length):
        val1 = zzz_perception_msgs.msg.ObjectClass()
        _x = val1
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comments = str[start:end]
        self.classes.append(val1)
      _x = self
      start = end
      end += 62
      (_x.signal.flags, _x.signal.score, _x.bbox.pose.pose.position.x, _x.bbox.pose.pose.position.y, _x.bbox.pose.pose.position.z, _x.bbox.pose.pose.orientation.x, _x.bbox.pose.pose.orientation.y, _x.bbox.pose.pose.orientation.z, _x.bbox.pose.pose.orientation.w,) = _get_struct_Hf7d().unpack(str[start:end])
      start = end
      end += 288
      self.bbox.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 24
      (_x.bbox.dimension.length_x, _x.bbox.dimension.length_y, _x.bbox.dimension.length_z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.bbox.dimension.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comments = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comments = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_Hf7d = None
def _get_struct_Hf7d():
    global _struct_Hf7d
    if _struct_Hf7d is None:
        _struct_Hf7d = struct.Struct("<Hf7d")
    return _struct_Hf7d
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
