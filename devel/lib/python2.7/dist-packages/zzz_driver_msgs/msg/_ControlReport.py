# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_driver_msgs/ControlReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlReport(genpy.Message):
  _md5sum = "cca91eb5bf039a027d362a7a7aae6512"
  _type = "zzz_driver_msgs/ControlReport"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Interface for vehicle control

# ---------- Trottle ----------
# Throttle control by-wire enabled
bool throttle_available
# Throttle control overtaken
bool throttle_override 
# Reported throttle level
float32 throttle_report

# ---------- Brake ----------
# Braking control by-wire enabled
bool brake_available
# Braking control overtaken
bool brake_override
# Reported braking level
float32 brake_report

# ---------- Steering ----------
# Steering control by-wire enabled
bool steer_available
# Steering control overtaken
bool steer_override
# Reported steering level
float32 steer_report
"""
  __slots__ = ['throttle_available','throttle_override','throttle_report','brake_available','brake_override','brake_report','steer_available','steer_override','steer_report']
  _slot_types = ['bool','bool','float32','bool','bool','float32','bool','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       throttle_available,throttle_override,throttle_report,brake_available,brake_override,brake_report,steer_available,steer_override,steer_report

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.throttle_available is None:
        self.throttle_available = False
      if self.throttle_override is None:
        self.throttle_override = False
      if self.throttle_report is None:
        self.throttle_report = 0.
      if self.brake_available is None:
        self.brake_available = False
      if self.brake_override is None:
        self.brake_override = False
      if self.brake_report is None:
        self.brake_report = 0.
      if self.steer_available is None:
        self.steer_available = False
      if self.steer_override is None:
        self.steer_override = False
      if self.steer_report is None:
        self.steer_report = 0.
    else:
      self.throttle_available = False
      self.throttle_override = False
      self.throttle_report = 0.
      self.brake_available = False
      self.brake_override = False
      self.brake_report = 0.
      self.steer_available = False
      self.steer_override = False
      self.steer_report = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bf2Bf2Bf().pack(_x.throttle_available, _x.throttle_override, _x.throttle_report, _x.brake_available, _x.brake_override, _x.brake_report, _x.steer_available, _x.steer_override, _x.steer_report))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.throttle_available, _x.throttle_override, _x.throttle_report, _x.brake_available, _x.brake_override, _x.brake_report, _x.steer_available, _x.steer_override, _x.steer_report,) = _get_struct_2Bf2Bf2Bf().unpack(str[start:end])
      self.throttle_available = bool(self.throttle_available)
      self.throttle_override = bool(self.throttle_override)
      self.brake_available = bool(self.brake_available)
      self.brake_override = bool(self.brake_override)
      self.steer_available = bool(self.steer_available)
      self.steer_override = bool(self.steer_override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bf2Bf2Bf().pack(_x.throttle_available, _x.throttle_override, _x.throttle_report, _x.brake_available, _x.brake_override, _x.brake_report, _x.steer_available, _x.steer_override, _x.steer_report))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.throttle_available, _x.throttle_override, _x.throttle_report, _x.brake_available, _x.brake_override, _x.brake_report, _x.steer_available, _x.steer_override, _x.steer_report,) = _get_struct_2Bf2Bf2Bf().unpack(str[start:end])
      self.throttle_available = bool(self.throttle_available)
      self.throttle_override = bool(self.throttle_override)
      self.brake_available = bool(self.brake_available)
      self.brake_override = bool(self.brake_override)
      self.steer_available = bool(self.steer_available)
      self.steer_override = bool(self.steer_override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bf2Bf2Bf = None
def _get_struct_2Bf2Bf2Bf():
    global _struct_2Bf2Bf2Bf
    if _struct_2Bf2Bf2Bf is None:
        _struct_2Bf2Bf2Bf = struct.Struct("<2Bf2Bf2Bf")
    return _struct_2Bf2Bf2Bf
