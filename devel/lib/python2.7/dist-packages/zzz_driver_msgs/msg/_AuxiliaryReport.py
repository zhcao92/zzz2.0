# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_driver_msgs/AuxiliaryReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AuxiliaryReport(genpy.Message):
  _md5sum = "46bed4f4c85b89c6936b9a6716c138b1"
  _type = "zzz_driver_msgs/AuxiliaryReport"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message provide interface for additional vehicle modules, e.g. ACC, BSD


# Forward Collison Warning status
uint8 fcw_flag
uint8 FCW_AVAILABLE = 1
uint8 FCW_ALERT = 2

# Automatic Emergency Brake status
uint8 aeb_flag
uint8 AEB_AVAILABLE = 1
uint8 AEB_PRECHARGE = 2
uint8 AEB_BRAKING = 4

# Adaptive Cruise Control status
uint8 acc_flag
uint8 ACC_AVAILABLE = 1
uint8 ACC_BRAKING = 2

# Lane Departure Warning status
uint8 ldw_flag
uint8 LDW_AVAILABLE = 1
uint8 LDW_LEFT_ALERT = 2
uint8 LDW_RIGHT_ALERT = 4

# Blind Spot Detection status
uint8 bsd_flag
uint8 BSD_AVAILABLE = 1
uint8 BSD_LEFT_ALERT = 2
uint8 BSD_RIGHT_ALERT = 4
"""
  # Pseudo-constants
  FCW_AVAILABLE = 1
  FCW_ALERT = 2
  AEB_AVAILABLE = 1
  AEB_PRECHARGE = 2
  AEB_BRAKING = 4
  ACC_AVAILABLE = 1
  ACC_BRAKING = 2
  LDW_AVAILABLE = 1
  LDW_LEFT_ALERT = 2
  LDW_RIGHT_ALERT = 4
  BSD_AVAILABLE = 1
  BSD_LEFT_ALERT = 2
  BSD_RIGHT_ALERT = 4

  __slots__ = ['fcw_flag','aeb_flag','acc_flag','ldw_flag','bsd_flag']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fcw_flag,aeb_flag,acc_flag,ldw_flag,bsd_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AuxiliaryReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fcw_flag is None:
        self.fcw_flag = 0
      if self.aeb_flag is None:
        self.aeb_flag = 0
      if self.acc_flag is None:
        self.acc_flag = 0
      if self.ldw_flag is None:
        self.ldw_flag = 0
      if self.bsd_flag is None:
        self.bsd_flag = 0
    else:
      self.fcw_flag = 0
      self.aeb_flag = 0
      self.acc_flag = 0
      self.ldw_flag = 0
      self.bsd_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.fcw_flag, _x.aeb_flag, _x.acc_flag, _x.ldw_flag, _x.bsd_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.fcw_flag, _x.aeb_flag, _x.acc_flag, _x.ldw_flag, _x.bsd_flag,) = _get_struct_5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.fcw_flag, _x.aeb_flag, _x.acc_flag, _x.ldw_flag, _x.bsd_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.fcw_flag, _x.aeb_flag, _x.acc_flag, _x.ldw_flag, _x.bsd_flag,) = _get_struct_5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
