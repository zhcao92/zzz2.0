# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_driver_msgs/FrenetSerretState2D.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FrenetSerretState2D(genpy.Message):
  _md5sum = "df9764c6ee98f33fca6c752fdbb15bc4"
  _type = "zzz_driver_msgs/FrenetSerretState2D"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message describes a state in 2d Frenet-Serret Frame
# By 2d Frenet-Serret Frame we ignore the movement in z (in Cartesian) / b (in Frenet) direction
# For more information, refer to https://en.wikipedia.org/wiki/Frenet-Serret_formulas

# 2D states
float32 s # Offset in tanget direction
float32 d # Offset in normal direction
          # we omit the offset in binormal direction
float32 psi # Heading angle in s-d plane
float32[9] pose_covariance

# First order derivatives
float32 vs
float32 vd
float32 omega
float32[9] twist_covariance

# Second order derivatives
float32 sa # prevent keyword conflict
float32 ad
float32 epsilon
float32[9] accel_covariance
"""
  __slots__ = ['s','d','psi','pose_covariance','vs','vd','omega','twist_covariance','sa','ad','epsilon','accel_covariance']
  _slot_types = ['float32','float32','float32','float32[9]','float32','float32','float32','float32[9]','float32','float32','float32','float32[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       s,d,psi,pose_covariance,vs,vd,omega,twist_covariance,sa,ad,epsilon,accel_covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FrenetSerretState2D, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.s is None:
        self.s = 0.
      if self.d is None:
        self.d = 0.
      if self.psi is None:
        self.psi = 0.
      if self.pose_covariance is None:
        self.pose_covariance = [0.] * 9
      if self.vs is None:
        self.vs = 0.
      if self.vd is None:
        self.vd = 0.
      if self.omega is None:
        self.omega = 0.
      if self.twist_covariance is None:
        self.twist_covariance = [0.] * 9
      if self.sa is None:
        self.sa = 0.
      if self.ad is None:
        self.ad = 0.
      if self.epsilon is None:
        self.epsilon = 0.
      if self.accel_covariance is None:
        self.accel_covariance = [0.] * 9
    else:
      self.s = 0.
      self.d = 0.
      self.psi = 0.
      self.pose_covariance = [0.] * 9
      self.vs = 0.
      self.vd = 0.
      self.omega = 0.
      self.twist_covariance = [0.] * 9
      self.sa = 0.
      self.ad = 0.
      self.epsilon = 0.
      self.accel_covariance = [0.] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
      buff.write(_get_struct_9f().pack(*self.pose_covariance))
      _x = self
      buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
      buff.write(_get_struct_9f().pack(*self.twist_covariance))
      _x = self
      buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
      buff.write(_get_struct_9f().pack(*self.accel_covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.pose_covariance = _get_struct_9f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.twist_covariance = _get_struct_9f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.accel_covariance = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
      buff.write(self.pose_covariance.tostring())
      _x = self
      buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
      buff.write(self.twist_covariance.tostring())
      _x = self
      buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
      buff.write(self.accel_covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      _x = self
      start = end
      end += 12
      (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      _x = self
      start = end
      end += 12
      (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
