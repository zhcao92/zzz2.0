# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_cognition_msgs/MultiLaneMapState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import zzz_cognition_msgs.msg
import zzz_driver_msgs.msg
import zzz_navigation_msgs.msg
import zzz_perception_msgs.msg

class MultiLaneMapState(genpy.Message):
  _md5sum = "6b11c970afbbe4b3cb2ead9f27eb736e"
  _type = "zzz_cognition_msgs/MultiLaneMapState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message describes a multi-lane dynamic map model


# distance before next junction
float32 distance_to_junction

# -------- Multi-lanes info --------
# all lane info, lanes must be ordered from right most lane
LaneState[] lanes

# the lane that ego vehicle drives on
float32 ego_lane_index

# exit lane index (0 refer to right-most lane in right-side driving situation)
int8[] exit_lane_index

================================================================================
MSG: zzz_cognition_msgs/LaneState
# This message represent a state of lane in dynamic map

# Static properties of the lane
zzz_navigation_msgs/Lane map_lane

# distance to lane end
float32 ego_dis_to_lane_tail # = Inf
float32 ego_dis_to_lane_head # = Inf

# the front vehicles on this lane, sorted by their distances in ascending order
# TODO: Change name to front_objects
RoadObstacle[] front_vehicles

# the rear vehicles on this lane, sorted by their distances in ascending order
# TODO: Change name to rear_objects
RoadObstacle[] rear_vehicles

================================================================================
MSG: zzz_navigation_msgs/Lane
# This message describe a lane with polyline representation

# ----- Basic properties -----
# the rightest lane is 0, reference lane is -1
# TODO: remove this field
int16 index

# Speed limit (km/h)
float32 speed_limit

# Length of the lane. Provided for easy computation
float32 length
float32 width

# Whether this lane allow two way traffic
# This can be true when the road is too narrow or in the center turning lane
bool bidirectional # = False

# The situation when lane ends. This field could be updated with dynamic info.
uint8 stop_state # = 0
uint8 STOP_STATE_UNKNOWN = 0
uint8 STOP_STATE_THRU = 1 # e.g. drive through at lane connection, green light
uint8 STOP_STATE_YIELD = 2 # e.g. unprotected left/right turn, flashing yellow light
uint8 STOP_STATE_STOP = 3 # e.g. red light, yellow light
uint8 STOP_STATE_STOP_YIELD = 4 # e.g. stop sign, right turn at red light
uint8 STOP_STATE_STOP_YIELD_ALL_WAY = 5 # e.g. flashing red light, all way stop sign

# ----- Central path representation -----
# The central_path_points field is used when central_path_type is waypoint.
# Otherwise, central_path_coeffs should be used
LanePoint[] central_path_points
float32[] central_path_coeffs

uint8 central_path_type # = 0
uint8 CENTRAL_PATH_WAYPOINT = 0 # discretized
uint8 CENTRAL_PATH_LINE = 1
uint8 CENTRAL_PATH_CONIC = 2 # conic section, including parabola and hyperbola
uint8 CENTRAL_PATH_POLYNOMIAL = 3 #
uint8 CENTRAL_PATH_BEZIER = 4

# ----- Boundary representation -----
# The boundary description of current lane.
# Not that the boundary type only describe the behaviour from current lane to neighbour lane or road shoulder
LaneBoundary[] left_boundaries
LaneBoundary[] right_boundaries

# ----- Auxiliary information of the lane -----
# Road situations on this line. This field could be updated with dynamic info.
LaneSituation[] situations

# ---- traffic ligth position ------ 
float32[] traffic_light_pos
================================================================================
MSG: zzz_navigation_msgs/LanePoint
# This message describe a road point from polyline represented lane

# The 3D position of the lane point
geometry_msgs/Point position

# ----- Other useful information -----
# Distance from lane start to current point. The distance of the first point should be zero
float32 s

# Slope at current position of the road
# Can be used to control the throttle
float32 slope

# Road curvature at current position of the road
# Can be used to slow down before turning
float32 curvature

# The yaw angle of tangent line (in radian)
float32 tangent

# Road width at current position
# Can be used to determine the carefulness of driving
float32 width

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: zzz_navigation_msgs/LaneBoundary
# This message describe the boundary type of a part of a lane

# Lane boundary point
LanePoint boundary_point

# Boundary type from between `s` and `s` of the next section start
uint8 boundary_type
uint8 BOUNDARY_UNKNOWN = 0
uint8 BOUNDARY_DASHED_WHITE = 1  # neighbour lane has same direction.
uint8 BOUNDARY_DASHED_YELLOW = 2 # neighbour lane has different direction.
uint8 BOUNDARY_SOLID_WHITE = 3   # neighbour lane has same direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW = 4  # neighbour lane has different direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW_TURN = 5  # neighbour lane has different direction, not allowed to change lane unless turning.
uint8 BOUNDARY_CURB = 6          # neighbour is road shoulder

# Confidence of the lane boundary classification
float32 confidence

================================================================================
MSG: zzz_navigation_msgs/LaneSituation
# This message store any uncommon situations on a road
# Situation can be a map specified object or fresh events

# The location of the situation in a lane (distance from lane start)
float32 s

# How long this situation affect along the lane.
# Inf means take effect until lane ends
float32 length

# Type of situation
uint8 situation_type
uint8 SITUATION_NOT_SPECIFIED = 0
uint8 SITUATION_BLOCKED = 1 # Something blocked this lane, vehicle should stop here
uint8 SITUATION_CROSSWALK = 2 # Crosswalk
uint8 SITUATION_REDUCE_SPEED = 3 # Reducing speed is required. This can be due to speed bump, construction, or school bus stop, etc

# ------- Situation information -------
# The new speed limit. Zero means the vehicle is required to stop
float32 reduced_max_speed

# Additional information
string comments

================================================================================
MSG: zzz_cognition_msgs/RoadObstacle
# This message contains all the information that planning needs for a road object


# Unique indentity of the obstacle
uint64 uid

# The confidence of existence, can be used to determine whether this object is valid, or invalid
# A possible way of get the confidence is by using tracking age
float32 confidence

# The best guess of obstacle type
zzz_perception_msgs/ObjectClass cls

# Estimated kinematic properties
zzz_driver_msgs/RigidBodyState state
# Kinematic properties in Frenet Frame
zzz_driver_msgs/FrenetSerretState2D ffstate

# Relationship to lane, for prediction or locating
float32 lane_index # in which lane
float32 lane_anglediff # angle difference
float32 lane_dist_left_t # distance to lane
float32 lane_dist_right_t
float32 lane_dist_s # s position in the road

# A flag to mark whether the object is static
bool is_static

# XXX: Do we need history trajectories?

# ----- Physical Boundary (Optional) -----
uint8 shape_type
uint8 SHAPE_UNDEFINED = 0
uint8 SHAPE_POLYGON = 1

# Representation of the object if it's represented by polygon
geometry_msgs/Polygon shape

# bbox, refer to BoundingBox in zzz_perception_msgs

zzz_perception_msgs/DimensionWithCovariance dimension
#uint8 dimension

# Null uncertainty of Inf uncertainty means that the shape is not actually generated
float32[] shape_uncertainty

# ----- High level behavior estimation -----

uint8 behavior
uint8 BEHAVIOR_UNKNOWN = 0
uint8 BEHAVIOR_STOPPING = 1 # vehicle is going to stop completely or stay stopped
uint8 BEHAVIOR_FOLLOW = 2 # follow lane or straight line
uint8 BEHAVIOR_MOVING_LEFT = 3 # changing to its left lane or branch left
uint8 BEHAVIOR_MOVING_RIGHT = 4 # changing to its right lane or branch right

# This field is preserved to adapt to yield situation.
# Yield situation includes left turn, right turn, sequencial stop sign, emergency vehicle, etc.
# Yield means if your path conflict with the object's, you should wait for the object
# to go through the conflict point.
uint8 priority
uint8 PRIORITY_UNKNOWN = 0
uint8 PRIORITY_NORMAL = 1
uint8 PRIORITY_CAUTIOUS = 2 # You can move when this obstacle is far away
uint8 PRIORITY_STOP = 3 # Should let this vehicle to go and then you can move

================================================================================
MSG: zzz_perception_msgs/ObjectClass
# The size of (in meters) the bounding box surrounding the object's center pose.

# The unique numeric classification ID of object detected
uint32 classid

# The probability or confidence value of the detected object. By convention, this value should lie in the range 0~1.
float32 score

# Other information about the class (e.g. class name). Only for debug
string comments

##############################################################
###   Here is a hierarchical table of all included types   ###
##############################################################
# Hierarchy is encoded in a 32-bit integer. Each 8 bit stand for a level, and leftmost 8 bit is the top level

uint32 UNKNOWN                          = 0     # 0x0000
uint32 UNKNOWN_DYNAMIC                  = 16    # 0x0010
uint32 UNKNOWN_STATIC                   = 32    # 0x0020

uint32 VEHICLE                          = 1     # 0x0001
uint32 VEHICLE_PASSENGER                = 17    # 0x0011, normal passenger_vehicles
uint32 VEHICEL_VAN                      = 33    # 0x0021
uint32 VEHICLE_TRUCK                    = 49    # 0x0031
uint32 VEHICLE_BUS                      = 65    # 0x0041
uint32 VEHICLE_SCHOOLBUS                = 321   # 0x0141
uint32 VEHICLE_SCHOOLBUS_STOP           = 4417  # 0x1141
uint32 VEHICLE_EMERGENCY                = 81    # 0x0051, emergency vehicles, including 
uint32 VEHICLE_EMERGENCY_POLICE         = 337   # 0x0151
uint32 VEHICLE_EMERGENCY_POLICE_FLASH   = 4433  # 0x1151
uint32 VEHICLE_EMERGENCY_FIRE           = 593   # 0x0251
uint32 VEHICLE_EMERGENCY_FIRE_FLASH     = 4689  # 0x1251
uint32 VEHICLE_EMERGENCY_CIVIL          = 849   # 0x0351, including utility vehicle and tow trucks
uint32 VEHICLE_EMERGENCY_CIVIL_FLASH    = 4945  # 0x1351

uint32 HUMAN                            = 2     # 0x0002
uint32 HUMAN_PEDESTRIAN                 = 18    # 0x0012
uint32 HUMAN_ROADWORKER                 = 34    # 0x0022

uint32 CYCLIST                          = 3     # 0x0003
uint32 CYCLIST_BICYCLE                  = 19    # 0x0013
uint32 CYCLIST_MOTORCYCLE               = 35    # 0x0023
uint32 CYCLIST_TRICYCLE                 = 51    # 0x0033

uint32 ANIMAL                           = 4     # 0x0004
uint32 ANIMAL_DOGLIKE                   = 20    # 0x0014, includes dog, cat, wolf, etc.
uint32 ANIMAL_DEERLIKE                  = 36    # 0x0024, includes deer, etc.
uint32 ANIMAL_COWLIKE                   = 52    # 0x0034, includes cow, horse, pig, etc.

uint32 ROAD_OBJECT                      = 5     # 0x0005, objects in road area
uint32 ROAD_TRAFFIC_CONE                = 21    # 0x0015, traffic cone
uint32 ROAD_TRAFFIC_BLOCKER             = 37    # 0x0025, traffic blocker, e.g. "Road Closed" sign

uint32 ROADSIDE_OBJECT                  = 6     # 0x0006, objects in road side
uint32 ROADSIDE_TRAFFIC_LIGHT           = 22    # 0x0016
uint32 ROADSIDE_TRAFFIC_SIGN            = 38    # 0x0026
uint32 ROADSIDE_TREE                    = 54    # 0x0036, including all roadside vegetation

uint32 LEVEL_MASK_0                     = 15    # 0x000f
uint32 LEVEL_MASK_1                     = 255   # 0x00ff
uint32 LEVEL_MASK_2                     = 4095  # 0x0fff
uint32 LEVEL_MASK_3                     = 65535 # 0xffff

================================================================================
MSG: zzz_driver_msgs/RigidBodyState
# This message contains commonly used state variables of rigid body

# ID of frame fixed to the rigid body
string child_frame_id

# Location and orientatation of the object
geometry_msgs/PoseWithCovariance  pose

# Linear and angular velocity of the object
geometry_msgs/TwistWithCovariance twist

# Linear and angular acceleration of the object
geometry_msgs/AccelWithCovariance accel

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: zzz_driver_msgs/FrenetSerretState2D
# This message describes a state in 2d Frenet-Serret Frame
# By 2d Frenet-Serret Frame we ignore the movement in z (in Cartesian) / b (in Frenet) direction
# For more information, refer to https://en.wikipedia.org/wiki/Frenet-Serret_formulas

# 2D states
float32 s # Offset in tanget direction
float32 d # Offset in normal direction
          # we omit the offset in binormal direction
float32 psi # Heading angle in s-d plane
float32[9] pose_covariance

# First order derivatives
float32 vs
float32 vd
float32 omega
float32[9] twist_covariance

# Second order derivatives
float32 sa # prevent keyword conflict
float32 ad
float32 epsilon
float32[9] accel_covariance

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: zzz_perception_msgs/DimensionWithCovariance
# Describing the size object in 3D space (in meters) with uncertainty

float64 length_x # length(longitudinal direction)
float64 length_y # width(lateral direction)
float64 length_z # height

# Row-major representation of the 3x3 covariance matrix
# In order, the parameters are: (length_x, length_y, length_z)
float64[9] covariance
"""
  __slots__ = ['distance_to_junction','lanes','ego_lane_index','exit_lane_index']
  _slot_types = ['float32','zzz_cognition_msgs/LaneState[]','float32','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       distance_to_junction,lanes,ego_lane_index,exit_lane_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultiLaneMapState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.distance_to_junction is None:
        self.distance_to_junction = 0.
      if self.lanes is None:
        self.lanes = []
      if self.ego_lane_index is None:
        self.ego_lane_index = 0.
      if self.exit_lane_index is None:
        self.exit_lane_index = []
    else:
      self.distance_to_junction = 0.
      self.lanes = []
      self.ego_lane_index = 0.
      self.exit_lane_index = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.distance_to_junction
      buff.write(_get_struct_f().pack(_x))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _v1 = val1.map_lane
        _x = _v1
        buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
        length = len(_v1.central_path_points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.central_path_points:
          _v2 = val3.position
          _x = _v2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val3
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        length = len(_v1.central_path_coeffs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v1.central_path_coeffs))
        _x = _v1.central_path_type
        buff.write(_get_struct_B().pack(_x))
        length = len(_v1.left_boundaries)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.left_boundaries:
          _v3 = val3.boundary_point
          _v4 = _v3.position
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v3
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(_v1.right_boundaries)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.right_boundaries:
          _v5 = val3.boundary_point
          _v6 = _v5.position
          _x = _v6
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v5
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(_v1.situations)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.situations:
          _x = val3
          buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
          _x = val3.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.traffic_light_pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v1.traffic_light_pos))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.ego_dis_to_lane_tail, _x.ego_dis_to_lane_head))
        length = len(val1.front_vehicles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.front_vehicles:
          _x = val2
          buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
          _v7 = val2.cls
          _x = _v7
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = _v7.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v8 = val2.state
          _x = _v8.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v9 = _v8.pose
          _v10 = _v9.pose
          _v11 = _v10.position
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v12 = _v10.orientation
          _x = _v12
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_36d().pack(*_v9.covariance))
          _v13 = _v8.twist
          _v14 = _v13.twist
          _v15 = _v14.linear
          _x = _v15
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v16 = _v14.angular
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v13.covariance))
          _v17 = _v8.accel
          _v18 = _v17.accel
          _v19 = _v18.linear
          _x = _v19
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v20 = _v18.angular
          _x = _v20
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v17.covariance))
          _v21 = val2.ffstate
          _x = _v21
          buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
          buff.write(_get_struct_9f().pack(*_v21.pose_covariance))
          _x = _v21
          buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
          buff.write(_get_struct_9f().pack(*_v21.twist_covariance))
          _x = _v21
          buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
          buff.write(_get_struct_9f().pack(*_v21.accel_covariance))
          _x = val2
          buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
          _v22 = val2.shape
          length = len(_v22.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v22.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v23 = val2.dimension
          _x = _v23
          buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
          buff.write(_get_struct_9d().pack(*_v23.covariance))
          length = len(val2.shape_uncertainty)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.shape_uncertainty))
          _x = val2
          buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
        length = len(val1.rear_vehicles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.rear_vehicles:
          _x = val2
          buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
          _v24 = val2.cls
          _x = _v24
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = _v24.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v25 = val2.state
          _x = _v25.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v26 = _v25.pose
          _v27 = _v26.pose
          _v28 = _v27.position
          _x = _v28
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v29 = _v27.orientation
          _x = _v29
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_36d().pack(*_v26.covariance))
          _v30 = _v25.twist
          _v31 = _v30.twist
          _v32 = _v31.linear
          _x = _v32
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v33 = _v31.angular
          _x = _v33
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v30.covariance))
          _v34 = _v25.accel
          _v35 = _v34.accel
          _v36 = _v35.linear
          _x = _v36
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v37 = _v35.angular
          _x = _v37
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v34.covariance))
          _v38 = val2.ffstate
          _x = _v38
          buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
          buff.write(_get_struct_9f().pack(*_v38.pose_covariance))
          _x = _v38
          buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
          buff.write(_get_struct_9f().pack(*_v38.twist_covariance))
          _x = _v38
          buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
          buff.write(_get_struct_9f().pack(*_v38.accel_covariance))
          _x = val2
          buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
          _v39 = val2.shape
          length = len(_v39.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v39.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v40 = val2.dimension
          _x = _v40
          buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
          buff.write(_get_struct_9d().pack(*_v40.covariance))
          length = len(val2.shape_uncertainty)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.shape_uncertainty))
          _x = val2
          buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      _x = self.ego_lane_index
      buff.write(_get_struct_f().pack(_x))
      length = len(self.exit_lane_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.exit_lane_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lanes is None:
        self.lanes = None
      end = 0
      start = end
      end += 4
      (self.distance_to_junction,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.LaneState()
        _v41 = val1.map_lane
        _x = _v41
        start = end
        end += 16
        (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
        _v41.bidirectional = bool(_v41.bidirectional)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.central_path_points = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LanePoint()
          _v42 = val3.position
          _x = _v42
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val3
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _v41.central_path_points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.central_path_coeffs = s.unpack(str[start:end])
        start = end
        end += 1
        (_v41.central_path_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.left_boundaries = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneBoundary()
          _v43 = val3.boundary_point
          _v44 = _v43.position
          _x = _v44
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v43
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val3
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          _v41.left_boundaries.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.right_boundaries = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneBoundary()
          _v45 = val3.boundary_point
          _v46 = _v45.position
          _x = _v46
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v45
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val3
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          _v41.right_boundaries.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.situations = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneSituation()
          _x = val3
          start = end
          end += 13
          (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.comments = str[start:end]
          _v41.situations.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.traffic_light_pos = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.ego_dis_to_lane_tail, _x.ego_dis_to_lane_head,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.front_vehicles = []
        for i in range(0, length):
          val2 = zzz_cognition_msgs.msg.RoadObstacle()
          _x = val2
          start = end
          end += 12
          (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
          _v47 = val2.cls
          _x = _v47
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v47.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v47.comments = str[start:end]
          _v48 = val2.state
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v48.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v48.child_frame_id = str[start:end]
          _v49 = _v48.pose
          _v50 = _v49.pose
          _v51 = _v50.position
          _x = _v51
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v52 = _v50.orientation
          _x = _v52
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v49.covariance = _get_struct_36d().unpack(str[start:end])
          _v53 = _v48.twist
          _v54 = _v53.twist
          _v55 = _v54.linear
          _x = _v55
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56 = _v54.angular
          _x = _v56
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v53.covariance = _get_struct_36d().unpack(str[start:end])
          _v57 = _v48.accel
          _v58 = _v57.accel
          _v59 = _v58.linear
          _x = _v59
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v60 = _v58.angular
          _x = _v60
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v57.covariance = _get_struct_36d().unpack(str[start:end])
          _v61 = val2.ffstate
          _x = _v61
          start = end
          end += 12
          (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v61.pose_covariance = _get_struct_9f().unpack(str[start:end])
          _x = _v61
          start = end
          end += 12
          (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v61.twist_covariance = _get_struct_9f().unpack(str[start:end])
          _x = _v61
          start = end
          end += 12
          (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v61.accel_covariance = _get_struct_9f().unpack(str[start:end])
          _x = val2
          start = end
          end += 22
          (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
          val2.is_static = bool(val2.is_static)
          _v62 = val2.shape
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v62.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v62.points.append(val4)
          _v63 = val2.dimension
          _x = _v63
          start = end
          end += 24
          (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 72
          _v63.covariance = _get_struct_9d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.shape_uncertainty = s.unpack(str[start:end])
          _x = val2
          start = end
          end += 2
          (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
          val1.front_vehicles.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.rear_vehicles = []
        for i in range(0, length):
          val2 = zzz_cognition_msgs.msg.RoadObstacle()
          _x = val2
          start = end
          end += 12
          (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
          _v64 = val2.cls
          _x = _v64
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v64.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v64.comments = str[start:end]
          _v65 = val2.state
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v65.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v65.child_frame_id = str[start:end]
          _v66 = _v65.pose
          _v67 = _v66.pose
          _v68 = _v67.position
          _x = _v68
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v69 = _v67.orientation
          _x = _v69
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v66.covariance = _get_struct_36d().unpack(str[start:end])
          _v70 = _v65.twist
          _v71 = _v70.twist
          _v72 = _v71.linear
          _x = _v72
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v73 = _v71.angular
          _x = _v73
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v70.covariance = _get_struct_36d().unpack(str[start:end])
          _v74 = _v65.accel
          _v75 = _v74.accel
          _v76 = _v75.linear
          _x = _v76
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v77 = _v75.angular
          _x = _v77
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v74.covariance = _get_struct_36d().unpack(str[start:end])
          _v78 = val2.ffstate
          _x = _v78
          start = end
          end += 12
          (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v78.pose_covariance = _get_struct_9f().unpack(str[start:end])
          _x = _v78
          start = end
          end += 12
          (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v78.twist_covariance = _get_struct_9f().unpack(str[start:end])
          _x = _v78
          start = end
          end += 12
          (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v78.accel_covariance = _get_struct_9f().unpack(str[start:end])
          _x = val2
          start = end
          end += 22
          (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
          val2.is_static = bool(val2.is_static)
          _v79 = val2.shape
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v79.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v79.points.append(val4)
          _v80 = val2.dimension
          _x = _v80
          start = end
          end += 24
          (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 72
          _v80.covariance = _get_struct_9d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.shape_uncertainty = s.unpack(str[start:end])
          _x = val2
          start = end
          end += 2
          (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
          val1.rear_vehicles.append(val2)
        self.lanes.append(val1)
      start = end
      end += 4
      (self.ego_lane_index,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.exit_lane_index = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.distance_to_junction
      buff.write(_get_struct_f().pack(_x))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _v81 = val1.map_lane
        _x = _v81
        buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
        length = len(_v81.central_path_points)
        buff.write(_struct_I.pack(length))
        for val3 in _v81.central_path_points:
          _v82 = val3.position
          _x = _v82
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val3
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        length = len(_v81.central_path_coeffs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v81.central_path_coeffs.tostring())
        _x = _v81.central_path_type
        buff.write(_get_struct_B().pack(_x))
        length = len(_v81.left_boundaries)
        buff.write(_struct_I.pack(length))
        for val3 in _v81.left_boundaries:
          _v83 = val3.boundary_point
          _v84 = _v83.position
          _x = _v84
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v83
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(_v81.right_boundaries)
        buff.write(_struct_I.pack(length))
        for val3 in _v81.right_boundaries:
          _v85 = val3.boundary_point
          _v86 = _v85.position
          _x = _v86
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v85
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(_v81.situations)
        buff.write(_struct_I.pack(length))
        for val3 in _v81.situations:
          _x = val3
          buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
          _x = val3.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v81.traffic_light_pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v81.traffic_light_pos.tostring())
        _x = val1
        buff.write(_get_struct_2f().pack(_x.ego_dis_to_lane_tail, _x.ego_dis_to_lane_head))
        length = len(val1.front_vehicles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.front_vehicles:
          _x = val2
          buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
          _v87 = val2.cls
          _x = _v87
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = _v87.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v88 = val2.state
          _x = _v88.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v89 = _v88.pose
          _v90 = _v89.pose
          _v91 = _v90.position
          _x = _v91
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v92 = _v90.orientation
          _x = _v92
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_v89.covariance.tostring())
          _v93 = _v88.twist
          _v94 = _v93.twist
          _v95 = _v94.linear
          _x = _v95
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v96 = _v94.angular
          _x = _v96
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v93.covariance.tostring())
          _v97 = _v88.accel
          _v98 = _v97.accel
          _v99 = _v98.linear
          _x = _v99
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v100 = _v98.angular
          _x = _v100
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v97.covariance.tostring())
          _v101 = val2.ffstate
          _x = _v101
          buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
          buff.write(_v101.pose_covariance.tostring())
          _x = _v101
          buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
          buff.write(_v101.twist_covariance.tostring())
          _x = _v101
          buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
          buff.write(_v101.accel_covariance.tostring())
          _x = val2
          buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
          _v102 = val2.shape
          length = len(_v102.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v102.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v103 = val2.dimension
          _x = _v103
          buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
          buff.write(_v103.covariance.tostring())
          length = len(val2.shape_uncertainty)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.shape_uncertainty.tostring())
          _x = val2
          buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
        length = len(val1.rear_vehicles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.rear_vehicles:
          _x = val2
          buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
          _v104 = val2.cls
          _x = _v104
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = _v104.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v105 = val2.state
          _x = _v105.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v106 = _v105.pose
          _v107 = _v106.pose
          _v108 = _v107.position
          _x = _v108
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v109 = _v107.orientation
          _x = _v109
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_v106.covariance.tostring())
          _v110 = _v105.twist
          _v111 = _v110.twist
          _v112 = _v111.linear
          _x = _v112
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v113 = _v111.angular
          _x = _v113
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v110.covariance.tostring())
          _v114 = _v105.accel
          _v115 = _v114.accel
          _v116 = _v115.linear
          _x = _v116
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v117 = _v115.angular
          _x = _v117
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v114.covariance.tostring())
          _v118 = val2.ffstate
          _x = _v118
          buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
          buff.write(_v118.pose_covariance.tostring())
          _x = _v118
          buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
          buff.write(_v118.twist_covariance.tostring())
          _x = _v118
          buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
          buff.write(_v118.accel_covariance.tostring())
          _x = val2
          buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
          _v119 = val2.shape
          length = len(_v119.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v119.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v120 = val2.dimension
          _x = _v120
          buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
          buff.write(_v120.covariance.tostring())
          length = len(val2.shape_uncertainty)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.shape_uncertainty.tostring())
          _x = val2
          buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      _x = self.ego_lane_index
      buff.write(_get_struct_f().pack(_x))
      length = len(self.exit_lane_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.exit_lane_index.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lanes is None:
        self.lanes = None
      end = 0
      start = end
      end += 4
      (self.distance_to_junction,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.LaneState()
        _v121 = val1.map_lane
        _x = _v121
        start = end
        end += 16
        (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
        _v121.bidirectional = bool(_v121.bidirectional)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v121.central_path_points = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LanePoint()
          _v122 = val3.position
          _x = _v122
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val3
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _v121.central_path_points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v121.central_path_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 1
        (_v121.central_path_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v121.left_boundaries = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneBoundary()
          _v123 = val3.boundary_point
          _v124 = _v123.position
          _x = _v124
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v123
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val3
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          _v121.left_boundaries.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v121.right_boundaries = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneBoundary()
          _v125 = val3.boundary_point
          _v126 = _v125.position
          _x = _v126
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v125
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val3
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          _v121.right_boundaries.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v121.situations = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneSituation()
          _x = val3
          start = end
          end += 13
          (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.comments = str[start:end]
          _v121.situations.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v121.traffic_light_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 8
        (_x.ego_dis_to_lane_tail, _x.ego_dis_to_lane_head,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.front_vehicles = []
        for i in range(0, length):
          val2 = zzz_cognition_msgs.msg.RoadObstacle()
          _x = val2
          start = end
          end += 12
          (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
          _v127 = val2.cls
          _x = _v127
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v127.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v127.comments = str[start:end]
          _v128 = val2.state
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v128.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v128.child_frame_id = str[start:end]
          _v129 = _v128.pose
          _v130 = _v129.pose
          _v131 = _v130.position
          _x = _v131
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v132 = _v130.orientation
          _x = _v132
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v129.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v133 = _v128.twist
          _v134 = _v133.twist
          _v135 = _v134.linear
          _x = _v135
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v136 = _v134.angular
          _x = _v136
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v133.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v137 = _v128.accel
          _v138 = _v137.accel
          _v139 = _v138.linear
          _x = _v139
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v140 = _v138.angular
          _x = _v140
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v137.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v141 = val2.ffstate
          _x = _v141
          start = end
          end += 12
          (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v141.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = _v141
          start = end
          end += 12
          (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v141.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = _v141
          start = end
          end += 12
          (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v141.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = val2
          start = end
          end += 22
          (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
          val2.is_static = bool(val2.is_static)
          _v142 = val2.shape
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v142.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v142.points.append(val4)
          _v143 = val2.dimension
          _x = _v143
          start = end
          end += 24
          (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 72
          _v143.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _x = val2
          start = end
          end += 2
          (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
          val1.front_vehicles.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.rear_vehicles = []
        for i in range(0, length):
          val2 = zzz_cognition_msgs.msg.RoadObstacle()
          _x = val2
          start = end
          end += 12
          (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
          _v144 = val2.cls
          _x = _v144
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v144.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v144.comments = str[start:end]
          _v145 = val2.state
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v145.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v145.child_frame_id = str[start:end]
          _v146 = _v145.pose
          _v147 = _v146.pose
          _v148 = _v147.position
          _x = _v148
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v149 = _v147.orientation
          _x = _v149
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v146.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v150 = _v145.twist
          _v151 = _v150.twist
          _v152 = _v151.linear
          _x = _v152
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v153 = _v151.angular
          _x = _v153
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v150.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v154 = _v145.accel
          _v155 = _v154.accel
          _v156 = _v155.linear
          _x = _v156
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v157 = _v155.angular
          _x = _v157
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v154.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v158 = val2.ffstate
          _x = _v158
          start = end
          end += 12
          (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v158.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = _v158
          start = end
          end += 12
          (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v158.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = _v158
          start = end
          end += 12
          (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v158.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = val2
          start = end
          end += 22
          (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
          val2.is_static = bool(val2.is_static)
          _v159 = val2.shape
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v159.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v159.points.append(val4)
          _v160 = val2.dimension
          _x = _v160
          start = end
          end += 24
          (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 72
          _v160.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _x = val2
          start = end
          end += 2
          (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
          val1.rear_vehicles.append(val2)
        self.lanes.append(val1)
      start = end
      end += 4
      (self.ego_lane_index,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.exit_lane_index = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2fBf = None
def _get_struct_2fBf():
    global _struct_2fBf
    if _struct_2fBf is None:
        _struct_2fBf = struct.Struct("<2fBf")
    return _struct_2fBf
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_5f2B = None
def _get_struct_5f2B():
    global _struct_5f2B
    if _struct_5f2B is None:
        _struct_5f2B = struct.Struct("<5f2B")
    return _struct_5f2B
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_Qf = None
def _get_struct_Qf():
    global _struct_Qf
    if _struct_Qf is None:
        _struct_Qf = struct.Struct("<Qf")
    return _struct_Qf
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_h3f2B = None
def _get_struct_h3f2B():
    global _struct_h3f2B
    if _struct_h3f2B is None:
        _struct_h3f2B = struct.Struct("<h3f2B")
    return _struct_h3f2B
