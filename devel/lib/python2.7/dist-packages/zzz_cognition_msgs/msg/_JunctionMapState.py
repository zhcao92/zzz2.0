# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_cognition_msgs/JunctionMapState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import zzz_cognition_msgs.msg
import zzz_driver_msgs.msg
import zzz_navigation_msgs.msg
import zzz_perception_msgs.msg

class JunctionMapState(genpy.Message):
  _md5sum = "ba2d16e33b435f07f3b1aab80a4c95c9"
  _type = "zzz_cognition_msgs/JunctionMapState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message describe a free-space driving model

# -------- Reference Path info ----------
LaneState reference_path

# -------- Other constaints ----------
geometry_msgs/Polygon drivable_area
RoadObstacle[] obstacles

float32 distance_to_lanes
================================================================================
MSG: zzz_cognition_msgs/LaneState
# This message represent a state of lane in dynamic map

# Static properties of the lane
zzz_navigation_msgs/Lane map_lane

# distance to lane end
float32 ego_dis_to_lane_tail # = Inf
float32 ego_dis_to_lane_head # = Inf

# the front vehicles on this lane, sorted by their distances in ascending order
# TODO: Change name to front_objects
RoadObstacle[] front_vehicles

# the rear vehicles on this lane, sorted by their distances in ascending order
# TODO: Change name to rear_objects
RoadObstacle[] rear_vehicles

================================================================================
MSG: zzz_navigation_msgs/Lane
# This message describe a lane with polyline representation

# ----- Basic properties -----
# the rightest lane is 0, reference lane is -1
# TODO: remove this field
int16 index

# Speed limit (km/h)
float32 speed_limit

# Length of the lane. Provided for easy computation
float32 length
float32 width

# Whether this lane allow two way traffic
# This can be true when the road is too narrow or in the center turning lane
bool bidirectional # = False

# The situation when lane ends. This field could be updated with dynamic info.
uint8 stop_state # = 0
uint8 STOP_STATE_UNKNOWN = 0
uint8 STOP_STATE_THRU = 1 # e.g. drive through at lane connection, green light
uint8 STOP_STATE_YIELD = 2 # e.g. unprotected left/right turn, flashing yellow light
uint8 STOP_STATE_STOP = 3 # e.g. red light, yellow light
uint8 STOP_STATE_STOP_YIELD = 4 # e.g. stop sign, right turn at red light
uint8 STOP_STATE_STOP_YIELD_ALL_WAY = 5 # e.g. flashing red light, all way stop sign

# ----- Central path representation -----
# The central_path_points field is used when central_path_type is waypoint.
# Otherwise, central_path_coeffs should be used
LanePoint[] central_path_points
float32[] central_path_coeffs

uint8 central_path_type # = 0
uint8 CENTRAL_PATH_WAYPOINT = 0 # discretized
uint8 CENTRAL_PATH_LINE = 1
uint8 CENTRAL_PATH_CONIC = 2 # conic section, including parabola and hyperbola
uint8 CENTRAL_PATH_POLYNOMIAL = 3 #
uint8 CENTRAL_PATH_BEZIER = 4

# ----- Boundary representation -----
# The boundary description of current lane.
# Not that the boundary type only describe the behaviour from current lane to neighbour lane or road shoulder
LaneBoundary[] left_boundaries
LaneBoundary[] right_boundaries

# ----- Auxiliary information of the lane -----
# Road situations on this line. This field could be updated with dynamic info.
LaneSituation[] situations

# ---- traffic ligth position ------ 
float32[] traffic_light_pos
================================================================================
MSG: zzz_navigation_msgs/LanePoint
# This message describe a road point from polyline represented lane

# The 3D position of the lane point
geometry_msgs/Point position

# ----- Other useful information -----
# Distance from lane start to current point. The distance of the first point should be zero
float32 s

# Slope at current position of the road
# Can be used to control the throttle
float32 slope

# Road curvature at current position of the road
# Can be used to slow down before turning
float32 curvature

# The yaw angle of tangent line (in radian)
float32 tangent

# Road width at current position
# Can be used to determine the carefulness of driving
float32 width

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: zzz_navigation_msgs/LaneBoundary
# This message describe the boundary type of a part of a lane

# Lane boundary point
LanePoint boundary_point

# Boundary type from between `s` and `s` of the next section start
uint8 boundary_type
uint8 BOUNDARY_UNKNOWN = 0
uint8 BOUNDARY_DASHED_WHITE = 1  # neighbour lane has same direction.
uint8 BOUNDARY_DASHED_YELLOW = 2 # neighbour lane has different direction.
uint8 BOUNDARY_SOLID_WHITE = 3   # neighbour lane has same direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW = 4  # neighbour lane has different direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW_TURN = 5  # neighbour lane has different direction, not allowed to change lane unless turning.
uint8 BOUNDARY_CURB = 6          # neighbour is road shoulder

# Confidence of the lane boundary classification
float32 confidence

================================================================================
MSG: zzz_navigation_msgs/LaneSituation
# This message store any uncommon situations on a road
# Situation can be a map specified object or fresh events

# The location of the situation in a lane (distance from lane start)
float32 s

# How long this situation affect along the lane.
# Inf means take effect until lane ends
float32 length

# Type of situation
uint8 situation_type
uint8 SITUATION_NOT_SPECIFIED = 0
uint8 SITUATION_BLOCKED = 1 # Something blocked this lane, vehicle should stop here
uint8 SITUATION_CROSSWALK = 2 # Crosswalk
uint8 SITUATION_REDUCE_SPEED = 3 # Reducing speed is required. This can be due to speed bump, construction, or school bus stop, etc

# ------- Situation information -------
# The new speed limit. Zero means the vehicle is required to stop
float32 reduced_max_speed

# Additional information
string comments

================================================================================
MSG: zzz_cognition_msgs/RoadObstacle
# This message contains all the information that planning needs for a road object


# Unique indentity of the obstacle
uint64 uid

# The confidence of existence, can be used to determine whether this object is valid, or invalid
# A possible way of get the confidence is by using tracking age
float32 confidence

# The best guess of obstacle type
zzz_perception_msgs/ObjectClass cls

# Estimated kinematic properties
zzz_driver_msgs/RigidBodyState state
# Kinematic properties in Frenet Frame
zzz_driver_msgs/FrenetSerretState2D ffstate

# Relationship to lane, for prediction or locating
float32 lane_index # in which lane
float32 lane_anglediff # angle difference
float32 lane_dist_left_t # distance to lane
float32 lane_dist_right_t
float32 lane_dist_s # s position in the road

# A flag to mark whether the object is static
bool is_static

# XXX: Do we need history trajectories?

# ----- Physical Boundary (Optional) -----
uint8 shape_type
uint8 SHAPE_UNDEFINED = 0
uint8 SHAPE_POLYGON = 1

# Representation of the object if it's represented by polygon
geometry_msgs/Polygon shape

# bbox, refer to BoundingBox in zzz_perception_msgs

zzz_perception_msgs/DimensionWithCovariance dimension
#uint8 dimension

# Null uncertainty of Inf uncertainty means that the shape is not actually generated
float32[] shape_uncertainty

# ----- High level behavior estimation -----

uint8 behavior
uint8 BEHAVIOR_UNKNOWN = 0
uint8 BEHAVIOR_STOPPING = 1 # vehicle is going to stop completely or stay stopped
uint8 BEHAVIOR_FOLLOW = 2 # follow lane or straight line
uint8 BEHAVIOR_MOVING_LEFT = 3 # changing to its left lane or branch left
uint8 BEHAVIOR_MOVING_RIGHT = 4 # changing to its right lane or branch right

# This field is preserved to adapt to yield situation.
# Yield situation includes left turn, right turn, sequencial stop sign, emergency vehicle, etc.
# Yield means if your path conflict with the object's, you should wait for the object
# to go through the conflict point.
uint8 priority
uint8 PRIORITY_UNKNOWN = 0
uint8 PRIORITY_NORMAL = 1
uint8 PRIORITY_CAUTIOUS = 2 # You can move when this obstacle is far away
uint8 PRIORITY_STOP = 3 # Should let this vehicle to go and then you can move

================================================================================
MSG: zzz_perception_msgs/ObjectClass
# The size of (in meters) the bounding box surrounding the object's center pose.

# The unique numeric classification ID of object detected
uint32 classid

# The probability or confidence value of the detected object. By convention, this value should lie in the range 0~1.
float32 score

# Other information about the class (e.g. class name). Only for debug
string comments

##############################################################
###   Here is a hierarchical table of all included types   ###
##############################################################
# Hierarchy is encoded in a 32-bit integer. Each 8 bit stand for a level, and leftmost 8 bit is the top level

uint32 UNKNOWN                          = 0     # 0x0000
uint32 UNKNOWN_DYNAMIC                  = 16    # 0x0010
uint32 UNKNOWN_STATIC                   = 32    # 0x0020

uint32 VEHICLE                          = 1     # 0x0001
uint32 VEHICLE_PASSENGER                = 17    # 0x0011, normal passenger_vehicles
uint32 VEHICEL_VAN                      = 33    # 0x0021
uint32 VEHICLE_TRUCK                    = 49    # 0x0031
uint32 VEHICLE_BUS                      = 65    # 0x0041
uint32 VEHICLE_SCHOOLBUS                = 321   # 0x0141
uint32 VEHICLE_SCHOOLBUS_STOP           = 4417  # 0x1141
uint32 VEHICLE_EMERGENCY                = 81    # 0x0051, emergency vehicles, including 
uint32 VEHICLE_EMERGENCY_POLICE         = 337   # 0x0151
uint32 VEHICLE_EMERGENCY_POLICE_FLASH   = 4433  # 0x1151
uint32 VEHICLE_EMERGENCY_FIRE           = 593   # 0x0251
uint32 VEHICLE_EMERGENCY_FIRE_FLASH     = 4689  # 0x1251
uint32 VEHICLE_EMERGENCY_CIVIL          = 849   # 0x0351, including utility vehicle and tow trucks
uint32 VEHICLE_EMERGENCY_CIVIL_FLASH    = 4945  # 0x1351

uint32 HUMAN                            = 2     # 0x0002
uint32 HUMAN_PEDESTRIAN                 = 18    # 0x0012
uint32 HUMAN_ROADWORKER                 = 34    # 0x0022

uint32 CYCLIST                          = 3     # 0x0003
uint32 CYCLIST_BICYCLE                  = 19    # 0x0013
uint32 CYCLIST_MOTORCYCLE               = 35    # 0x0023
uint32 CYCLIST_TRICYCLE                 = 51    # 0x0033

uint32 ANIMAL                           = 4     # 0x0004
uint32 ANIMAL_DOGLIKE                   = 20    # 0x0014, includes dog, cat, wolf, etc.
uint32 ANIMAL_DEERLIKE                  = 36    # 0x0024, includes deer, etc.
uint32 ANIMAL_COWLIKE                   = 52    # 0x0034, includes cow, horse, pig, etc.

uint32 ROAD_OBJECT                      = 5     # 0x0005, objects in road area
uint32 ROAD_TRAFFIC_CONE                = 21    # 0x0015, traffic cone
uint32 ROAD_TRAFFIC_BLOCKER             = 37    # 0x0025, traffic blocker, e.g. "Road Closed" sign

uint32 ROADSIDE_OBJECT                  = 6     # 0x0006, objects in road side
uint32 ROADSIDE_TRAFFIC_LIGHT           = 22    # 0x0016
uint32 ROADSIDE_TRAFFIC_SIGN            = 38    # 0x0026
uint32 ROADSIDE_TREE                    = 54    # 0x0036, including all roadside vegetation

uint32 LEVEL_MASK_0                     = 15    # 0x000f
uint32 LEVEL_MASK_1                     = 255   # 0x00ff
uint32 LEVEL_MASK_2                     = 4095  # 0x0fff
uint32 LEVEL_MASK_3                     = 65535 # 0xffff

================================================================================
MSG: zzz_driver_msgs/RigidBodyState
# This message contains commonly used state variables of rigid body

# ID of frame fixed to the rigid body
string child_frame_id

# Location and orientatation of the object
geometry_msgs/PoseWithCovariance  pose

# Linear and angular velocity of the object
geometry_msgs/TwistWithCovariance twist

# Linear and angular acceleration of the object
geometry_msgs/AccelWithCovariance accel

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: zzz_driver_msgs/FrenetSerretState2D
# This message describes a state in 2d Frenet-Serret Frame
# By 2d Frenet-Serret Frame we ignore the movement in z (in Cartesian) / b (in Frenet) direction
# For more information, refer to https://en.wikipedia.org/wiki/Frenet-Serret_formulas

# 2D states
float32 s # Offset in tanget direction
float32 d # Offset in normal direction
          # we omit the offset in binormal direction
float32 psi # Heading angle in s-d plane
float32[9] pose_covariance

# First order derivatives
float32 vs
float32 vd
float32 omega
float32[9] twist_covariance

# Second order derivatives
float32 sa # prevent keyword conflict
float32 ad
float32 epsilon
float32[9] accel_covariance

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: zzz_perception_msgs/DimensionWithCovariance
# Describing the size object in 3D space (in meters) with uncertainty

float64 length_x # length(longitudinal direction)
float64 length_y # width(lateral direction)
float64 length_z # height

# Row-major representation of the 3x3 covariance matrix
# In order, the parameters are: (length_x, length_y, length_z)
float64[9] covariance
"""
  __slots__ = ['reference_path','drivable_area','obstacles','distance_to_lanes']
  _slot_types = ['zzz_cognition_msgs/LaneState','geometry_msgs/Polygon','zzz_cognition_msgs/RoadObstacle[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reference_path,drivable_area,obstacles,distance_to_lanes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JunctionMapState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reference_path is None:
        self.reference_path = zzz_cognition_msgs.msg.LaneState()
      if self.drivable_area is None:
        self.drivable_area = geometry_msgs.msg.Polygon()
      if self.obstacles is None:
        self.obstacles = []
      if self.distance_to_lanes is None:
        self.distance_to_lanes = 0.
    else:
      self.reference_path = zzz_cognition_msgs.msg.LaneState()
      self.drivable_area = geometry_msgs.msg.Polygon()
      self.obstacles = []
      self.distance_to_lanes = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h3f2B().pack(_x.reference_path.map_lane.index, _x.reference_path.map_lane.speed_limit, _x.reference_path.map_lane.length, _x.reference_path.map_lane.width, _x.reference_path.map_lane.bidirectional, _x.reference_path.map_lane.stop_state))
      length = len(self.reference_path.map_lane.central_path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.map_lane.central_path_points:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
      length = len(self.reference_path.map_lane.central_path_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.reference_path.map_lane.central_path_coeffs))
      _x = self.reference_path.map_lane.central_path_type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.reference_path.map_lane.left_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.map_lane.left_boundaries:
        _v2 = val1.boundary_point
        _v3 = _v2.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.reference_path.map_lane.right_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.map_lane.right_boundaries:
        _v4 = val1.boundary_point
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v4
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.reference_path.map_lane.situations)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.map_lane.situations:
        _x = val1
        buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.reference_path.map_lane.traffic_light_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.reference_path.map_lane.traffic_light_pos))
      _x = self
      buff.write(_get_struct_2f().pack(_x.reference_path.ego_dis_to_lane_tail, _x.reference_path.ego_dis_to_lane_head))
      length = len(self.reference_path.front_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.front_vehicles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v6 = val1.cls
        _x = _v6
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v6.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.state
        _x = _v7.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v8 = _v7.pose
        _v9 = _v8.pose
        _v10 = _v9.position
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.orientation
        _x = _v11
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v8.covariance))
        _v12 = _v7.twist
        _v13 = _v12.twist
        _v14 = _v13.linear
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.angular
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v12.covariance))
        _v16 = _v7.accel
        _v17 = _v16.accel
        _v18 = _v17.linear
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = _v17.angular
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v16.covariance))
        _v20 = val1.ffstate
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_get_struct_9f().pack(*_v20.pose_covariance))
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_get_struct_9f().pack(*_v20.twist_covariance))
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_get_struct_9f().pack(*_v20.accel_covariance))
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v21 = val1.shape
        length = len(_v21.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v21.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v22 = val1.dimension
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_get_struct_9d().pack(*_v22.covariance))
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.shape_uncertainty))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      length = len(self.reference_path.rear_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.rear_vehicles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v23 = val1.cls
        _x = _v23
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v23.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v24 = val1.state
        _x = _v24.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v25 = _v24.pose
        _v26 = _v25.pose
        _v27 = _v26.position
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v28 = _v26.orientation
        _x = _v28
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v25.covariance))
        _v29 = _v24.twist
        _v30 = _v29.twist
        _v31 = _v30.linear
        _x = _v31
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v32 = _v30.angular
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v29.covariance))
        _v33 = _v24.accel
        _v34 = _v33.accel
        _v35 = _v34.linear
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.angular
        _x = _v36
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v33.covariance))
        _v37 = val1.ffstate
        _x = _v37
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_get_struct_9f().pack(*_v37.pose_covariance))
        _x = _v37
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_get_struct_9f().pack(*_v37.twist_covariance))
        _x = _v37
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_get_struct_9f().pack(*_v37.accel_covariance))
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v38 = val1.shape
        length = len(_v38.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v39 = val1.dimension
        _x = _v39
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_get_struct_9d().pack(*_v39.covariance))
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.shape_uncertainty))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      length = len(self.drivable_area.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.drivable_area.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v40 = val1.cls
        _x = _v40
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v40.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v41 = val1.state
        _x = _v41.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v42 = _v41.pose
        _v43 = _v42.pose
        _v44 = _v43.position
        _x = _v44
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v45 = _v43.orientation
        _x = _v45
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v42.covariance))
        _v46 = _v41.twist
        _v47 = _v46.twist
        _v48 = _v47.linear
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v49 = _v47.angular
        _x = _v49
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v46.covariance))
        _v50 = _v41.accel
        _v51 = _v50.accel
        _v52 = _v51.linear
        _x = _v52
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v53 = _v51.angular
        _x = _v53
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v50.covariance))
        _v54 = val1.ffstate
        _x = _v54
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_get_struct_9f().pack(*_v54.pose_covariance))
        _x = _v54
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_get_struct_9f().pack(*_v54.twist_covariance))
        _x = _v54
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_get_struct_9f().pack(*_v54.accel_covariance))
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v55 = val1.shape
        length = len(_v55.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v55.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v56 = val1.dimension
        _x = _v56
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_get_struct_9d().pack(*_v56.covariance))
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.shape_uncertainty))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      _x = self.distance_to_lanes
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.reference_path is None:
        self.reference_path = zzz_cognition_msgs.msg.LaneState()
      if self.drivable_area is None:
        self.drivable_area = geometry_msgs.msg.Polygon()
      if self.obstacles is None:
        self.obstacles = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.reference_path.map_lane.index, _x.reference_path.map_lane.speed_limit, _x.reference_path.map_lane.length, _x.reference_path.map_lane.width, _x.reference_path.map_lane.bidirectional, _x.reference_path.map_lane.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
      self.reference_path.map_lane.bidirectional = bool(self.reference_path.map_lane.bidirectional)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.map_lane.central_path_points = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LanePoint()
        _v57 = val1.position
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        self.reference_path.map_lane.central_path_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reference_path.map_lane.central_path_coeffs = s.unpack(str[start:end])
      start = end
      end += 1
      (self.reference_path.map_lane.central_path_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.map_lane.left_boundaries = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneBoundary()
        _v58 = val1.boundary_point
        _v59 = _v58.position
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v58
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.reference_path.map_lane.left_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.map_lane.right_boundaries = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneBoundary()
        _v60 = val1.boundary_point
        _v61 = _v60.position
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v60
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.reference_path.map_lane.right_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.map_lane.situations = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneSituation()
        _x = val1
        start = end
        end += 13
        (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comments = str[start:end]
        self.reference_path.map_lane.situations.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reference_path.map_lane.traffic_light_pos = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.reference_path.ego_dis_to_lane_tail, _x.reference_path.ego_dis_to_lane_head,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.front_vehicles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v62 = val1.cls
        _x = _v62
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v62.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v62.comments = str[start:end]
        _v63 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v63.child_frame_id = str[start:end]
        _v64 = _v63.pose
        _v65 = _v64.pose
        _v66 = _v65.position
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v67 = _v65.orientation
        _x = _v67
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v64.covariance = _get_struct_36d().unpack(str[start:end])
        _v68 = _v63.twist
        _v69 = _v68.twist
        _v70 = _v69.linear
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v71 = _v69.angular
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v68.covariance = _get_struct_36d().unpack(str[start:end])
        _v72 = _v63.accel
        _v73 = _v72.accel
        _v74 = _v73.linear
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v75 = _v73.angular
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v72.covariance = _get_struct_36d().unpack(str[start:end])
        _v76 = val1.ffstate
        _x = _v76
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v76.pose_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v76
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v76.twist_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v76
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v76.accel_covariance = _get_struct_9f().unpack(str[start:end])
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v77 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v77.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v77.points.append(val3)
        _v78 = val1.dimension
        _x = _v78
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v78.covariance = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.reference_path.front_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.rear_vehicles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v79 = val1.cls
        _x = _v79
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v79.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v79.comments = str[start:end]
        _v80 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v80.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v80.child_frame_id = str[start:end]
        _v81 = _v80.pose
        _v82 = _v81.pose
        _v83 = _v82.position
        _x = _v83
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v84 = _v82.orientation
        _x = _v84
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v81.covariance = _get_struct_36d().unpack(str[start:end])
        _v85 = _v80.twist
        _v86 = _v85.twist
        _v87 = _v86.linear
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v88 = _v86.angular
        _x = _v88
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v85.covariance = _get_struct_36d().unpack(str[start:end])
        _v89 = _v80.accel
        _v90 = _v89.accel
        _v91 = _v90.linear
        _x = _v91
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v92 = _v90.angular
        _x = _v92
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v89.covariance = _get_struct_36d().unpack(str[start:end])
        _v93 = val1.ffstate
        _x = _v93
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v93.pose_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v93
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v93.twist_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v93
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v93.accel_covariance = _get_struct_9f().unpack(str[start:end])
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v94 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v94.points.append(val3)
        _v95 = val1.dimension
        _x = _v95
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v95.covariance = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.reference_path.rear_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drivable_area.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.drivable_area.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v96 = val1.cls
        _x = _v96
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v96.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v96.comments = str[start:end]
        _v97 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v97.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v97.child_frame_id = str[start:end]
        _v98 = _v97.pose
        _v99 = _v98.pose
        _v100 = _v99.position
        _x = _v100
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v101 = _v99.orientation
        _x = _v101
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v98.covariance = _get_struct_36d().unpack(str[start:end])
        _v102 = _v97.twist
        _v103 = _v102.twist
        _v104 = _v103.linear
        _x = _v104
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v105 = _v103.angular
        _x = _v105
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v102.covariance = _get_struct_36d().unpack(str[start:end])
        _v106 = _v97.accel
        _v107 = _v106.accel
        _v108 = _v107.linear
        _x = _v108
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v109 = _v107.angular
        _x = _v109
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v106.covariance = _get_struct_36d().unpack(str[start:end])
        _v110 = val1.ffstate
        _x = _v110
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v110.pose_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v110
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v110.twist_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v110
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v110.accel_covariance = _get_struct_9f().unpack(str[start:end])
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v111 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v111.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v111.points.append(val3)
        _v112 = val1.dimension
        _x = _v112
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v112.covariance = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.obstacles.append(val1)
      start = end
      end += 4
      (self.distance_to_lanes,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h3f2B().pack(_x.reference_path.map_lane.index, _x.reference_path.map_lane.speed_limit, _x.reference_path.map_lane.length, _x.reference_path.map_lane.width, _x.reference_path.map_lane.bidirectional, _x.reference_path.map_lane.stop_state))
      length = len(self.reference_path.map_lane.central_path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.map_lane.central_path_points:
        _v113 = val1.position
        _x = _v113
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
      length = len(self.reference_path.map_lane.central_path_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.reference_path.map_lane.central_path_coeffs.tostring())
      _x = self.reference_path.map_lane.central_path_type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.reference_path.map_lane.left_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.map_lane.left_boundaries:
        _v114 = val1.boundary_point
        _v115 = _v114.position
        _x = _v115
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v114
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.reference_path.map_lane.right_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.map_lane.right_boundaries:
        _v116 = val1.boundary_point
        _v117 = _v116.position
        _x = _v117
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v116
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.reference_path.map_lane.situations)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.map_lane.situations:
        _x = val1
        buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.reference_path.map_lane.traffic_light_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.reference_path.map_lane.traffic_light_pos.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.reference_path.ego_dis_to_lane_tail, _x.reference_path.ego_dis_to_lane_head))
      length = len(self.reference_path.front_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.front_vehicles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v118 = val1.cls
        _x = _v118
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v118.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v119 = val1.state
        _x = _v119.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v120 = _v119.pose
        _v121 = _v120.pose
        _v122 = _v121.position
        _x = _v122
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v123 = _v121.orientation
        _x = _v123
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v120.covariance.tostring())
        _v124 = _v119.twist
        _v125 = _v124.twist
        _v126 = _v125.linear
        _x = _v126
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v127 = _v125.angular
        _x = _v127
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v124.covariance.tostring())
        _v128 = _v119.accel
        _v129 = _v128.accel
        _v130 = _v129.linear
        _x = _v130
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v131 = _v129.angular
        _x = _v131
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v128.covariance.tostring())
        _v132 = val1.ffstate
        _x = _v132
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_v132.pose_covariance.tostring())
        _x = _v132
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_v132.twist_covariance.tostring())
        _x = _v132
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_v132.accel_covariance.tostring())
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v133 = val1.shape
        length = len(_v133.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v133.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v134 = val1.dimension
        _x = _v134
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_v134.covariance.tostring())
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.shape_uncertainty.tostring())
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      length = len(self.reference_path.rear_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_path.rear_vehicles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v135 = val1.cls
        _x = _v135
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v135.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v136 = val1.state
        _x = _v136.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v137 = _v136.pose
        _v138 = _v137.pose
        _v139 = _v138.position
        _x = _v139
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v140 = _v138.orientation
        _x = _v140
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v137.covariance.tostring())
        _v141 = _v136.twist
        _v142 = _v141.twist
        _v143 = _v142.linear
        _x = _v143
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v144 = _v142.angular
        _x = _v144
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v141.covariance.tostring())
        _v145 = _v136.accel
        _v146 = _v145.accel
        _v147 = _v146.linear
        _x = _v147
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v148 = _v146.angular
        _x = _v148
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v145.covariance.tostring())
        _v149 = val1.ffstate
        _x = _v149
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_v149.pose_covariance.tostring())
        _x = _v149
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_v149.twist_covariance.tostring())
        _x = _v149
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_v149.accel_covariance.tostring())
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v150 = val1.shape
        length = len(_v150.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v151 = val1.dimension
        _x = _v151
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_v151.covariance.tostring())
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.shape_uncertainty.tostring())
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      length = len(self.drivable_area.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.drivable_area.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v152 = val1.cls
        _x = _v152
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v152.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v153 = val1.state
        _x = _v153.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v154 = _v153.pose
        _v155 = _v154.pose
        _v156 = _v155.position
        _x = _v156
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v157 = _v155.orientation
        _x = _v157
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v154.covariance.tostring())
        _v158 = _v153.twist
        _v159 = _v158.twist
        _v160 = _v159.linear
        _x = _v160
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v161 = _v159.angular
        _x = _v161
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v158.covariance.tostring())
        _v162 = _v153.accel
        _v163 = _v162.accel
        _v164 = _v163.linear
        _x = _v164
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v165 = _v163.angular
        _x = _v165
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v162.covariance.tostring())
        _v166 = val1.ffstate
        _x = _v166
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_v166.pose_covariance.tostring())
        _x = _v166
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_v166.twist_covariance.tostring())
        _x = _v166
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_v166.accel_covariance.tostring())
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v167 = val1.shape
        length = len(_v167.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v167.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v168 = val1.dimension
        _x = _v168
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_v168.covariance.tostring())
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.shape_uncertainty.tostring())
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      _x = self.distance_to_lanes
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.reference_path is None:
        self.reference_path = zzz_cognition_msgs.msg.LaneState()
      if self.drivable_area is None:
        self.drivable_area = geometry_msgs.msg.Polygon()
      if self.obstacles is None:
        self.obstacles = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.reference_path.map_lane.index, _x.reference_path.map_lane.speed_limit, _x.reference_path.map_lane.length, _x.reference_path.map_lane.width, _x.reference_path.map_lane.bidirectional, _x.reference_path.map_lane.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
      self.reference_path.map_lane.bidirectional = bool(self.reference_path.map_lane.bidirectional)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.map_lane.central_path_points = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LanePoint()
        _v169 = val1.position
        _x = _v169
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        self.reference_path.map_lane.central_path_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reference_path.map_lane.central_path_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.reference_path.map_lane.central_path_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.map_lane.left_boundaries = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneBoundary()
        _v170 = val1.boundary_point
        _v171 = _v170.position
        _x = _v171
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v170
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.reference_path.map_lane.left_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.map_lane.right_boundaries = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneBoundary()
        _v172 = val1.boundary_point
        _v173 = _v172.position
        _x = _v173
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v172
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.reference_path.map_lane.right_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.map_lane.situations = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneSituation()
        _x = val1
        start = end
        end += 13
        (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comments = str[start:end]
        self.reference_path.map_lane.situations.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reference_path.map_lane.traffic_light_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.reference_path.ego_dis_to_lane_tail, _x.reference_path.ego_dis_to_lane_head,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.front_vehicles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v174 = val1.cls
        _x = _v174
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v174.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v174.comments = str[start:end]
        _v175 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v175.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v175.child_frame_id = str[start:end]
        _v176 = _v175.pose
        _v177 = _v176.pose
        _v178 = _v177.position
        _x = _v178
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v179 = _v177.orientation
        _x = _v179
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v176.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v180 = _v175.twist
        _v181 = _v180.twist
        _v182 = _v181.linear
        _x = _v182
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v183 = _v181.angular
        _x = _v183
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v180.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v184 = _v175.accel
        _v185 = _v184.accel
        _v186 = _v185.linear
        _x = _v186
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v187 = _v185.angular
        _x = _v187
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v184.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v188 = val1.ffstate
        _x = _v188
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v188.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v188
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v188.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v188
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v188.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v189 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v189.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v189.points.append(val3)
        _v190 = val1.dimension
        _x = _v190
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v190.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.reference_path.front_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_path.rear_vehicles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v191 = val1.cls
        _x = _v191
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v191.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v191.comments = str[start:end]
        _v192 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v192.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v192.child_frame_id = str[start:end]
        _v193 = _v192.pose
        _v194 = _v193.pose
        _v195 = _v194.position
        _x = _v195
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v196 = _v194.orientation
        _x = _v196
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v193.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v197 = _v192.twist
        _v198 = _v197.twist
        _v199 = _v198.linear
        _x = _v199
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v200 = _v198.angular
        _x = _v200
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v197.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v201 = _v192.accel
        _v202 = _v201.accel
        _v203 = _v202.linear
        _x = _v203
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v204 = _v202.angular
        _x = _v204
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v201.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v205 = val1.ffstate
        _x = _v205
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v205.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v205
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v205.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v205
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v205.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v206 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v206.points.append(val3)
        _v207 = val1.dimension
        _x = _v207
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v207.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.reference_path.rear_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drivable_area.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.drivable_area.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v208 = val1.cls
        _x = _v208
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v208.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v208.comments = str[start:end]
        _v209 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v209.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v209.child_frame_id = str[start:end]
        _v210 = _v209.pose
        _v211 = _v210.pose
        _v212 = _v211.position
        _x = _v212
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v213 = _v211.orientation
        _x = _v213
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v210.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v214 = _v209.twist
        _v215 = _v214.twist
        _v216 = _v215.linear
        _x = _v216
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v217 = _v215.angular
        _x = _v217
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v214.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v218 = _v209.accel
        _v219 = _v218.accel
        _v220 = _v219.linear
        _x = _v220
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v221 = _v219.angular
        _x = _v221
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v218.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v222 = val1.ffstate
        _x = _v222
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v222.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v222
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v222.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v222
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v222.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v223 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v223.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v223.points.append(val3)
        _v224 = val1.dimension
        _x = _v224
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v224.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.obstacles.append(val1)
      start = end
      end += 4
      (self.distance_to_lanes,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2fBf = None
def _get_struct_2fBf():
    global _struct_2fBf
    if _struct_2fBf is None:
        _struct_2fBf = struct.Struct("<2fBf")
    return _struct_2fBf
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_5f2B = None
def _get_struct_5f2B():
    global _struct_5f2B
    if _struct_5f2B is None:
        _struct_5f2B = struct.Struct("<5f2B")
    return _struct_5f2B
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_Qf = None
def _get_struct_Qf():
    global _struct_Qf
    if _struct_Qf is None:
        _struct_Qf = struct.Struct("<Qf")
    return _struct_Qf
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_h3f2B = None
def _get_struct_h3f2B():
    global _struct_h3f2B
    if _struct_h3f2B is None:
        _struct_h3f2B = struct.Struct("<h3f2B")
    return _struct_h3f2B
