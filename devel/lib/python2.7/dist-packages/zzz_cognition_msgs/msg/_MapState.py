# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_cognition_msgs/MapState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import zzz_cognition_msgs.msg
import zzz_driver_msgs.msg
import zzz_navigation_msgs.msg
import zzz_perception_msgs.msg

class MapState(genpy.Message):
  _md5sum = "b09539f96f45b795144626c4a7e1690a"
  _type = "zzz_cognition_msgs/MapState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message represents a decision_oriented specific representation of dynamic map

Header header

# Ego Vehicle Info
zzz_driver_msgs/RigidBodyState ego_state
zzz_driver_msgs/FrenetSerretState2D ego_ffstate

# ----- Map Model indicator -----

# This field gives a suggested map model
uint8 model

# Junction map is given all the time, while multi-lane map
# and other maps are given when the road is properly structured
uint8 MODEL_JUNCTION_MAP = 0
uint8 MODEL_MULTILANE_MAP = 1

# Map State Instances
JunctionMapState jmap
MultiLaneMapState mmap

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: zzz_driver_msgs/RigidBodyState
# This message contains commonly used state variables of rigid body

# ID of frame fixed to the rigid body
string child_frame_id

# Location and orientatation of the object
geometry_msgs/PoseWithCovariance  pose

# Linear and angular velocity of the object
geometry_msgs/TwistWithCovariance twist

# Linear and angular acceleration of the object
geometry_msgs/AccelWithCovariance accel

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: zzz_driver_msgs/FrenetSerretState2D
# This message describes a state in 2d Frenet-Serret Frame
# By 2d Frenet-Serret Frame we ignore the movement in z (in Cartesian) / b (in Frenet) direction
# For more information, refer to https://en.wikipedia.org/wiki/Frenet-Serret_formulas

# 2D states
float32 s # Offset in tanget direction
float32 d # Offset in normal direction
          # we omit the offset in binormal direction
float32 psi # Heading angle in s-d plane
float32[9] pose_covariance

# First order derivatives
float32 vs
float32 vd
float32 omega
float32[9] twist_covariance

# Second order derivatives
float32 sa # prevent keyword conflict
float32 ad
float32 epsilon
float32[9] accel_covariance

================================================================================
MSG: zzz_cognition_msgs/JunctionMapState
# This message describe a free-space driving model

# -------- Reference Path info ----------
LaneState reference_path

# -------- Other constaints ----------
geometry_msgs/Polygon drivable_area
RoadObstacle[] obstacles

float32 distance_to_lanes
================================================================================
MSG: zzz_cognition_msgs/LaneState
# This message represent a state of lane in dynamic map

# Static properties of the lane
zzz_navigation_msgs/Lane map_lane

# distance to lane end
float32 ego_dis_to_lane_tail # = Inf
float32 ego_dis_to_lane_head # = Inf

# the front vehicles on this lane, sorted by their distances in ascending order
# TODO: Change name to front_objects
RoadObstacle[] front_vehicles

# the rear vehicles on this lane, sorted by their distances in ascending order
# TODO: Change name to rear_objects
RoadObstacle[] rear_vehicles

================================================================================
MSG: zzz_navigation_msgs/Lane
# This message describe a lane with polyline representation

# ----- Basic properties -----
# the rightest lane is 0, reference lane is -1
# TODO: remove this field
int16 index

# Speed limit (km/h)
float32 speed_limit

# Length of the lane. Provided for easy computation
float32 length
float32 width

# Whether this lane allow two way traffic
# This can be true when the road is too narrow or in the center turning lane
bool bidirectional # = False

# The situation when lane ends. This field could be updated with dynamic info.
uint8 stop_state # = 0
uint8 STOP_STATE_UNKNOWN = 0
uint8 STOP_STATE_THRU = 1 # e.g. drive through at lane connection, green light
uint8 STOP_STATE_YIELD = 2 # e.g. unprotected left/right turn, flashing yellow light
uint8 STOP_STATE_STOP = 3 # e.g. red light, yellow light
uint8 STOP_STATE_STOP_YIELD = 4 # e.g. stop sign, right turn at red light
uint8 STOP_STATE_STOP_YIELD_ALL_WAY = 5 # e.g. flashing red light, all way stop sign

# ----- Central path representation -----
# The central_path_points field is used when central_path_type is waypoint.
# Otherwise, central_path_coeffs should be used
LanePoint[] central_path_points
float32[] central_path_coeffs

uint8 central_path_type # = 0
uint8 CENTRAL_PATH_WAYPOINT = 0 # discretized
uint8 CENTRAL_PATH_LINE = 1
uint8 CENTRAL_PATH_CONIC = 2 # conic section, including parabola and hyperbola
uint8 CENTRAL_PATH_POLYNOMIAL = 3 #
uint8 CENTRAL_PATH_BEZIER = 4

# ----- Boundary representation -----
# The boundary description of current lane.
# Not that the boundary type only describe the behaviour from current lane to neighbour lane or road shoulder
LaneBoundary[] left_boundaries
LaneBoundary[] right_boundaries

# ----- Auxiliary information of the lane -----
# Road situations on this line. This field could be updated with dynamic info.
LaneSituation[] situations

# ---- traffic ligth position ------ 
float32[] traffic_light_pos
================================================================================
MSG: zzz_navigation_msgs/LanePoint
# This message describe a road point from polyline represented lane

# The 3D position of the lane point
geometry_msgs/Point position

# ----- Other useful information -----
# Distance from lane start to current point. The distance of the first point should be zero
float32 s

# Slope at current position of the road
# Can be used to control the throttle
float32 slope

# Road curvature at current position of the road
# Can be used to slow down before turning
float32 curvature

# The yaw angle of tangent line (in radian)
float32 tangent

# Road width at current position
# Can be used to determine the carefulness of driving
float32 width

================================================================================
MSG: zzz_navigation_msgs/LaneBoundary
# This message describe the boundary type of a part of a lane

# Lane boundary point
LanePoint boundary_point

# Boundary type from between `s` and `s` of the next section start
uint8 boundary_type
uint8 BOUNDARY_UNKNOWN = 0
uint8 BOUNDARY_DASHED_WHITE = 1  # neighbour lane has same direction.
uint8 BOUNDARY_DASHED_YELLOW = 2 # neighbour lane has different direction.
uint8 BOUNDARY_SOLID_WHITE = 3   # neighbour lane has same direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW = 4  # neighbour lane has different direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW_TURN = 5  # neighbour lane has different direction, not allowed to change lane unless turning.
uint8 BOUNDARY_CURB = 6          # neighbour is road shoulder

# Confidence of the lane boundary classification
float32 confidence

================================================================================
MSG: zzz_navigation_msgs/LaneSituation
# This message store any uncommon situations on a road
# Situation can be a map specified object or fresh events

# The location of the situation in a lane (distance from lane start)
float32 s

# How long this situation affect along the lane.
# Inf means take effect until lane ends
float32 length

# Type of situation
uint8 situation_type
uint8 SITUATION_NOT_SPECIFIED = 0
uint8 SITUATION_BLOCKED = 1 # Something blocked this lane, vehicle should stop here
uint8 SITUATION_CROSSWALK = 2 # Crosswalk
uint8 SITUATION_REDUCE_SPEED = 3 # Reducing speed is required. This can be due to speed bump, construction, or school bus stop, etc

# ------- Situation information -------
# The new speed limit. Zero means the vehicle is required to stop
float32 reduced_max_speed

# Additional information
string comments

================================================================================
MSG: zzz_cognition_msgs/RoadObstacle
# This message contains all the information that planning needs for a road object


# Unique indentity of the obstacle
uint64 uid

# The confidence of existence, can be used to determine whether this object is valid, or invalid
# A possible way of get the confidence is by using tracking age
float32 confidence

# The best guess of obstacle type
zzz_perception_msgs/ObjectClass cls

# Estimated kinematic properties
zzz_driver_msgs/RigidBodyState state
# Kinematic properties in Frenet Frame
zzz_driver_msgs/FrenetSerretState2D ffstate

# Relationship to lane, for prediction or locating
float32 lane_index # in which lane
float32 lane_anglediff # angle difference
float32 lane_dist_left_t # distance to lane
float32 lane_dist_right_t
float32 lane_dist_s # s position in the road

# A flag to mark whether the object is static
bool is_static

# XXX: Do we need history trajectories?

# ----- Physical Boundary (Optional) -----
uint8 shape_type
uint8 SHAPE_UNDEFINED = 0
uint8 SHAPE_POLYGON = 1

# Representation of the object if it's represented by polygon
geometry_msgs/Polygon shape

# bbox, refer to BoundingBox in zzz_perception_msgs

zzz_perception_msgs/DimensionWithCovariance dimension
#uint8 dimension

# Null uncertainty of Inf uncertainty means that the shape is not actually generated
float32[] shape_uncertainty

# ----- High level behavior estimation -----

uint8 behavior
uint8 BEHAVIOR_UNKNOWN = 0
uint8 BEHAVIOR_STOPPING = 1 # vehicle is going to stop completely or stay stopped
uint8 BEHAVIOR_FOLLOW = 2 # follow lane or straight line
uint8 BEHAVIOR_MOVING_LEFT = 3 # changing to its left lane or branch left
uint8 BEHAVIOR_MOVING_RIGHT = 4 # changing to its right lane or branch right

# This field is preserved to adapt to yield situation.
# Yield situation includes left turn, right turn, sequencial stop sign, emergency vehicle, etc.
# Yield means if your path conflict with the object's, you should wait for the object
# to go through the conflict point.
uint8 priority
uint8 PRIORITY_UNKNOWN = 0
uint8 PRIORITY_NORMAL = 1
uint8 PRIORITY_CAUTIOUS = 2 # You can move when this obstacle is far away
uint8 PRIORITY_STOP = 3 # Should let this vehicle to go and then you can move

================================================================================
MSG: zzz_perception_msgs/ObjectClass
# The size of (in meters) the bounding box surrounding the object's center pose.

# The unique numeric classification ID of object detected
uint32 classid

# The probability or confidence value of the detected object. By convention, this value should lie in the range 0~1.
float32 score

# Other information about the class (e.g. class name). Only for debug
string comments

##############################################################
###   Here is a hierarchical table of all included types   ###
##############################################################
# Hierarchy is encoded in a 32-bit integer. Each 8 bit stand for a level, and leftmost 8 bit is the top level

uint32 UNKNOWN                          = 0     # 0x0000
uint32 UNKNOWN_DYNAMIC                  = 16    # 0x0010
uint32 UNKNOWN_STATIC                   = 32    # 0x0020

uint32 VEHICLE                          = 1     # 0x0001
uint32 VEHICLE_PASSENGER                = 17    # 0x0011, normal passenger_vehicles
uint32 VEHICEL_VAN                      = 33    # 0x0021
uint32 VEHICLE_TRUCK                    = 49    # 0x0031
uint32 VEHICLE_BUS                      = 65    # 0x0041
uint32 VEHICLE_SCHOOLBUS                = 321   # 0x0141
uint32 VEHICLE_SCHOOLBUS_STOP           = 4417  # 0x1141
uint32 VEHICLE_EMERGENCY                = 81    # 0x0051, emergency vehicles, including 
uint32 VEHICLE_EMERGENCY_POLICE         = 337   # 0x0151
uint32 VEHICLE_EMERGENCY_POLICE_FLASH   = 4433  # 0x1151
uint32 VEHICLE_EMERGENCY_FIRE           = 593   # 0x0251
uint32 VEHICLE_EMERGENCY_FIRE_FLASH     = 4689  # 0x1251
uint32 VEHICLE_EMERGENCY_CIVIL          = 849   # 0x0351, including utility vehicle and tow trucks
uint32 VEHICLE_EMERGENCY_CIVIL_FLASH    = 4945  # 0x1351

uint32 HUMAN                            = 2     # 0x0002
uint32 HUMAN_PEDESTRIAN                 = 18    # 0x0012
uint32 HUMAN_ROADWORKER                 = 34    # 0x0022

uint32 CYCLIST                          = 3     # 0x0003
uint32 CYCLIST_BICYCLE                  = 19    # 0x0013
uint32 CYCLIST_MOTORCYCLE               = 35    # 0x0023
uint32 CYCLIST_TRICYCLE                 = 51    # 0x0033

uint32 ANIMAL                           = 4     # 0x0004
uint32 ANIMAL_DOGLIKE                   = 20    # 0x0014, includes dog, cat, wolf, etc.
uint32 ANIMAL_DEERLIKE                  = 36    # 0x0024, includes deer, etc.
uint32 ANIMAL_COWLIKE                   = 52    # 0x0034, includes cow, horse, pig, etc.

uint32 ROAD_OBJECT                      = 5     # 0x0005, objects in road area
uint32 ROAD_TRAFFIC_CONE                = 21    # 0x0015, traffic cone
uint32 ROAD_TRAFFIC_BLOCKER             = 37    # 0x0025, traffic blocker, e.g. "Road Closed" sign

uint32 ROADSIDE_OBJECT                  = 6     # 0x0006, objects in road side
uint32 ROADSIDE_TRAFFIC_LIGHT           = 22    # 0x0016
uint32 ROADSIDE_TRAFFIC_SIGN            = 38    # 0x0026
uint32 ROADSIDE_TREE                    = 54    # 0x0036, including all roadside vegetation

uint32 LEVEL_MASK_0                     = 15    # 0x000f
uint32 LEVEL_MASK_1                     = 255   # 0x00ff
uint32 LEVEL_MASK_2                     = 4095  # 0x0fff
uint32 LEVEL_MASK_3                     = 65535 # 0xffff

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: zzz_perception_msgs/DimensionWithCovariance
# Describing the size object in 3D space (in meters) with uncertainty

float64 length_x # length(longitudinal direction)
float64 length_y # width(lateral direction)
float64 length_z # height

# Row-major representation of the 3x3 covariance matrix
# In order, the parameters are: (length_x, length_y, length_z)
float64[9] covariance

================================================================================
MSG: zzz_cognition_msgs/MultiLaneMapState
# This message describes a multi-lane dynamic map model


# distance before next junction
float32 distance_to_junction

# -------- Multi-lanes info --------
# all lane info, lanes must be ordered from right most lane
LaneState[] lanes

# the lane that ego vehicle drives on
float32 ego_lane_index

# exit lane index (0 refer to right-most lane in right-side driving situation)
int8[] exit_lane_index
"""
  # Pseudo-constants
  MODEL_JUNCTION_MAP = 0
  MODEL_MULTILANE_MAP = 1

  __slots__ = ['header','ego_state','ego_ffstate','model','jmap','mmap']
  _slot_types = ['std_msgs/Header','zzz_driver_msgs/RigidBodyState','zzz_driver_msgs/FrenetSerretState2D','uint8','zzz_cognition_msgs/JunctionMapState','zzz_cognition_msgs/MultiLaneMapState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ego_state,ego_ffstate,model,jmap,mmap

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ego_state is None:
        self.ego_state = zzz_driver_msgs.msg.RigidBodyState()
      if self.ego_ffstate is None:
        self.ego_ffstate = zzz_driver_msgs.msg.FrenetSerretState2D()
      if self.model is None:
        self.model = 0
      if self.jmap is None:
        self.jmap = zzz_cognition_msgs.msg.JunctionMapState()
      if self.mmap is None:
        self.mmap = zzz_cognition_msgs.msg.MultiLaneMapState()
    else:
      self.header = std_msgs.msg.Header()
      self.ego_state = zzz_driver_msgs.msg.RigidBodyState()
      self.ego_ffstate = zzz_driver_msgs.msg.FrenetSerretState2D()
      self.model = 0
      self.jmap = zzz_cognition_msgs.msg.JunctionMapState()
      self.mmap = zzz_cognition_msgs.msg.MultiLaneMapState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ego_state.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.ego_state.pose.pose.position.x, _x.ego_state.pose.pose.position.y, _x.ego_state.pose.pose.position.z, _x.ego_state.pose.pose.orientation.x, _x.ego_state.pose.pose.orientation.y, _x.ego_state.pose.pose.orientation.z, _x.ego_state.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.ego_state.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.ego_state.twist.twist.linear.x, _x.ego_state.twist.twist.linear.y, _x.ego_state.twist.twist.linear.z, _x.ego_state.twist.twist.angular.x, _x.ego_state.twist.twist.angular.y, _x.ego_state.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.ego_state.twist.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.ego_state.accel.accel.linear.x, _x.ego_state.accel.accel.linear.y, _x.ego_state.accel.accel.linear.z, _x.ego_state.accel.accel.angular.x, _x.ego_state.accel.accel.angular.y, _x.ego_state.accel.accel.angular.z))
      buff.write(_get_struct_36d().pack(*self.ego_state.accel.covariance))
      _x = self
      buff.write(_get_struct_3f().pack(_x.ego_ffstate.s, _x.ego_ffstate.d, _x.ego_ffstate.psi))
      buff.write(_get_struct_9f().pack(*self.ego_ffstate.pose_covariance))
      _x = self
      buff.write(_get_struct_3f().pack(_x.ego_ffstate.vs, _x.ego_ffstate.vd, _x.ego_ffstate.omega))
      buff.write(_get_struct_9f().pack(*self.ego_ffstate.twist_covariance))
      _x = self
      buff.write(_get_struct_3f().pack(_x.ego_ffstate.sa, _x.ego_ffstate.ad, _x.ego_ffstate.epsilon))
      buff.write(_get_struct_9f().pack(*self.ego_ffstate.accel_covariance))
      _x = self
      buff.write(_get_struct_Bh3f2B().pack(_x.model, _x.jmap.reference_path.map_lane.index, _x.jmap.reference_path.map_lane.speed_limit, _x.jmap.reference_path.map_lane.length, _x.jmap.reference_path.map_lane.width, _x.jmap.reference_path.map_lane.bidirectional, _x.jmap.reference_path.map_lane.stop_state))
      length = len(self.jmap.reference_path.map_lane.central_path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.map_lane.central_path_points:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
      length = len(self.jmap.reference_path.map_lane.central_path_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.jmap.reference_path.map_lane.central_path_coeffs))
      _x = self.jmap.reference_path.map_lane.central_path_type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.jmap.reference_path.map_lane.left_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.map_lane.left_boundaries:
        _v2 = val1.boundary_point
        _v3 = _v2.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.jmap.reference_path.map_lane.right_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.map_lane.right_boundaries:
        _v4 = val1.boundary_point
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v4
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.jmap.reference_path.map_lane.situations)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.map_lane.situations:
        _x = val1
        buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.jmap.reference_path.map_lane.traffic_light_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.jmap.reference_path.map_lane.traffic_light_pos))
      _x = self
      buff.write(_get_struct_2f().pack(_x.jmap.reference_path.ego_dis_to_lane_tail, _x.jmap.reference_path.ego_dis_to_lane_head))
      length = len(self.jmap.reference_path.front_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.front_vehicles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v6 = val1.cls
        _x = _v6
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v6.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.state
        _x = _v7.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v8 = _v7.pose
        _v9 = _v8.pose
        _v10 = _v9.position
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.orientation
        _x = _v11
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v8.covariance))
        _v12 = _v7.twist
        _v13 = _v12.twist
        _v14 = _v13.linear
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.angular
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v12.covariance))
        _v16 = _v7.accel
        _v17 = _v16.accel
        _v18 = _v17.linear
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = _v17.angular
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v16.covariance))
        _v20 = val1.ffstate
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_get_struct_9f().pack(*_v20.pose_covariance))
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_get_struct_9f().pack(*_v20.twist_covariance))
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_get_struct_9f().pack(*_v20.accel_covariance))
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v21 = val1.shape
        length = len(_v21.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v21.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v22 = val1.dimension
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_get_struct_9d().pack(*_v22.covariance))
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.shape_uncertainty))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      length = len(self.jmap.reference_path.rear_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.rear_vehicles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v23 = val1.cls
        _x = _v23
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v23.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v24 = val1.state
        _x = _v24.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v25 = _v24.pose
        _v26 = _v25.pose
        _v27 = _v26.position
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v28 = _v26.orientation
        _x = _v28
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v25.covariance))
        _v29 = _v24.twist
        _v30 = _v29.twist
        _v31 = _v30.linear
        _x = _v31
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v32 = _v30.angular
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v29.covariance))
        _v33 = _v24.accel
        _v34 = _v33.accel
        _v35 = _v34.linear
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.angular
        _x = _v36
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v33.covariance))
        _v37 = val1.ffstate
        _x = _v37
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_get_struct_9f().pack(*_v37.pose_covariance))
        _x = _v37
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_get_struct_9f().pack(*_v37.twist_covariance))
        _x = _v37
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_get_struct_9f().pack(*_v37.accel_covariance))
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v38 = val1.shape
        length = len(_v38.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v39 = val1.dimension
        _x = _v39
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_get_struct_9d().pack(*_v39.covariance))
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.shape_uncertainty))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      length = len(self.jmap.drivable_area.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.drivable_area.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.jmap.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.obstacles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v40 = val1.cls
        _x = _v40
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v40.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v41 = val1.state
        _x = _v41.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v42 = _v41.pose
        _v43 = _v42.pose
        _v44 = _v43.position
        _x = _v44
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v45 = _v43.orientation
        _x = _v45
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v42.covariance))
        _v46 = _v41.twist
        _v47 = _v46.twist
        _v48 = _v47.linear
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v49 = _v47.angular
        _x = _v49
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v46.covariance))
        _v50 = _v41.accel
        _v51 = _v50.accel
        _v52 = _v51.linear
        _x = _v52
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v53 = _v51.angular
        _x = _v53
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v50.covariance))
        _v54 = val1.ffstate
        _x = _v54
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_get_struct_9f().pack(*_v54.pose_covariance))
        _x = _v54
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_get_struct_9f().pack(*_v54.twist_covariance))
        _x = _v54
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_get_struct_9f().pack(*_v54.accel_covariance))
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v55 = val1.shape
        length = len(_v55.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v55.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v56 = val1.dimension
        _x = _v56
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_get_struct_9d().pack(*_v56.covariance))
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.shape_uncertainty))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      _x = self
      buff.write(_get_struct_2f().pack(_x.jmap.distance_to_lanes, _x.mmap.distance_to_junction))
      length = len(self.mmap.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.mmap.lanes:
        _v57 = val1.map_lane
        _x = _v57
        buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
        length = len(_v57.central_path_points)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.central_path_points:
          _v58 = val3.position
          _x = _v58
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val3
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        length = len(_v57.central_path_coeffs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v57.central_path_coeffs))
        _x = _v57.central_path_type
        buff.write(_get_struct_B().pack(_x))
        length = len(_v57.left_boundaries)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.left_boundaries:
          _v59 = val3.boundary_point
          _v60 = _v59.position
          _x = _v60
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v59
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(_v57.right_boundaries)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.right_boundaries:
          _v61 = val3.boundary_point
          _v62 = _v61.position
          _x = _v62
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v61
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(_v57.situations)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.situations:
          _x = val3
          buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
          _x = val3.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v57.traffic_light_pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v57.traffic_light_pos))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.ego_dis_to_lane_tail, _x.ego_dis_to_lane_head))
        length = len(val1.front_vehicles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.front_vehicles:
          _x = val2
          buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
          _v63 = val2.cls
          _x = _v63
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = _v63.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v64 = val2.state
          _x = _v64.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v65 = _v64.pose
          _v66 = _v65.pose
          _v67 = _v66.position
          _x = _v67
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v68 = _v66.orientation
          _x = _v68
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_36d().pack(*_v65.covariance))
          _v69 = _v64.twist
          _v70 = _v69.twist
          _v71 = _v70.linear
          _x = _v71
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v72 = _v70.angular
          _x = _v72
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v69.covariance))
          _v73 = _v64.accel
          _v74 = _v73.accel
          _v75 = _v74.linear
          _x = _v75
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v76 = _v74.angular
          _x = _v76
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v73.covariance))
          _v77 = val2.ffstate
          _x = _v77
          buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
          buff.write(_get_struct_9f().pack(*_v77.pose_covariance))
          _x = _v77
          buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
          buff.write(_get_struct_9f().pack(*_v77.twist_covariance))
          _x = _v77
          buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
          buff.write(_get_struct_9f().pack(*_v77.accel_covariance))
          _x = val2
          buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
          _v78 = val2.shape
          length = len(_v78.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v78.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v79 = val2.dimension
          _x = _v79
          buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
          buff.write(_get_struct_9d().pack(*_v79.covariance))
          length = len(val2.shape_uncertainty)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.shape_uncertainty))
          _x = val2
          buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
        length = len(val1.rear_vehicles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.rear_vehicles:
          _x = val2
          buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
          _v80 = val2.cls
          _x = _v80
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = _v80.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v81 = val2.state
          _x = _v81.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v82 = _v81.pose
          _v83 = _v82.pose
          _v84 = _v83.position
          _x = _v84
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v85 = _v83.orientation
          _x = _v85
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_36d().pack(*_v82.covariance))
          _v86 = _v81.twist
          _v87 = _v86.twist
          _v88 = _v87.linear
          _x = _v88
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v89 = _v87.angular
          _x = _v89
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v86.covariance))
          _v90 = _v81.accel
          _v91 = _v90.accel
          _v92 = _v91.linear
          _x = _v92
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v93 = _v91.angular
          _x = _v93
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v90.covariance))
          _v94 = val2.ffstate
          _x = _v94
          buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
          buff.write(_get_struct_9f().pack(*_v94.pose_covariance))
          _x = _v94
          buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
          buff.write(_get_struct_9f().pack(*_v94.twist_covariance))
          _x = _v94
          buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
          buff.write(_get_struct_9f().pack(*_v94.accel_covariance))
          _x = val2
          buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
          _v95 = val2.shape
          length = len(_v95.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v95.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v96 = val2.dimension
          _x = _v96
          buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
          buff.write(_get_struct_9d().pack(*_v96.covariance))
          length = len(val2.shape_uncertainty)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.shape_uncertainty))
          _x = val2
          buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      _x = self.mmap.ego_lane_index
      buff.write(_get_struct_f().pack(_x))
      length = len(self.mmap.exit_lane_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.mmap.exit_lane_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ego_state is None:
        self.ego_state = zzz_driver_msgs.msg.RigidBodyState()
      if self.ego_ffstate is None:
        self.ego_ffstate = zzz_driver_msgs.msg.FrenetSerretState2D()
      if self.jmap is None:
        self.jmap = zzz_cognition_msgs.msg.JunctionMapState()
      if self.mmap is None:
        self.mmap = zzz_cognition_msgs.msg.MultiLaneMapState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ego_state.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ego_state.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.ego_state.pose.pose.position.x, _x.ego_state.pose.pose.position.y, _x.ego_state.pose.pose.position.z, _x.ego_state.pose.pose.orientation.x, _x.ego_state.pose.pose.orientation.y, _x.ego_state.pose.pose.orientation.z, _x.ego_state.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.ego_state.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.ego_state.twist.twist.linear.x, _x.ego_state.twist.twist.linear.y, _x.ego_state.twist.twist.linear.z, _x.ego_state.twist.twist.angular.x, _x.ego_state.twist.twist.angular.y, _x.ego_state.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.ego_state.twist.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.ego_state.accel.accel.linear.x, _x.ego_state.accel.accel.linear.y, _x.ego_state.accel.accel.linear.z, _x.ego_state.accel.accel.angular.x, _x.ego_state.accel.accel.angular.y, _x.ego_state.accel.accel.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.ego_state.accel.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.ego_ffstate.s, _x.ego_ffstate.d, _x.ego_ffstate.psi,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.ego_ffstate.pose_covariance = _get_struct_9f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.ego_ffstate.vs, _x.ego_ffstate.vd, _x.ego_ffstate.omega,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.ego_ffstate.twist_covariance = _get_struct_9f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.ego_ffstate.sa, _x.ego_ffstate.ad, _x.ego_ffstate.epsilon,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.ego_ffstate.accel_covariance = _get_struct_9f().unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.model, _x.jmap.reference_path.map_lane.index, _x.jmap.reference_path.map_lane.speed_limit, _x.jmap.reference_path.map_lane.length, _x.jmap.reference_path.map_lane.width, _x.jmap.reference_path.map_lane.bidirectional, _x.jmap.reference_path.map_lane.stop_state,) = _get_struct_Bh3f2B().unpack(str[start:end])
      self.jmap.reference_path.map_lane.bidirectional = bool(self.jmap.reference_path.map_lane.bidirectional)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.map_lane.central_path_points = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LanePoint()
        _v97 = val1.position
        _x = _v97
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        self.jmap.reference_path.map_lane.central_path_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.jmap.reference_path.map_lane.central_path_coeffs = s.unpack(str[start:end])
      start = end
      end += 1
      (self.jmap.reference_path.map_lane.central_path_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.map_lane.left_boundaries = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneBoundary()
        _v98 = val1.boundary_point
        _v99 = _v98.position
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v98
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.jmap.reference_path.map_lane.left_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.map_lane.right_boundaries = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneBoundary()
        _v100 = val1.boundary_point
        _v101 = _v100.position
        _x = _v101
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v100
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.jmap.reference_path.map_lane.right_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.map_lane.situations = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneSituation()
        _x = val1
        start = end
        end += 13
        (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comments = str[start:end]
        self.jmap.reference_path.map_lane.situations.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.jmap.reference_path.map_lane.traffic_light_pos = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.jmap.reference_path.ego_dis_to_lane_tail, _x.jmap.reference_path.ego_dis_to_lane_head,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.front_vehicles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v102 = val1.cls
        _x = _v102
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v102.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v102.comments = str[start:end]
        _v103 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v103.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v103.child_frame_id = str[start:end]
        _v104 = _v103.pose
        _v105 = _v104.pose
        _v106 = _v105.position
        _x = _v106
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v107 = _v105.orientation
        _x = _v107
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v104.covariance = _get_struct_36d().unpack(str[start:end])
        _v108 = _v103.twist
        _v109 = _v108.twist
        _v110 = _v109.linear
        _x = _v110
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v111 = _v109.angular
        _x = _v111
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v108.covariance = _get_struct_36d().unpack(str[start:end])
        _v112 = _v103.accel
        _v113 = _v112.accel
        _v114 = _v113.linear
        _x = _v114
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v115 = _v113.angular
        _x = _v115
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v112.covariance = _get_struct_36d().unpack(str[start:end])
        _v116 = val1.ffstate
        _x = _v116
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v116.pose_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v116
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v116.twist_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v116
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v116.accel_covariance = _get_struct_9f().unpack(str[start:end])
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v117 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v117.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v117.points.append(val3)
        _v118 = val1.dimension
        _x = _v118
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v118.covariance = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.jmap.reference_path.front_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.rear_vehicles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v119 = val1.cls
        _x = _v119
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v119.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v119.comments = str[start:end]
        _v120 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v120.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v120.child_frame_id = str[start:end]
        _v121 = _v120.pose
        _v122 = _v121.pose
        _v123 = _v122.position
        _x = _v123
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v124 = _v122.orientation
        _x = _v124
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v121.covariance = _get_struct_36d().unpack(str[start:end])
        _v125 = _v120.twist
        _v126 = _v125.twist
        _v127 = _v126.linear
        _x = _v127
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v128 = _v126.angular
        _x = _v128
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v125.covariance = _get_struct_36d().unpack(str[start:end])
        _v129 = _v120.accel
        _v130 = _v129.accel
        _v131 = _v130.linear
        _x = _v131
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v132 = _v130.angular
        _x = _v132
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v129.covariance = _get_struct_36d().unpack(str[start:end])
        _v133 = val1.ffstate
        _x = _v133
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v133.pose_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v133
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v133.twist_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v133
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v133.accel_covariance = _get_struct_9f().unpack(str[start:end])
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v134 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v134.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v134.points.append(val3)
        _v135 = val1.dimension
        _x = _v135
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v135.covariance = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.jmap.reference_path.rear_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.drivable_area.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.jmap.drivable_area.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.obstacles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v136 = val1.cls
        _x = _v136
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v136.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v136.comments = str[start:end]
        _v137 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v137.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v137.child_frame_id = str[start:end]
        _v138 = _v137.pose
        _v139 = _v138.pose
        _v140 = _v139.position
        _x = _v140
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v141 = _v139.orientation
        _x = _v141
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v138.covariance = _get_struct_36d().unpack(str[start:end])
        _v142 = _v137.twist
        _v143 = _v142.twist
        _v144 = _v143.linear
        _x = _v144
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v145 = _v143.angular
        _x = _v145
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v142.covariance = _get_struct_36d().unpack(str[start:end])
        _v146 = _v137.accel
        _v147 = _v146.accel
        _v148 = _v147.linear
        _x = _v148
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v149 = _v147.angular
        _x = _v149
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v146.covariance = _get_struct_36d().unpack(str[start:end])
        _v150 = val1.ffstate
        _x = _v150
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v150.pose_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v150
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v150.twist_covariance = _get_struct_9f().unpack(str[start:end])
        _x = _v150
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v150.accel_covariance = _get_struct_9f().unpack(str[start:end])
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v151 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v151.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v151.points.append(val3)
        _v152 = val1.dimension
        _x = _v152
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v152.covariance = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.jmap.obstacles.append(val1)
      _x = self
      start = end
      end += 8
      (_x.jmap.distance_to_lanes, _x.mmap.distance_to_junction,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mmap.lanes = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.LaneState()
        _v153 = val1.map_lane
        _x = _v153
        start = end
        end += 16
        (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
        _v153.bidirectional = bool(_v153.bidirectional)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v153.central_path_points = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LanePoint()
          _v154 = val3.position
          _x = _v154
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val3
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _v153.central_path_points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v153.central_path_coeffs = s.unpack(str[start:end])
        start = end
        end += 1
        (_v153.central_path_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v153.left_boundaries = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneBoundary()
          _v155 = val3.boundary_point
          _v156 = _v155.position
          _x = _v156
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v155
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val3
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          _v153.left_boundaries.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v153.right_boundaries = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneBoundary()
          _v157 = val3.boundary_point
          _v158 = _v157.position
          _x = _v158
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v157
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val3
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          _v153.right_boundaries.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v153.situations = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneSituation()
          _x = val3
          start = end
          end += 13
          (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.comments = str[start:end]
          _v153.situations.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v153.traffic_light_pos = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.ego_dis_to_lane_tail, _x.ego_dis_to_lane_head,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.front_vehicles = []
        for i in range(0, length):
          val2 = zzz_cognition_msgs.msg.RoadObstacle()
          _x = val2
          start = end
          end += 12
          (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
          _v159 = val2.cls
          _x = _v159
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v159.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v159.comments = str[start:end]
          _v160 = val2.state
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v160.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v160.child_frame_id = str[start:end]
          _v161 = _v160.pose
          _v162 = _v161.pose
          _v163 = _v162.position
          _x = _v163
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v164 = _v162.orientation
          _x = _v164
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v161.covariance = _get_struct_36d().unpack(str[start:end])
          _v165 = _v160.twist
          _v166 = _v165.twist
          _v167 = _v166.linear
          _x = _v167
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v168 = _v166.angular
          _x = _v168
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v165.covariance = _get_struct_36d().unpack(str[start:end])
          _v169 = _v160.accel
          _v170 = _v169.accel
          _v171 = _v170.linear
          _x = _v171
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v172 = _v170.angular
          _x = _v172
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v169.covariance = _get_struct_36d().unpack(str[start:end])
          _v173 = val2.ffstate
          _x = _v173
          start = end
          end += 12
          (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v173.pose_covariance = _get_struct_9f().unpack(str[start:end])
          _x = _v173
          start = end
          end += 12
          (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v173.twist_covariance = _get_struct_9f().unpack(str[start:end])
          _x = _v173
          start = end
          end += 12
          (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v173.accel_covariance = _get_struct_9f().unpack(str[start:end])
          _x = val2
          start = end
          end += 22
          (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
          val2.is_static = bool(val2.is_static)
          _v174 = val2.shape
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v174.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v174.points.append(val4)
          _v175 = val2.dimension
          _x = _v175
          start = end
          end += 24
          (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 72
          _v175.covariance = _get_struct_9d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.shape_uncertainty = s.unpack(str[start:end])
          _x = val2
          start = end
          end += 2
          (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
          val1.front_vehicles.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.rear_vehicles = []
        for i in range(0, length):
          val2 = zzz_cognition_msgs.msg.RoadObstacle()
          _x = val2
          start = end
          end += 12
          (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
          _v176 = val2.cls
          _x = _v176
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v176.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v176.comments = str[start:end]
          _v177 = val2.state
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v177.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v177.child_frame_id = str[start:end]
          _v178 = _v177.pose
          _v179 = _v178.pose
          _v180 = _v179.position
          _x = _v180
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v181 = _v179.orientation
          _x = _v181
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v178.covariance = _get_struct_36d().unpack(str[start:end])
          _v182 = _v177.twist
          _v183 = _v182.twist
          _v184 = _v183.linear
          _x = _v184
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v185 = _v183.angular
          _x = _v185
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v182.covariance = _get_struct_36d().unpack(str[start:end])
          _v186 = _v177.accel
          _v187 = _v186.accel
          _v188 = _v187.linear
          _x = _v188
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v189 = _v187.angular
          _x = _v189
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v186.covariance = _get_struct_36d().unpack(str[start:end])
          _v190 = val2.ffstate
          _x = _v190
          start = end
          end += 12
          (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v190.pose_covariance = _get_struct_9f().unpack(str[start:end])
          _x = _v190
          start = end
          end += 12
          (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v190.twist_covariance = _get_struct_9f().unpack(str[start:end])
          _x = _v190
          start = end
          end += 12
          (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v190.accel_covariance = _get_struct_9f().unpack(str[start:end])
          _x = val2
          start = end
          end += 22
          (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
          val2.is_static = bool(val2.is_static)
          _v191 = val2.shape
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v191.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v191.points.append(val4)
          _v192 = val2.dimension
          _x = _v192
          start = end
          end += 24
          (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 72
          _v192.covariance = _get_struct_9d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.shape_uncertainty = s.unpack(str[start:end])
          _x = val2
          start = end
          end += 2
          (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
          val1.rear_vehicles.append(val2)
        self.mmap.lanes.append(val1)
      start = end
      end += 4
      (self.mmap.ego_lane_index,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mmap.exit_lane_index = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ego_state.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.ego_state.pose.pose.position.x, _x.ego_state.pose.pose.position.y, _x.ego_state.pose.pose.position.z, _x.ego_state.pose.pose.orientation.x, _x.ego_state.pose.pose.orientation.y, _x.ego_state.pose.pose.orientation.z, _x.ego_state.pose.pose.orientation.w))
      buff.write(self.ego_state.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.ego_state.twist.twist.linear.x, _x.ego_state.twist.twist.linear.y, _x.ego_state.twist.twist.linear.z, _x.ego_state.twist.twist.angular.x, _x.ego_state.twist.twist.angular.y, _x.ego_state.twist.twist.angular.z))
      buff.write(self.ego_state.twist.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.ego_state.accel.accel.linear.x, _x.ego_state.accel.accel.linear.y, _x.ego_state.accel.accel.linear.z, _x.ego_state.accel.accel.angular.x, _x.ego_state.accel.accel.angular.y, _x.ego_state.accel.accel.angular.z))
      buff.write(self.ego_state.accel.covariance.tostring())
      _x = self
      buff.write(_get_struct_3f().pack(_x.ego_ffstate.s, _x.ego_ffstate.d, _x.ego_ffstate.psi))
      buff.write(self.ego_ffstate.pose_covariance.tostring())
      _x = self
      buff.write(_get_struct_3f().pack(_x.ego_ffstate.vs, _x.ego_ffstate.vd, _x.ego_ffstate.omega))
      buff.write(self.ego_ffstate.twist_covariance.tostring())
      _x = self
      buff.write(_get_struct_3f().pack(_x.ego_ffstate.sa, _x.ego_ffstate.ad, _x.ego_ffstate.epsilon))
      buff.write(self.ego_ffstate.accel_covariance.tostring())
      _x = self
      buff.write(_get_struct_Bh3f2B().pack(_x.model, _x.jmap.reference_path.map_lane.index, _x.jmap.reference_path.map_lane.speed_limit, _x.jmap.reference_path.map_lane.length, _x.jmap.reference_path.map_lane.width, _x.jmap.reference_path.map_lane.bidirectional, _x.jmap.reference_path.map_lane.stop_state))
      length = len(self.jmap.reference_path.map_lane.central_path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.map_lane.central_path_points:
        _v193 = val1.position
        _x = _v193
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
      length = len(self.jmap.reference_path.map_lane.central_path_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.jmap.reference_path.map_lane.central_path_coeffs.tostring())
      _x = self.jmap.reference_path.map_lane.central_path_type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.jmap.reference_path.map_lane.left_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.map_lane.left_boundaries:
        _v194 = val1.boundary_point
        _v195 = _v194.position
        _x = _v195
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v194
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.jmap.reference_path.map_lane.right_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.map_lane.right_boundaries:
        _v196 = val1.boundary_point
        _v197 = _v196.position
        _x = _v197
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v196
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.jmap.reference_path.map_lane.situations)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.map_lane.situations:
        _x = val1
        buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.jmap.reference_path.map_lane.traffic_light_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.jmap.reference_path.map_lane.traffic_light_pos.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.jmap.reference_path.ego_dis_to_lane_tail, _x.jmap.reference_path.ego_dis_to_lane_head))
      length = len(self.jmap.reference_path.front_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.front_vehicles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v198 = val1.cls
        _x = _v198
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v198.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v199 = val1.state
        _x = _v199.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v200 = _v199.pose
        _v201 = _v200.pose
        _v202 = _v201.position
        _x = _v202
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v203 = _v201.orientation
        _x = _v203
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v200.covariance.tostring())
        _v204 = _v199.twist
        _v205 = _v204.twist
        _v206 = _v205.linear
        _x = _v206
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v207 = _v205.angular
        _x = _v207
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v204.covariance.tostring())
        _v208 = _v199.accel
        _v209 = _v208.accel
        _v210 = _v209.linear
        _x = _v210
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v211 = _v209.angular
        _x = _v211
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v208.covariance.tostring())
        _v212 = val1.ffstate
        _x = _v212
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_v212.pose_covariance.tostring())
        _x = _v212
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_v212.twist_covariance.tostring())
        _x = _v212
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_v212.accel_covariance.tostring())
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v213 = val1.shape
        length = len(_v213.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v213.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v214 = val1.dimension
        _x = _v214
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_v214.covariance.tostring())
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.shape_uncertainty.tostring())
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      length = len(self.jmap.reference_path.rear_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.reference_path.rear_vehicles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v215 = val1.cls
        _x = _v215
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v215.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v216 = val1.state
        _x = _v216.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v217 = _v216.pose
        _v218 = _v217.pose
        _v219 = _v218.position
        _x = _v219
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v220 = _v218.orientation
        _x = _v220
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v217.covariance.tostring())
        _v221 = _v216.twist
        _v222 = _v221.twist
        _v223 = _v222.linear
        _x = _v223
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v224 = _v222.angular
        _x = _v224
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v221.covariance.tostring())
        _v225 = _v216.accel
        _v226 = _v225.accel
        _v227 = _v226.linear
        _x = _v227
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v228 = _v226.angular
        _x = _v228
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v225.covariance.tostring())
        _v229 = val1.ffstate
        _x = _v229
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_v229.pose_covariance.tostring())
        _x = _v229
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_v229.twist_covariance.tostring())
        _x = _v229
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_v229.accel_covariance.tostring())
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v230 = val1.shape
        length = len(_v230.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v230.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v231 = val1.dimension
        _x = _v231
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_v231.covariance.tostring())
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.shape_uncertainty.tostring())
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      length = len(self.jmap.drivable_area.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.drivable_area.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.jmap.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.jmap.obstacles:
        _x = val1
        buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
        _v232 = val1.cls
        _x = _v232
        buff.write(_get_struct_If().pack(_x.classid, _x.score))
        _x = _v232.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v233 = val1.state
        _x = _v233.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v234 = _v233.pose
        _v235 = _v234.pose
        _v236 = _v235.position
        _x = _v236
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v237 = _v235.orientation
        _x = _v237
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v234.covariance.tostring())
        _v238 = _v233.twist
        _v239 = _v238.twist
        _v240 = _v239.linear
        _x = _v240
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v241 = _v239.angular
        _x = _v241
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v238.covariance.tostring())
        _v242 = _v233.accel
        _v243 = _v242.accel
        _v244 = _v243.linear
        _x = _v244
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v245 = _v243.angular
        _x = _v245
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v242.covariance.tostring())
        _v246 = val1.ffstate
        _x = _v246
        buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
        buff.write(_v246.pose_covariance.tostring())
        _x = _v246
        buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
        buff.write(_v246.twist_covariance.tostring())
        _x = _v246
        buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
        buff.write(_v246.accel_covariance.tostring())
        _x = val1
        buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
        _v247 = val1.shape
        length = len(_v247.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v247.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v248 = val1.dimension
        _x = _v248
        buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
        buff.write(_v248.covariance.tostring())
        length = len(val1.shape_uncertainty)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.shape_uncertainty.tostring())
        _x = val1
        buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      _x = self
      buff.write(_get_struct_2f().pack(_x.jmap.distance_to_lanes, _x.mmap.distance_to_junction))
      length = len(self.mmap.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.mmap.lanes:
        _v249 = val1.map_lane
        _x = _v249
        buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
        length = len(_v249.central_path_points)
        buff.write(_struct_I.pack(length))
        for val3 in _v249.central_path_points:
          _v250 = val3.position
          _x = _v250
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val3
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        length = len(_v249.central_path_coeffs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v249.central_path_coeffs.tostring())
        _x = _v249.central_path_type
        buff.write(_get_struct_B().pack(_x))
        length = len(_v249.left_boundaries)
        buff.write(_struct_I.pack(length))
        for val3 in _v249.left_boundaries:
          _v251 = val3.boundary_point
          _v252 = _v251.position
          _x = _v252
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v251
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(_v249.right_boundaries)
        buff.write(_struct_I.pack(length))
        for val3 in _v249.right_boundaries:
          _v253 = val3.boundary_point
          _v254 = _v253.position
          _x = _v254
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v253
          buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
        length = len(_v249.situations)
        buff.write(_struct_I.pack(length))
        for val3 in _v249.situations:
          _x = val3
          buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
          _x = val3.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v249.traffic_light_pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v249.traffic_light_pos.tostring())
        _x = val1
        buff.write(_get_struct_2f().pack(_x.ego_dis_to_lane_tail, _x.ego_dis_to_lane_head))
        length = len(val1.front_vehicles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.front_vehicles:
          _x = val2
          buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
          _v255 = val2.cls
          _x = _v255
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = _v255.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v256 = val2.state
          _x = _v256.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v257 = _v256.pose
          _v258 = _v257.pose
          _v259 = _v258.position
          _x = _v259
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v260 = _v258.orientation
          _x = _v260
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_v257.covariance.tostring())
          _v261 = _v256.twist
          _v262 = _v261.twist
          _v263 = _v262.linear
          _x = _v263
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v264 = _v262.angular
          _x = _v264
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v261.covariance.tostring())
          _v265 = _v256.accel
          _v266 = _v265.accel
          _v267 = _v266.linear
          _x = _v267
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v268 = _v266.angular
          _x = _v268
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v265.covariance.tostring())
          _v269 = val2.ffstate
          _x = _v269
          buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
          buff.write(_v269.pose_covariance.tostring())
          _x = _v269
          buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
          buff.write(_v269.twist_covariance.tostring())
          _x = _v269
          buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
          buff.write(_v269.accel_covariance.tostring())
          _x = val2
          buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
          _v270 = val2.shape
          length = len(_v270.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v270.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v271 = val2.dimension
          _x = _v271
          buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
          buff.write(_v271.covariance.tostring())
          length = len(val2.shape_uncertainty)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.shape_uncertainty.tostring())
          _x = val2
          buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
        length = len(val1.rear_vehicles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.rear_vehicles:
          _x = val2
          buff.write(_get_struct_Qf().pack(_x.uid, _x.confidence))
          _v272 = val2.cls
          _x = _v272
          buff.write(_get_struct_If().pack(_x.classid, _x.score))
          _x = _v272.comments
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v273 = val2.state
          _x = _v273.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v274 = _v273.pose
          _v275 = _v274.pose
          _v276 = _v275.position
          _x = _v276
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v277 = _v275.orientation
          _x = _v277
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_v274.covariance.tostring())
          _v278 = _v273.twist
          _v279 = _v278.twist
          _v280 = _v279.linear
          _x = _v280
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v281 = _v279.angular
          _x = _v281
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v278.covariance.tostring())
          _v282 = _v273.accel
          _v283 = _v282.accel
          _v284 = _v283.linear
          _x = _v284
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v285 = _v283.angular
          _x = _v285
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v282.covariance.tostring())
          _v286 = val2.ffstate
          _x = _v286
          buff.write(_get_struct_3f().pack(_x.s, _x.d, _x.psi))
          buff.write(_v286.pose_covariance.tostring())
          _x = _v286
          buff.write(_get_struct_3f().pack(_x.vs, _x.vd, _x.omega))
          buff.write(_v286.twist_covariance.tostring())
          _x = _v286
          buff.write(_get_struct_3f().pack(_x.sa, _x.ad, _x.epsilon))
          buff.write(_v286.accel_covariance.tostring())
          _x = val2
          buff.write(_get_struct_5f2B().pack(_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type))
          _v287 = val2.shape
          length = len(_v287.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v287.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v288 = val2.dimension
          _x = _v288
          buff.write(_get_struct_3d().pack(_x.length_x, _x.length_y, _x.length_z))
          buff.write(_v288.covariance.tostring())
          length = len(val2.shape_uncertainty)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.shape_uncertainty.tostring())
          _x = val2
          buff.write(_get_struct_2B().pack(_x.behavior, _x.priority))
      _x = self.mmap.ego_lane_index
      buff.write(_get_struct_f().pack(_x))
      length = len(self.mmap.exit_lane_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.mmap.exit_lane_index.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ego_state is None:
        self.ego_state = zzz_driver_msgs.msg.RigidBodyState()
      if self.ego_ffstate is None:
        self.ego_ffstate = zzz_driver_msgs.msg.FrenetSerretState2D()
      if self.jmap is None:
        self.jmap = zzz_cognition_msgs.msg.JunctionMapState()
      if self.mmap is None:
        self.mmap = zzz_cognition_msgs.msg.MultiLaneMapState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ego_state.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ego_state.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.ego_state.pose.pose.position.x, _x.ego_state.pose.pose.position.y, _x.ego_state.pose.pose.position.z, _x.ego_state.pose.pose.orientation.x, _x.ego_state.pose.pose.orientation.y, _x.ego_state.pose.pose.orientation.z, _x.ego_state.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.ego_state.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.ego_state.twist.twist.linear.x, _x.ego_state.twist.twist.linear.y, _x.ego_state.twist.twist.linear.z, _x.ego_state.twist.twist.angular.x, _x.ego_state.twist.twist.angular.y, _x.ego_state.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.ego_state.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.ego_state.accel.accel.linear.x, _x.ego_state.accel.accel.linear.y, _x.ego_state.accel.accel.linear.z, _x.ego_state.accel.accel.angular.x, _x.ego_state.accel.accel.angular.y, _x.ego_state.accel.accel.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.ego_state.accel.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 12
      (_x.ego_ffstate.s, _x.ego_ffstate.d, _x.ego_ffstate.psi,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.ego_ffstate.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      _x = self
      start = end
      end += 12
      (_x.ego_ffstate.vs, _x.ego_ffstate.vd, _x.ego_ffstate.omega,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.ego_ffstate.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      _x = self
      start = end
      end += 12
      (_x.ego_ffstate.sa, _x.ego_ffstate.ad, _x.ego_ffstate.epsilon,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.ego_ffstate.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      _x = self
      start = end
      end += 17
      (_x.model, _x.jmap.reference_path.map_lane.index, _x.jmap.reference_path.map_lane.speed_limit, _x.jmap.reference_path.map_lane.length, _x.jmap.reference_path.map_lane.width, _x.jmap.reference_path.map_lane.bidirectional, _x.jmap.reference_path.map_lane.stop_state,) = _get_struct_Bh3f2B().unpack(str[start:end])
      self.jmap.reference_path.map_lane.bidirectional = bool(self.jmap.reference_path.map_lane.bidirectional)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.map_lane.central_path_points = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LanePoint()
        _v289 = val1.position
        _x = _v289
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        self.jmap.reference_path.map_lane.central_path_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.jmap.reference_path.map_lane.central_path_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.jmap.reference_path.map_lane.central_path_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.map_lane.left_boundaries = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneBoundary()
        _v290 = val1.boundary_point
        _v291 = _v290.position
        _x = _v291
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v290
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.jmap.reference_path.map_lane.left_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.map_lane.right_boundaries = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneBoundary()
        _v292 = val1.boundary_point
        _v293 = _v292.position
        _x = _v293
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v292
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.jmap.reference_path.map_lane.right_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.map_lane.situations = []
      for i in range(0, length):
        val1 = zzz_navigation_msgs.msg.LaneSituation()
        _x = val1
        start = end
        end += 13
        (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.comments = str[start:end]
        self.jmap.reference_path.map_lane.situations.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.jmap.reference_path.map_lane.traffic_light_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.jmap.reference_path.ego_dis_to_lane_tail, _x.jmap.reference_path.ego_dis_to_lane_head,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.front_vehicles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v294 = val1.cls
        _x = _v294
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v294.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v294.comments = str[start:end]
        _v295 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v295.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v295.child_frame_id = str[start:end]
        _v296 = _v295.pose
        _v297 = _v296.pose
        _v298 = _v297.position
        _x = _v298
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v299 = _v297.orientation
        _x = _v299
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v296.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v300 = _v295.twist
        _v301 = _v300.twist
        _v302 = _v301.linear
        _x = _v302
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v303 = _v301.angular
        _x = _v303
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v300.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v304 = _v295.accel
        _v305 = _v304.accel
        _v306 = _v305.linear
        _x = _v306
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v307 = _v305.angular
        _x = _v307
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v304.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v308 = val1.ffstate
        _x = _v308
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v308.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v308
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v308.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v308
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v308.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v309 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v309.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v309.points.append(val3)
        _v310 = val1.dimension
        _x = _v310
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v310.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.jmap.reference_path.front_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.reference_path.rear_vehicles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v311 = val1.cls
        _x = _v311
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v311.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v311.comments = str[start:end]
        _v312 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v312.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v312.child_frame_id = str[start:end]
        _v313 = _v312.pose
        _v314 = _v313.pose
        _v315 = _v314.position
        _x = _v315
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v316 = _v314.orientation
        _x = _v316
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v313.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v317 = _v312.twist
        _v318 = _v317.twist
        _v319 = _v318.linear
        _x = _v319
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v320 = _v318.angular
        _x = _v320
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v317.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v321 = _v312.accel
        _v322 = _v321.accel
        _v323 = _v322.linear
        _x = _v323
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v324 = _v322.angular
        _x = _v324
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v321.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v325 = val1.ffstate
        _x = _v325
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v325.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v325
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v325.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v325
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v325.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v326 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v326.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v326.points.append(val3)
        _v327 = val1.dimension
        _x = _v327
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v327.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.jmap.reference_path.rear_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.drivable_area.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.jmap.drivable_area.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jmap.obstacles = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.RoadObstacle()
        _x = val1
        start = end
        end += 12
        (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
        _v328 = val1.cls
        _x = _v328
        start = end
        end += 8
        (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v328.comments = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v328.comments = str[start:end]
        _v329 = val1.state
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v329.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v329.child_frame_id = str[start:end]
        _v330 = _v329.pose
        _v331 = _v330.pose
        _v332 = _v331.position
        _x = _v332
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v333 = _v331.orientation
        _x = _v333
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v330.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v334 = _v329.twist
        _v335 = _v334.twist
        _v336 = _v335.linear
        _x = _v336
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v337 = _v335.angular
        _x = _v337
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v334.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v338 = _v329.accel
        _v339 = _v338.accel
        _v340 = _v339.linear
        _x = _v340
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v341 = _v339.angular
        _x = _v341
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v338.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v342 = val1.ffstate
        _x = _v342
        start = end
        end += 12
        (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v342.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v342
        start = end
        end += 12
        (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v342.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = _v342
        start = end
        end += 12
        (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 36
        _v342.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        _x = val1
        start = end
        end += 22
        (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        _v343 = val1.shape
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v343.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v343.points.append(val3)
        _v344 = val1.dimension
        _x = _v344
        start = end
        end += 24
        (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 72
        _v344.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 2
        (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
        self.jmap.obstacles.append(val1)
      _x = self
      start = end
      end += 8
      (_x.jmap.distance_to_lanes, _x.mmap.distance_to_junction,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mmap.lanes = []
      for i in range(0, length):
        val1 = zzz_cognition_msgs.msg.LaneState()
        _v345 = val1.map_lane
        _x = _v345
        start = end
        end += 16
        (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
        _v345.bidirectional = bool(_v345.bidirectional)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.central_path_points = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LanePoint()
          _v346 = val3.position
          _x = _v346
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val3
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _v345.central_path_points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v345.central_path_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 1
        (_v345.central_path_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.left_boundaries = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneBoundary()
          _v347 = val3.boundary_point
          _v348 = _v347.position
          _x = _v348
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v347
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val3
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          _v345.left_boundaries.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.right_boundaries = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneBoundary()
          _v349 = val3.boundary_point
          _v350 = _v349.position
          _x = _v350
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v349
          start = end
          end += 20
          (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
          _x = val3
          start = end
          end += 5
          (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          _v345.right_boundaries.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.situations = []
        for i in range(0, length):
          val3 = zzz_navigation_msgs.msg.LaneSituation()
          _x = val3
          start = end
          end += 13
          (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.comments = str[start:end]
          _v345.situations.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v345.traffic_light_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 8
        (_x.ego_dis_to_lane_tail, _x.ego_dis_to_lane_head,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.front_vehicles = []
        for i in range(0, length):
          val2 = zzz_cognition_msgs.msg.RoadObstacle()
          _x = val2
          start = end
          end += 12
          (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
          _v351 = val2.cls
          _x = _v351
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v351.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v351.comments = str[start:end]
          _v352 = val2.state
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v352.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v352.child_frame_id = str[start:end]
          _v353 = _v352.pose
          _v354 = _v353.pose
          _v355 = _v354.position
          _x = _v355
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v356 = _v354.orientation
          _x = _v356
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v353.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v357 = _v352.twist
          _v358 = _v357.twist
          _v359 = _v358.linear
          _x = _v359
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v360 = _v358.angular
          _x = _v360
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v357.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v361 = _v352.accel
          _v362 = _v361.accel
          _v363 = _v362.linear
          _x = _v363
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v364 = _v362.angular
          _x = _v364
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v361.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v365 = val2.ffstate
          _x = _v365
          start = end
          end += 12
          (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v365.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = _v365
          start = end
          end += 12
          (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v365.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = _v365
          start = end
          end += 12
          (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v365.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = val2
          start = end
          end += 22
          (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
          val2.is_static = bool(val2.is_static)
          _v366 = val2.shape
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v366.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v366.points.append(val4)
          _v367 = val2.dimension
          _x = _v367
          start = end
          end += 24
          (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 72
          _v367.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _x = val2
          start = end
          end += 2
          (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
          val1.front_vehicles.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.rear_vehicles = []
        for i in range(0, length):
          val2 = zzz_cognition_msgs.msg.RoadObstacle()
          _x = val2
          start = end
          end += 12
          (_x.uid, _x.confidence,) = _get_struct_Qf().unpack(str[start:end])
          _v368 = val2.cls
          _x = _v368
          start = end
          end += 8
          (_x.classid, _x.score,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v368.comments = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v368.comments = str[start:end]
          _v369 = val2.state
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v369.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v369.child_frame_id = str[start:end]
          _v370 = _v369.pose
          _v371 = _v370.pose
          _v372 = _v371.position
          _x = _v372
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v373 = _v371.orientation
          _x = _v373
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v370.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v374 = _v369.twist
          _v375 = _v374.twist
          _v376 = _v375.linear
          _x = _v376
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v377 = _v375.angular
          _x = _v377
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v374.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v378 = _v369.accel
          _v379 = _v378.accel
          _v380 = _v379.linear
          _x = _v380
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v381 = _v379.angular
          _x = _v381
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v378.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v382 = val2.ffstate
          _x = _v382
          start = end
          end += 12
          (_x.s, _x.d, _x.psi,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v382.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = _v382
          start = end
          end += 12
          (_x.vs, _x.vd, _x.omega,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v382.twist_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = _v382
          start = end
          end += 12
          (_x.sa, _x.ad, _x.epsilon,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 36
          _v382.accel_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
          _x = val2
          start = end
          end += 22
          (_x.lane_index, _x.lane_anglediff, _x.lane_dist_left_t, _x.lane_dist_right_t, _x.lane_dist_s, _x.is_static, _x.shape_type,) = _get_struct_5f2B().unpack(str[start:end])
          val2.is_static = bool(val2.is_static)
          _v383 = val2.shape
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v383.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v383.points.append(val4)
          _v384 = val2.dimension
          _x = _v384
          start = end
          end += 24
          (_x.length_x, _x.length_y, _x.length_z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 72
          _v384.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.shape_uncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _x = val2
          start = end
          end += 2
          (_x.behavior, _x.priority,) = _get_struct_2B().unpack(str[start:end])
          val1.rear_vehicles.append(val2)
        self.mmap.lanes.append(val1)
      start = end
      end += 4
      (self.mmap.ego_lane_index,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mmap.exit_lane_index = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2fBf = None
def _get_struct_2fBf():
    global _struct_2fBf
    if _struct_2fBf is None:
        _struct_2fBf = struct.Struct("<2fBf")
    return _struct_2fBf
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_5f2B = None
def _get_struct_5f2B():
    global _struct_5f2B
    if _struct_5f2B is None:
        _struct_5f2B = struct.Struct("<5f2B")
    return _struct_5f2B
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_Bh3f2B = None
def _get_struct_Bh3f2B():
    global _struct_Bh3f2B
    if _struct_Bh3f2B is None:
        _struct_Bh3f2B = struct.Struct("<Bh3f2B")
    return _struct_Bh3f2B
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_Qf = None
def _get_struct_Qf():
    global _struct_Qf
    if _struct_Qf is None:
        _struct_Qf = struct.Struct("<Qf")
    return _struct_Qf
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_h3f2B = None
def _get_struct_h3f2B():
    global _struct_h3f2B
    if _struct_h3f2B is None:
        _struct_h3f2B = struct.Struct("<h3f2B")
    return _struct_h3f2B
