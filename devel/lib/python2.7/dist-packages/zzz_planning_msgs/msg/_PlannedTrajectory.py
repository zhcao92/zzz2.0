# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_planning_msgs/PlannedTrajectory.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import zzz_planning_msgs.msg

class PlannedTrajectory(genpy.Message):
  _md5sum = "ae087f427f20285f5721d2851c9817a3"
  _type = "zzz_planning_msgs/PlannedTrajectory"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """VehicleState[] Trajectory
================================================================================
MSG: zzz_planning_msgs/VehicleState

float32 x # m
float32 y # m
float32 z # m

float32 vx # m/s
float32 vy # m/s
float32 vz # m/s

float32 vl # m/s
float32 vr # m/s

float32 ax # m/s
float32 ay # m/s
float32 az # m/s

float32 steer_angle #degree
float32 acc #m/ss"""
  __slots__ = ['Trajectory']
  _slot_types = ['zzz_planning_msgs/VehicleState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Trajectory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlannedTrajectory, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Trajectory is None:
        self.Trajectory = []
    else:
      self.Trajectory = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.Trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.Trajectory:
        _x = val1
        buff.write(_get_struct_13f().pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.vl, _x.vr, _x.ax, _x.ay, _x.az, _x.steer_angle, _x.acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Trajectory is None:
        self.Trajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Trajectory = []
      for i in range(0, length):
        val1 = zzz_planning_msgs.msg.VehicleState()
        _x = val1
        start = end
        end += 52
        (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.vl, _x.vr, _x.ax, _x.ay, _x.az, _x.steer_angle, _x.acc,) = _get_struct_13f().unpack(str[start:end])
        self.Trajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.Trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.Trajectory:
        _x = val1
        buff.write(_get_struct_13f().pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.vl, _x.vr, _x.ax, _x.ay, _x.az, _x.steer_angle, _x.acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Trajectory is None:
        self.Trajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Trajectory = []
      for i in range(0, length):
        val1 = zzz_planning_msgs.msg.VehicleState()
        _x = val1
        start = end
        end += 52
        (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.vl, _x.vr, _x.ax, _x.ay, _x.az, _x.steer_angle, _x.acc,) = _get_struct_13f().unpack(str[start:end])
        self.Trajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13f = None
def _get_struct_13f():
    global _struct_13f
    if _struct_13f is None:
        _struct_13f = struct.Struct("<13f")
    return _struct_13f
