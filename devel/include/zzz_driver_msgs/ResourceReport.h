// Generated by gencpp from file zzz_driver_msgs/ResourceReport.msg
// DO NOT EDIT!


#ifndef ZZZ_DRIVER_MSGS_MESSAGE_RESOURCEREPORT_H
#define ZZZ_DRIVER_MSGS_MESSAGE_RESOURCEREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_driver_msgs
{
template <class ContainerAllocator>
struct ResourceReport_
{
  typedef ResourceReport_<ContainerAllocator> Type;

  ResourceReport_()
    : energy_level(0.0)
    , distance_to_refill(0.0)
    , odometer(0.0)  {
    }
  ResourceReport_(const ContainerAllocator& _alloc)
    : energy_level(0.0)
    , distance_to_refill(0.0)
    , odometer(0.0)  {
  (void)_alloc;
    }



   typedef float _energy_level_type;
  _energy_level_type energy_level;

   typedef float _distance_to_refill_type;
  _distance_to_refill_type distance_to_refill;

   typedef float _odometer_type;
  _odometer_type odometer;





  typedef boost::shared_ptr< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> const> ConstPtr;

}; // struct ResourceReport_

typedef ::zzz_driver_msgs::ResourceReport_<std::allocator<void> > ResourceReport;

typedef boost::shared_ptr< ::zzz_driver_msgs::ResourceReport > ResourceReportPtr;
typedef boost::shared_ptr< ::zzz_driver_msgs::ResourceReport const> ResourceReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator2> & rhs)
{
  return lhs.energy_level == rhs.energy_level &&
    lhs.distance_to_refill == rhs.distance_to_refill &&
    lhs.odometer == rhs.odometer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0533402475b5b1c56a96351a1100d35f";
  }

  static const char* value(const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0533402475b5b1c5ULL;
  static const uint64_t static_value2 = 0x6a96351a1100d35fULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_driver_msgs/ResourceReport";
  }

  static const char* value(const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Information for vehicle resources, can be used for eco driving\n"
"\n"
"# Fuel level / EV battery level (%, 0 to 100)\n"
"float32 energy_level\n"
"\n"
"# Estimate distance to refill fuel/battery\n"
"float32 distance_to_refill\n"
"\n"
"# Odometer (km)\n"
"float32 odometer\n"
;
  }

  static const char* value(const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.energy_level);
      stream.next(m.distance_to_refill);
      stream.next(m.odometer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResourceReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_driver_msgs::ResourceReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_driver_msgs::ResourceReport_<ContainerAllocator>& v)
  {
    s << indent << "energy_level: ";
    Printer<float>::stream(s, indent + "  ", v.energy_level);
    s << indent << "distance_to_refill: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_refill);
    s << indent << "odometer: ";
    Printer<float>::stream(s, indent + "  ", v.odometer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_DRIVER_MSGS_MESSAGE_RESOURCEREPORT_H
