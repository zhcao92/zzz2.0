// Generated by gencpp from file zzz_driver_msgs/FrenetSerretState2D.msg
// DO NOT EDIT!


#ifndef ZZZ_DRIVER_MSGS_MESSAGE_FRENETSERRETSTATE2D_H
#define ZZZ_DRIVER_MSGS_MESSAGE_FRENETSERRETSTATE2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_driver_msgs
{
template <class ContainerAllocator>
struct FrenetSerretState2D_
{
  typedef FrenetSerretState2D_<ContainerAllocator> Type;

  FrenetSerretState2D_()
    : s(0.0)
    , d(0.0)
    , psi(0.0)
    , pose_covariance()
    , vs(0.0)
    , vd(0.0)
    , omega(0.0)
    , twist_covariance()
    , sa(0.0)
    , ad(0.0)
    , epsilon(0.0)
    , accel_covariance()  {
      pose_covariance.assign(0.0);

      twist_covariance.assign(0.0);

      accel_covariance.assign(0.0);
  }
  FrenetSerretState2D_(const ContainerAllocator& _alloc)
    : s(0.0)
    , d(0.0)
    , psi(0.0)
    , pose_covariance()
    , vs(0.0)
    , vd(0.0)
    , omega(0.0)
    , twist_covariance()
    , sa(0.0)
    , ad(0.0)
    , epsilon(0.0)
    , accel_covariance()  {
  (void)_alloc;
      pose_covariance.assign(0.0);

      twist_covariance.assign(0.0);

      accel_covariance.assign(0.0);
  }



   typedef float _s_type;
  _s_type s;

   typedef float _d_type;
  _d_type d;

   typedef float _psi_type;
  _psi_type psi;

   typedef boost::array<float, 9>  _pose_covariance_type;
  _pose_covariance_type pose_covariance;

   typedef float _vs_type;
  _vs_type vs;

   typedef float _vd_type;
  _vd_type vd;

   typedef float _omega_type;
  _omega_type omega;

   typedef boost::array<float, 9>  _twist_covariance_type;
  _twist_covariance_type twist_covariance;

   typedef float _sa_type;
  _sa_type sa;

   typedef float _ad_type;
  _ad_type ad;

   typedef float _epsilon_type;
  _epsilon_type epsilon;

   typedef boost::array<float, 9>  _accel_covariance_type;
  _accel_covariance_type accel_covariance;





  typedef boost::shared_ptr< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> const> ConstPtr;

}; // struct FrenetSerretState2D_

typedef ::zzz_driver_msgs::FrenetSerretState2D_<std::allocator<void> > FrenetSerretState2D;

typedef boost::shared_ptr< ::zzz_driver_msgs::FrenetSerretState2D > FrenetSerretState2DPtr;
typedef boost::shared_ptr< ::zzz_driver_msgs::FrenetSerretState2D const> FrenetSerretState2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.d == rhs.d &&
    lhs.psi == rhs.psi &&
    lhs.pose_covariance == rhs.pose_covariance &&
    lhs.vs == rhs.vs &&
    lhs.vd == rhs.vd &&
    lhs.omega == rhs.omega &&
    lhs.twist_covariance == rhs.twist_covariance &&
    lhs.sa == rhs.sa &&
    lhs.ad == rhs.ad &&
    lhs.epsilon == rhs.epsilon &&
    lhs.accel_covariance == rhs.accel_covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df9764c6ee98f33fca6c752fdbb15bc4";
  }

  static const char* value(const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf9764c6ee98f33fULL;
  static const uint64_t static_value2 = 0xca6c752fdbb15bc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_driver_msgs/FrenetSerretState2D";
  }

  static const char* value(const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes a state in 2d Frenet-Serret Frame\n"
"# By 2d Frenet-Serret Frame we ignore the movement in z (in Cartesian) / b (in Frenet) direction\n"
"# For more information, refer to https://en.wikipedia.org/wiki/Frenet-Serret_formulas\n"
"\n"
"# 2D states\n"
"float32 s # Offset in tanget direction\n"
"float32 d # Offset in normal direction\n"
"          # we omit the offset in binormal direction\n"
"float32 psi # Heading angle in s-d plane\n"
"float32[9] pose_covariance\n"
"\n"
"# First order derivatives\n"
"float32 vs\n"
"float32 vd\n"
"float32 omega\n"
"float32[9] twist_covariance\n"
"\n"
"# Second order derivatives\n"
"float32 sa # prevent keyword conflict\n"
"float32 ad\n"
"float32 epsilon\n"
"float32[9] accel_covariance\n"
;
  }

  static const char* value(const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.d);
      stream.next(m.psi);
      stream.next(m.pose_covariance);
      stream.next(m.vs);
      stream.next(m.vd);
      stream.next(m.omega);
      stream.next(m.twist_covariance);
      stream.next(m.sa);
      stream.next(m.ad);
      stream.next(m.epsilon);
      stream.next(m.accel_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrenetSerretState2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_driver_msgs::FrenetSerretState2D_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "d: ";
    Printer<float>::stream(s, indent + "  ", v.d);
    s << indent << "psi: ";
    Printer<float>::stream(s, indent + "  ", v.psi);
    s << indent << "pose_covariance[]" << std::endl;
    for (size_t i = 0; i < v.pose_covariance.size(); ++i)
    {
      s << indent << "  pose_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_covariance[i]);
    }
    s << indent << "vs: ";
    Printer<float>::stream(s, indent + "  ", v.vs);
    s << indent << "vd: ";
    Printer<float>::stream(s, indent + "  ", v.vd);
    s << indent << "omega: ";
    Printer<float>::stream(s, indent + "  ", v.omega);
    s << indent << "twist_covariance[]" << std::endl;
    for (size_t i = 0; i < v.twist_covariance.size(); ++i)
    {
      s << indent << "  twist_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.twist_covariance[i]);
    }
    s << indent << "sa: ";
    Printer<float>::stream(s, indent + "  ", v.sa);
    s << indent << "ad: ";
    Printer<float>::stream(s, indent + "  ", v.ad);
    s << indent << "epsilon: ";
    Printer<float>::stream(s, indent + "  ", v.epsilon);
    s << indent << "accel_covariance[]" << std::endl;
    for (size_t i = 0; i < v.accel_covariance.size(); ++i)
    {
      s << indent << "  accel_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accel_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_DRIVER_MSGS_MESSAGE_FRENETSERRETSTATE2D_H
