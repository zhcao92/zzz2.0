// Generated by gencpp from file zzz_driver_msgs/ControlReport.msg
// DO NOT EDIT!


#ifndef ZZZ_DRIVER_MSGS_MESSAGE_CONTROLREPORT_H
#define ZZZ_DRIVER_MSGS_MESSAGE_CONTROLREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_driver_msgs
{
template <class ContainerAllocator>
struct ControlReport_
{
  typedef ControlReport_<ContainerAllocator> Type;

  ControlReport_()
    : throttle_available(false)
    , throttle_override(false)
    , throttle_report(0.0)
    , brake_available(false)
    , brake_override(false)
    , brake_report(0.0)
    , steer_available(false)
    , steer_override(false)
    , steer_report(0.0)  {
    }
  ControlReport_(const ContainerAllocator& _alloc)
    : throttle_available(false)
    , throttle_override(false)
    , throttle_report(0.0)
    , brake_available(false)
    , brake_override(false)
    , brake_report(0.0)
    , steer_available(false)
    , steer_override(false)
    , steer_report(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _throttle_available_type;
  _throttle_available_type throttle_available;

   typedef uint8_t _throttle_override_type;
  _throttle_override_type throttle_override;

   typedef float _throttle_report_type;
  _throttle_report_type throttle_report;

   typedef uint8_t _brake_available_type;
  _brake_available_type brake_available;

   typedef uint8_t _brake_override_type;
  _brake_override_type brake_override;

   typedef float _brake_report_type;
  _brake_report_type brake_report;

   typedef uint8_t _steer_available_type;
  _steer_available_type steer_available;

   typedef uint8_t _steer_override_type;
  _steer_override_type steer_override;

   typedef float _steer_report_type;
  _steer_report_type steer_report;





  typedef boost::shared_ptr< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> const> ConstPtr;

}; // struct ControlReport_

typedef ::zzz_driver_msgs::ControlReport_<std::allocator<void> > ControlReport;

typedef boost::shared_ptr< ::zzz_driver_msgs::ControlReport > ControlReportPtr;
typedef boost::shared_ptr< ::zzz_driver_msgs::ControlReport const> ControlReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_driver_msgs::ControlReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_driver_msgs::ControlReport_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::ControlReport_<ContainerAllocator2> & rhs)
{
  return lhs.throttle_available == rhs.throttle_available &&
    lhs.throttle_override == rhs.throttle_override &&
    lhs.throttle_report == rhs.throttle_report &&
    lhs.brake_available == rhs.brake_available &&
    lhs.brake_override == rhs.brake_override &&
    lhs.brake_report == rhs.brake_report &&
    lhs.steer_available == rhs.steer_available &&
    lhs.steer_override == rhs.steer_override &&
    lhs.steer_report == rhs.steer_report;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_driver_msgs::ControlReport_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::ControlReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cca91eb5bf039a027d362a7a7aae6512";
  }

  static const char* value(const ::zzz_driver_msgs::ControlReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcca91eb5bf039a02ULL;
  static const uint64_t static_value2 = 0x7d362a7a7aae6512ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_driver_msgs/ControlReport";
  }

  static const char* value(const ::zzz_driver_msgs::ControlReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Interface for vehicle control\n"
"\n"
"# ---------- Trottle ----------\n"
"# Throttle control by-wire enabled\n"
"bool throttle_available\n"
"# Throttle control overtaken\n"
"bool throttle_override \n"
"# Reported throttle level\n"
"float32 throttle_report\n"
"\n"
"# ---------- Brake ----------\n"
"# Braking control by-wire enabled\n"
"bool brake_available\n"
"# Braking control overtaken\n"
"bool brake_override\n"
"# Reported braking level\n"
"float32 brake_report\n"
"\n"
"# ---------- Steering ----------\n"
"# Steering control by-wire enabled\n"
"bool steer_available\n"
"# Steering control overtaken\n"
"bool steer_override\n"
"# Reported steering level\n"
"float32 steer_report\n"
;
  }

  static const char* value(const ::zzz_driver_msgs::ControlReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.throttle_available);
      stream.next(m.throttle_override);
      stream.next(m.throttle_report);
      stream.next(m.brake_available);
      stream.next(m.brake_override);
      stream.next(m.brake_report);
      stream.next(m.steer_available);
      stream.next(m.steer_override);
      stream.next(m.steer_report);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_driver_msgs::ControlReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_driver_msgs::ControlReport_<ContainerAllocator>& v)
  {
    s << indent << "throttle_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle_available);
    s << indent << "throttle_override: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle_override);
    s << indent << "throttle_report: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_report);
    s << indent << "brake_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_available);
    s << indent << "brake_override: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_override);
    s << indent << "brake_report: ";
    Printer<float>::stream(s, indent + "  ", v.brake_report);
    s << indent << "steer_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steer_available);
    s << indent << "steer_override: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steer_override);
    s << indent << "steer_report: ";
    Printer<float>::stream(s, indent + "  ", v.steer_report);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_DRIVER_MSGS_MESSAGE_CONTROLREPORT_H
