// Generated by gencpp from file zzz_driver_msgs/FrenetSerretState.msg
// DO NOT EDIT!


#ifndef ZZZ_DRIVER_MSGS_MESSAGE_FRENETSERRETSTATE_H
#define ZZZ_DRIVER_MSGS_MESSAGE_FRENETSERRETSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_driver_msgs
{
template <class ContainerAllocator>
struct FrenetSerretState_
{
  typedef FrenetSerretState_<ContainerAllocator> Type;

  FrenetSerretState_()
    : s(0.0)
    , d(0.0)
    , b(0.0)
    , psi_s(0.0)
    , psi_d(0.0)
    , psi_b(0.0)
    , pose_covariance()
    , vs(0.0)
    , vd(0.0)
    , vb(0.0)
    , omega_s(0.0)
    , omega_d(0.0)
    , omega_b(0.0)
    , twist_covariance()
    , sa(0.0)
    , ad(0.0)
    , ab(0.0)
    , epsilon_s(0.0)
    , epsilon_d(0.0)
    , epsilon_b(0.0)
    , accel_covariance()  {
      pose_covariance.assign(0.0);

      twist_covariance.assign(0.0);

      accel_covariance.assign(0.0);
  }
  FrenetSerretState_(const ContainerAllocator& _alloc)
    : s(0.0)
    , d(0.0)
    , b(0.0)
    , psi_s(0.0)
    , psi_d(0.0)
    , psi_b(0.0)
    , pose_covariance()
    , vs(0.0)
    , vd(0.0)
    , vb(0.0)
    , omega_s(0.0)
    , omega_d(0.0)
    , omega_b(0.0)
    , twist_covariance()
    , sa(0.0)
    , ad(0.0)
    , ab(0.0)
    , epsilon_s(0.0)
    , epsilon_d(0.0)
    , epsilon_b(0.0)
    , accel_covariance()  {
  (void)_alloc;
      pose_covariance.assign(0.0);

      twist_covariance.assign(0.0);

      accel_covariance.assign(0.0);
  }



   typedef float _s_type;
  _s_type s;

   typedef float _d_type;
  _d_type d;

   typedef float _b_type;
  _b_type b;

   typedef float _psi_s_type;
  _psi_s_type psi_s;

   typedef float _psi_d_type;
  _psi_d_type psi_d;

   typedef float _psi_b_type;
  _psi_b_type psi_b;

   typedef boost::array<float, 36>  _pose_covariance_type;
  _pose_covariance_type pose_covariance;

   typedef float _vs_type;
  _vs_type vs;

   typedef float _vd_type;
  _vd_type vd;

   typedef float _vb_type;
  _vb_type vb;

   typedef float _omega_s_type;
  _omega_s_type omega_s;

   typedef float _omega_d_type;
  _omega_d_type omega_d;

   typedef float _omega_b_type;
  _omega_b_type omega_b;

   typedef boost::array<float, 36>  _twist_covariance_type;
  _twist_covariance_type twist_covariance;

   typedef float _sa_type;
  _sa_type sa;

   typedef float _ad_type;
  _ad_type ad;

   typedef float _ab_type;
  _ab_type ab;

   typedef float _epsilon_s_type;
  _epsilon_s_type epsilon_s;

   typedef float _epsilon_d_type;
  _epsilon_d_type epsilon_d;

   typedef float _epsilon_b_type;
  _epsilon_b_type epsilon_b;

   typedef boost::array<float, 36>  _accel_covariance_type;
  _accel_covariance_type accel_covariance;





  typedef boost::shared_ptr< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> const> ConstPtr;

}; // struct FrenetSerretState_

typedef ::zzz_driver_msgs::FrenetSerretState_<std::allocator<void> > FrenetSerretState;

typedef boost::shared_ptr< ::zzz_driver_msgs::FrenetSerretState > FrenetSerretStatePtr;
typedef boost::shared_ptr< ::zzz_driver_msgs::FrenetSerretState const> FrenetSerretStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.d == rhs.d &&
    lhs.b == rhs.b &&
    lhs.psi_s == rhs.psi_s &&
    lhs.psi_d == rhs.psi_d &&
    lhs.psi_b == rhs.psi_b &&
    lhs.pose_covariance == rhs.pose_covariance &&
    lhs.vs == rhs.vs &&
    lhs.vd == rhs.vd &&
    lhs.vb == rhs.vb &&
    lhs.omega_s == rhs.omega_s &&
    lhs.omega_d == rhs.omega_d &&
    lhs.omega_b == rhs.omega_b &&
    lhs.twist_covariance == rhs.twist_covariance &&
    lhs.sa == rhs.sa &&
    lhs.ad == rhs.ad &&
    lhs.ab == rhs.ab &&
    lhs.epsilon_s == rhs.epsilon_s &&
    lhs.epsilon_d == rhs.epsilon_d &&
    lhs.epsilon_b == rhs.epsilon_b &&
    lhs.accel_covariance == rhs.accel_covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f03652b9c5f9bef88b4d78664fce1034";
  }

  static const char* value(const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf03652b9c5f9bef8ULL;
  static const uint64_t static_value2 = 0x8b4d78664fce1034ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_driver_msgs/FrenetSerretState";
  }

  static const char* value(const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes a state in 3d Frenet-Serret Frame\n"
"# Currently we don't use 3D frenet state actually\n"
"# For more information, refer to https://en.wikipedia.org/wiki/Frenet-Serret_formulas\n"
"\n"
"# 3D states\n"
"float32 s # Offset in tanget direction\n"
"float32 d # Offset in normal direction\n"
"float32 b # Offset in binormal direction\n"
"float32 psi_s\n"
"float32 psi_d\n"
"float32 psi_b\n"
"float32[36] pose_covariance\n"
"\n"
"# First order derivatives\n"
"float32 vs\n"
"float32 vd\n"
"float32 vb\n"
"float32 omega_s\n"
"float32 omega_d\n"
"float32 omega_b\n"
"float32[36] twist_covariance\n"
"\n"
"# Second order derivatives\n"
"float32 sa # prevent keyword conflict\n"
"float32 ad\n"
"float32 ab\n"
"float32 epsilon_s\n"
"float32 epsilon_d\n"
"float32 epsilon_b\n"
"float32[36] accel_covariance\n"
;
  }

  static const char* value(const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.d);
      stream.next(m.b);
      stream.next(m.psi_s);
      stream.next(m.psi_d);
      stream.next(m.psi_b);
      stream.next(m.pose_covariance);
      stream.next(m.vs);
      stream.next(m.vd);
      stream.next(m.vb);
      stream.next(m.omega_s);
      stream.next(m.omega_d);
      stream.next(m.omega_b);
      stream.next(m.twist_covariance);
      stream.next(m.sa);
      stream.next(m.ad);
      stream.next(m.ab);
      stream.next(m.epsilon_s);
      stream.next(m.epsilon_d);
      stream.next(m.epsilon_b);
      stream.next(m.accel_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrenetSerretState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_driver_msgs::FrenetSerretState_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "d: ";
    Printer<float>::stream(s, indent + "  ", v.d);
    s << indent << "b: ";
    Printer<float>::stream(s, indent + "  ", v.b);
    s << indent << "psi_s: ";
    Printer<float>::stream(s, indent + "  ", v.psi_s);
    s << indent << "psi_d: ";
    Printer<float>::stream(s, indent + "  ", v.psi_d);
    s << indent << "psi_b: ";
    Printer<float>::stream(s, indent + "  ", v.psi_b);
    s << indent << "pose_covariance[]" << std::endl;
    for (size_t i = 0; i < v.pose_covariance.size(); ++i)
    {
      s << indent << "  pose_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_covariance[i]);
    }
    s << indent << "vs: ";
    Printer<float>::stream(s, indent + "  ", v.vs);
    s << indent << "vd: ";
    Printer<float>::stream(s, indent + "  ", v.vd);
    s << indent << "vb: ";
    Printer<float>::stream(s, indent + "  ", v.vb);
    s << indent << "omega_s: ";
    Printer<float>::stream(s, indent + "  ", v.omega_s);
    s << indent << "omega_d: ";
    Printer<float>::stream(s, indent + "  ", v.omega_d);
    s << indent << "omega_b: ";
    Printer<float>::stream(s, indent + "  ", v.omega_b);
    s << indent << "twist_covariance[]" << std::endl;
    for (size_t i = 0; i < v.twist_covariance.size(); ++i)
    {
      s << indent << "  twist_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.twist_covariance[i]);
    }
    s << indent << "sa: ";
    Printer<float>::stream(s, indent + "  ", v.sa);
    s << indent << "ad: ";
    Printer<float>::stream(s, indent + "  ", v.ad);
    s << indent << "ab: ";
    Printer<float>::stream(s, indent + "  ", v.ab);
    s << indent << "epsilon_s: ";
    Printer<float>::stream(s, indent + "  ", v.epsilon_s);
    s << indent << "epsilon_d: ";
    Printer<float>::stream(s, indent + "  ", v.epsilon_d);
    s << indent << "epsilon_b: ";
    Printer<float>::stream(s, indent + "  ", v.epsilon_b);
    s << indent << "accel_covariance[]" << std::endl;
    for (size_t i = 0; i < v.accel_covariance.size(); ++i)
    {
      s << indent << "  accel_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accel_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_DRIVER_MSGS_MESSAGE_FRENETSERRETSTATE_H
