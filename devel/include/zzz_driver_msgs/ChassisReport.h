// Generated by gencpp from file zzz_driver_msgs/ChassisReport.msg
// DO NOT EDIT!


#ifndef ZZZ_DRIVER_MSGS_MESSAGE_CHASSISREPORT_H
#define ZZZ_DRIVER_MSGS_MESSAGE_CHASSISREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_driver_msgs
{
template <class ContainerAllocator>
struct ChassisReport_
{
  typedef ChassisReport_<ContainerAllocator> Type;

  ChassisReport_()
    : speed(0.0)
    , wheel_speed_fl(0)
    , wheel_speed_fr(0)
    , wheel_speed_rl(0)
    , wheel_speed_rr(0)  {
    }
  ChassisReport_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , wheel_speed_fl(0)
    , wheel_speed_fr(0)
    , wheel_speed_rl(0)
    , wheel_speed_rr(0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef int32_t _wheel_speed_fl_type;
  _wheel_speed_fl_type wheel_speed_fl;

   typedef int32_t _wheel_speed_fr_type;
  _wheel_speed_fr_type wheel_speed_fr;

   typedef int32_t _wheel_speed_rl_type;
  _wheel_speed_rl_type wheel_speed_rl;

   typedef int32_t _wheel_speed_rr_type;
  _wheel_speed_rr_type wheel_speed_rr;





  typedef boost::shared_ptr< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisReport_

typedef ::zzz_driver_msgs::ChassisReport_<std::allocator<void> > ChassisReport;

typedef boost::shared_ptr< ::zzz_driver_msgs::ChassisReport > ChassisReportPtr;
typedef boost::shared_ptr< ::zzz_driver_msgs::ChassisReport const> ChassisReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.wheel_speed_fl == rhs.wheel_speed_fl &&
    lhs.wheel_speed_fr == rhs.wheel_speed_fr &&
    lhs.wheel_speed_rl == rhs.wheel_speed_rl &&
    lhs.wheel_speed_rr == rhs.wheel_speed_rr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator1> & lhs, const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0a29ac7eeffeb332f52a08cd1c9e8d0";
  }

  static const char* value(const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0a29ac7eeffeb33ULL;
  static const uint64_t static_value2 = 0x2f52a08cd1c9e8d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_driver_msgs/ChassisReport";
  }

  static const char* value(const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Information reported by chassis components\n"
"\n"
"# Vehicle speed\n"
"float32 speed\n"
"\n"
"# Wheel speed (rad/s)\n"
"int32 wheel_speed_fl\n"
"int32 wheel_speed_fr\n"
"int32 wheel_speed_rl\n"
"int32 wheel_speed_rr\n"
;
  }

  static const char* value(const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.wheel_speed_fl);
      stream.next(m.wheel_speed_fr);
      stream.next(m.wheel_speed_rl);
      stream.next(m.wheel_speed_rr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_driver_msgs::ChassisReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_driver_msgs::ChassisReport_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "wheel_speed_fl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheel_speed_fl);
    s << indent << "wheel_speed_fr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheel_speed_fr);
    s << indent << "wheel_speed_rl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheel_speed_rl);
    s << indent << "wheel_speed_rr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheel_speed_rr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_DRIVER_MSGS_MESSAGE_CHASSISREPORT_H
