// Generated by gencpp from file zzz_navigation_msgs/LaneSituation.msg
// DO NOT EDIT!


#ifndef ZZZ_NAVIGATION_MSGS_MESSAGE_LANESITUATION_H
#define ZZZ_NAVIGATION_MSGS_MESSAGE_LANESITUATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_navigation_msgs
{
template <class ContainerAllocator>
struct LaneSituation_
{
  typedef LaneSituation_<ContainerAllocator> Type;

  LaneSituation_()
    : s(0.0)
    , length(0.0)
    , situation_type(0)
    , reduced_max_speed(0.0)
    , comments()  {
    }
  LaneSituation_(const ContainerAllocator& _alloc)
    : s(0.0)
    , length(0.0)
    , situation_type(0)
    , reduced_max_speed(0.0)
    , comments(_alloc)  {
  (void)_alloc;
    }



   typedef float _s_type;
  _s_type s;

   typedef float _length_type;
  _length_type length;

   typedef uint8_t _situation_type_type;
  _situation_type_type situation_type;

   typedef float _reduced_max_speed_type;
  _reduced_max_speed_type reduced_max_speed;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _comments_type;
  _comments_type comments;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SITUATION_NOT_SPECIFIED)
  #undef SITUATION_NOT_SPECIFIED
#endif
#if defined(_WIN32) && defined(SITUATION_BLOCKED)
  #undef SITUATION_BLOCKED
#endif
#if defined(_WIN32) && defined(SITUATION_CROSSWALK)
  #undef SITUATION_CROSSWALK
#endif
#if defined(_WIN32) && defined(SITUATION_REDUCE_SPEED)
  #undef SITUATION_REDUCE_SPEED
#endif

  enum {
    SITUATION_NOT_SPECIFIED = 0u,
    SITUATION_BLOCKED = 1u,
    SITUATION_CROSSWALK = 2u,
    SITUATION_REDUCE_SPEED = 3u,
  };


  typedef boost::shared_ptr< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> const> ConstPtr;

}; // struct LaneSituation_

typedef ::zzz_navigation_msgs::LaneSituation_<std::allocator<void> > LaneSituation;

typedef boost::shared_ptr< ::zzz_navigation_msgs::LaneSituation > LaneSituationPtr;
typedef boost::shared_ptr< ::zzz_navigation_msgs::LaneSituation const> LaneSituationConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator1> & lhs, const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.length == rhs.length &&
    lhs.situation_type == rhs.situation_type &&
    lhs.reduced_max_speed == rhs.reduced_max_speed &&
    lhs.comments == rhs.comments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator1> & lhs, const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d4a4be92b4d0a3851a0b3bbd6d00866";
  }

  static const char* value(const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d4a4be92b4d0a38ULL;
  static const uint64_t static_value2 = 0x51a0b3bbd6d00866ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_navigation_msgs/LaneSituation";
  }

  static const char* value(const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message store any uncommon situations on a road\n"
"# Situation can be a map specified object or fresh events\n"
"\n"
"# The location of the situation in a lane (distance from lane start)\n"
"float32 s\n"
"\n"
"# How long this situation affect along the lane.\n"
"# Inf means take effect until lane ends\n"
"float32 length\n"
"\n"
"# Type of situation\n"
"uint8 situation_type\n"
"uint8 SITUATION_NOT_SPECIFIED = 0\n"
"uint8 SITUATION_BLOCKED = 1 # Something blocked this lane, vehicle should stop here\n"
"uint8 SITUATION_CROSSWALK = 2 # Crosswalk\n"
"uint8 SITUATION_REDUCE_SPEED = 3 # Reducing speed is required. This can be due to speed bump, construction, or school bus stop, etc\n"
"\n"
"# ------- Situation information -------\n"
"# The new speed limit. Zero means the vehicle is required to stop\n"
"float32 reduced_max_speed\n"
"\n"
"# Additional information\n"
"string comments\n"
;
  }

  static const char* value(const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.length);
      stream.next(m.situation_type);
      stream.next(m.reduced_max_speed);
      stream.next(m.comments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneSituation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_navigation_msgs::LaneSituation_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "situation_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.situation_type);
    s << indent << "reduced_max_speed: ";
    Printer<float>::stream(s, indent + "  ", v.reduced_max_speed);
    s << indent << "comments: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.comments);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_NAVIGATION_MSGS_MESSAGE_LANESITUATION_H
