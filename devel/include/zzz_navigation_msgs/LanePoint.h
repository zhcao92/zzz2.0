// Generated by gencpp from file zzz_navigation_msgs/LanePoint.msg
// DO NOT EDIT!


#ifndef ZZZ_NAVIGATION_MSGS_MESSAGE_LANEPOINT_H
#define ZZZ_NAVIGATION_MSGS_MESSAGE_LANEPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace zzz_navigation_msgs
{
template <class ContainerAllocator>
struct LanePoint_
{
  typedef LanePoint_<ContainerAllocator> Type;

  LanePoint_()
    : position()
    , s(0.0)
    , slope(0.0)
    , curvature(0.0)
    , tangent(0.0)
    , width(0.0)  {
    }
  LanePoint_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , s(0.0)
    , slope(0.0)
    , curvature(0.0)
    , tangent(0.0)
    , width(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _s_type;
  _s_type s;

   typedef float _slope_type;
  _slope_type slope;

   typedef float _curvature_type;
  _curvature_type curvature;

   typedef float _tangent_type;
  _tangent_type tangent;

   typedef float _width_type;
  _width_type width;





  typedef boost::shared_ptr< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> const> ConstPtr;

}; // struct LanePoint_

typedef ::zzz_navigation_msgs::LanePoint_<std::allocator<void> > LanePoint;

typedef boost::shared_ptr< ::zzz_navigation_msgs::LanePoint > LanePointPtr;
typedef boost::shared_ptr< ::zzz_navigation_msgs::LanePoint const> LanePointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator1> & lhs, const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.s == rhs.s &&
    lhs.slope == rhs.slope &&
    lhs.curvature == rhs.curvature &&
    lhs.tangent == rhs.tangent &&
    lhs.width == rhs.width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator1> & lhs, const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad50465050a73449457070f73ee72c69";
  }

  static const char* value(const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad50465050a73449ULL;
  static const uint64_t static_value2 = 0x457070f73ee72c69ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_navigation_msgs/LanePoint";
  }

  static const char* value(const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describe a road point from polyline represented lane\n"
"\n"
"# The 3D position of the lane point\n"
"geometry_msgs/Point position\n"
"\n"
"# ----- Other useful information -----\n"
"# Distance from lane start to current point. The distance of the first point should be zero\n"
"float32 s\n"
"\n"
"# Slope at current position of the road\n"
"# Can be used to control the throttle\n"
"float32 slope\n"
"\n"
"# Road curvature at current position of the road\n"
"# Can be used to slow down before turning\n"
"float32 curvature\n"
"\n"
"# The yaw angle of tangent line (in radian)\n"
"float32 tangent\n"
"\n"
"# Road width at current position\n"
"# Can be used to determine the carefulness of driving\n"
"float32 width\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.s);
      stream.next(m.slope);
      stream.next(m.curvature);
      stream.next(m.tangent);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LanePoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_navigation_msgs::LanePoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_navigation_msgs::LanePoint_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "slope: ";
    Printer<float>::stream(s, indent + "  ", v.slope);
    s << indent << "curvature: ";
    Printer<float>::stream(s, indent + "  ", v.curvature);
    s << indent << "tangent: ";
    Printer<float>::stream(s, indent + "  ", v.tangent);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_NAVIGATION_MSGS_MESSAGE_LANEPOINT_H
