// Generated by gencpp from file zzz_navigation_msgs/MapString.msg
// DO NOT EDIT!


#ifndef ZZZ_NAVIGATION_MSGS_MESSAGE_MAPSTRING_H
#define ZZZ_NAVIGATION_MSGS_MESSAGE_MAPSTRING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace zzz_navigation_msgs
{
template <class ContainerAllocator>
struct MapString_
{
  typedef MapString_<ContainerAllocator> Type;

  MapString_()
    : header()
    , map_type(0)
    , content()  {
    }
  MapString_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , map_type(0)
    , content(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _map_type_type;
  _map_type_type map_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _content_type;
  _content_type content;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MAP_UNKNOWN)
  #undef MAP_UNKNOWN
#endif
#if defined(_WIN32) && defined(MAP_OPENDRIVE)
  #undef MAP_OPENDRIVE
#endif
#if defined(_WIN32) && defined(MAP_SUMO)
  #undef MAP_SUMO
#endif

  enum {
    MAP_UNKNOWN = 0u,
    MAP_OPENDRIVE = 1u,
    MAP_SUMO = 2u,
  };


  typedef boost::shared_ptr< ::zzz_navigation_msgs::MapString_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_navigation_msgs::MapString_<ContainerAllocator> const> ConstPtr;

}; // struct MapString_

typedef ::zzz_navigation_msgs::MapString_<std::allocator<void> > MapString;

typedef boost::shared_ptr< ::zzz_navigation_msgs::MapString > MapStringPtr;
typedef boost::shared_ptr< ::zzz_navigation_msgs::MapString const> MapStringConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_navigation_msgs::MapString_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_navigation_msgs::MapString_<ContainerAllocator1> & lhs, const ::zzz_navigation_msgs::MapString_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.map_type == rhs.map_type &&
    lhs.content == rhs.content;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_navigation_msgs::MapString_<ContainerAllocator1> & lhs, const ::zzz_navigation_msgs::MapString_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_navigation_msgs::MapString_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_navigation_msgs::MapString_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_navigation_msgs::MapString_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >
{
  static const char* value()
  {
    return "629c6319a47bf7a0c54d99f0ee184a58";
  }

  static const char* value(const ::zzz_navigation_msgs::MapString_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x629c6319a47bf7a0ULL;
  static const uint64_t static_value2 = 0xc54d99f0ee184a58ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_navigation_msgs/MapString";
  }

  static const char* value(const ::zzz_navigation_msgs::MapString_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used for loading geologic map from string content\n"
"\n"
"Header header\n"
"\n"
"# Map type enum\n"
"uint8 map_type\n"
"uint8 MAP_UNKNOWN = 0\n"
"uint8 MAP_OPENDRIVE = 1\n"
"uint8 MAP_SUMO = 2\n"
"\n"
"# Map content. It can be encoded, depending on the map_type\n"
"string content\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::zzz_navigation_msgs::MapString_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.map_type);
      stream.next(m.content);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapString_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_navigation_msgs::MapString_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_navigation_msgs::MapString_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "map_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.map_type);
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.content);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_NAVIGATION_MSGS_MESSAGE_MAPSTRING_H
