// Generated by gencpp from file zzz_navigation_msgs/ReroutingRequest.msg
// DO NOT EDIT!


#ifndef ZZZ_NAVIGATION_MSGS_MESSAGE_REROUTINGREQUEST_H
#define ZZZ_NAVIGATION_MSGS_MESSAGE_REROUTINGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_navigation_msgs
{
template <class ContainerAllocator>
struct ReroutingRequest_
{
  typedef ReroutingRequest_<ContainerAllocator> Type;

  ReroutingRequest_()
    : reason(0)  {
    }
  ReroutingRequest_(const ContainerAllocator& _alloc)
    : reason(0)  {
  (void)_alloc;
    }



   typedef uint8_t _reason_type;
  _reason_type reason;





  typedef boost::shared_ptr< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ReroutingRequest_

typedef ::zzz_navigation_msgs::ReroutingRequest_<std::allocator<void> > ReroutingRequest;

typedef boost::shared_ptr< ::zzz_navigation_msgs::ReroutingRequest > ReroutingRequestPtr;
typedef boost::shared_ptr< ::zzz_navigation_msgs::ReroutingRequest const> ReroutingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator1> & lhs, const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.reason == rhs.reason;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator1> & lhs, const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d0cd4d064c4100824cd84b5a5934c3d";
  }

  static const char* value(const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d0cd4d064c41008ULL;
  static const uint64_t static_value2 = 0x24cd84b5a5934c3dULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_navigation_msgs/ReroutingRequest";
  }

  static const char* value(const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message represent request for rerouting.\n"
"\n"
"# The reason for rerouting request\n"
"uint8 reason\n"
"\n"
"# The destination for the rerouting request\n"
"# sensor_msgs/NavSatFix destination\n"
;
  }

  static const char* value(const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reason);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReroutingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_navigation_msgs::ReroutingRequest_<ContainerAllocator>& v)
  {
    s << indent << "reason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reason);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_NAVIGATION_MSGS_MESSAGE_REROUTINGREQUEST_H
