// Generated by gencpp from file zzz_perception_msgs/LaneDetection.msg
// DO NOT EDIT!


#ifndef ZZZ_PERCEPTION_MSGS_MESSAGE_LANEDETECTION_H
#define ZZZ_PERCEPTION_MSGS_MESSAGE_LANEDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_perception_msgs
{
template <class ContainerAllocator>
struct LaneDetection_
{
  typedef LaneDetection_<ContainerAllocator> Type;

  LaneDetection_()
    : center_line_coeffs()
    , end_location(0.0)  {
    }
  LaneDetection_(const ContainerAllocator& _alloc)
    : center_line_coeffs(_alloc)
    , end_location(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _center_line_coeffs_type;
  _center_line_coeffs_type center_line_coeffs;

   typedef float _end_location_type;
  _end_location_type end_location;





  typedef boost::shared_ptr< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> const> ConstPtr;

}; // struct LaneDetection_

typedef ::zzz_perception_msgs::LaneDetection_<std::allocator<void> > LaneDetection;

typedef boost::shared_ptr< ::zzz_perception_msgs::LaneDetection > LaneDetectionPtr;
typedef boost::shared_ptr< ::zzz_perception_msgs::LaneDetection const> LaneDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator1> & lhs, const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator2> & rhs)
{
  return lhs.center_line_coeffs == rhs.center_line_coeffs &&
    lhs.end_location == rhs.end_location;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator1> & lhs, const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "344c276f64db9a8b75d28e79a5fc0818";
  }

  static const char* value(const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x344c276f64db9a8bULL;
  static const uint64_t static_value2 = 0x75d28e79a5fc0818ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_perception_msgs/LaneDetection";
  }

  static const char* value(const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Geometric representation of center line of the lane\n"
"float32[] center_line_coeffs\n"
"\n"
"# The location at the end of the line\n"
"float32 end_location\n"
;
  }

  static const char* value(const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center_line_coeffs);
      stream.next(m.end_location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_perception_msgs::LaneDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_perception_msgs::LaneDetection_<ContainerAllocator>& v)
  {
    s << indent << "center_line_coeffs[]" << std::endl;
    for (size_t i = 0; i < v.center_line_coeffs.size(); ++i)
    {
      s << indent << "  center_line_coeffs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center_line_coeffs[i]);
    }
    s << indent << "end_location: ";
    Printer<float>::stream(s, indent + "  ", v.end_location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_PERCEPTION_MSGS_MESSAGE_LANEDETECTION_H
