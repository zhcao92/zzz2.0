// Generated by gencpp from file zzz_perception_msgs/ObjectClass.msg
// DO NOT EDIT!


#ifndef ZZZ_PERCEPTION_MSGS_MESSAGE_OBJECTCLASS_H
#define ZZZ_PERCEPTION_MSGS_MESSAGE_OBJECTCLASS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_perception_msgs
{
template <class ContainerAllocator>
struct ObjectClass_
{
  typedef ObjectClass_<ContainerAllocator> Type;

  ObjectClass_()
    : classid(0)
    , score(0.0)
    , comments()  {
    }
  ObjectClass_(const ContainerAllocator& _alloc)
    : classid(0)
    , score(0.0)
    , comments(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _classid_type;
  _classid_type classid;

   typedef float _score_type;
  _score_type score;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _comments_type;
  _comments_type comments;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(UNKNOWN_DYNAMIC)
  #undef UNKNOWN_DYNAMIC
#endif
#if defined(_WIN32) && defined(UNKNOWN_STATIC)
  #undef UNKNOWN_STATIC
#endif
#if defined(_WIN32) && defined(VEHICLE)
  #undef VEHICLE
#endif
#if defined(_WIN32) && defined(VEHICLE_PASSENGER)
  #undef VEHICLE_PASSENGER
#endif
#if defined(_WIN32) && defined(VEHICEL_VAN)
  #undef VEHICEL_VAN
#endif
#if defined(_WIN32) && defined(VEHICLE_TRUCK)
  #undef VEHICLE_TRUCK
#endif
#if defined(_WIN32) && defined(VEHICLE_BUS)
  #undef VEHICLE_BUS
#endif
#if defined(_WIN32) && defined(VEHICLE_SCHOOLBUS)
  #undef VEHICLE_SCHOOLBUS
#endif
#if defined(_WIN32) && defined(VEHICLE_SCHOOLBUS_STOP)
  #undef VEHICLE_SCHOOLBUS_STOP
#endif
#if defined(_WIN32) && defined(VEHICLE_EMERGENCY)
  #undef VEHICLE_EMERGENCY
#endif
#if defined(_WIN32) && defined(VEHICLE_EMERGENCY_POLICE)
  #undef VEHICLE_EMERGENCY_POLICE
#endif
#if defined(_WIN32) && defined(VEHICLE_EMERGENCY_POLICE_FLASH)
  #undef VEHICLE_EMERGENCY_POLICE_FLASH
#endif
#if defined(_WIN32) && defined(VEHICLE_EMERGENCY_FIRE)
  #undef VEHICLE_EMERGENCY_FIRE
#endif
#if defined(_WIN32) && defined(VEHICLE_EMERGENCY_FIRE_FLASH)
  #undef VEHICLE_EMERGENCY_FIRE_FLASH
#endif
#if defined(_WIN32) && defined(VEHICLE_EMERGENCY_CIVIL)
  #undef VEHICLE_EMERGENCY_CIVIL
#endif
#if defined(_WIN32) && defined(VEHICLE_EMERGENCY_CIVIL_FLASH)
  #undef VEHICLE_EMERGENCY_CIVIL_FLASH
#endif
#if defined(_WIN32) && defined(HUMAN)
  #undef HUMAN
#endif
#if defined(_WIN32) && defined(HUMAN_PEDESTRIAN)
  #undef HUMAN_PEDESTRIAN
#endif
#if defined(_WIN32) && defined(HUMAN_ROADWORKER)
  #undef HUMAN_ROADWORKER
#endif
#if defined(_WIN32) && defined(CYCLIST)
  #undef CYCLIST
#endif
#if defined(_WIN32) && defined(CYCLIST_BICYCLE)
  #undef CYCLIST_BICYCLE
#endif
#if defined(_WIN32) && defined(CYCLIST_MOTORCYCLE)
  #undef CYCLIST_MOTORCYCLE
#endif
#if defined(_WIN32) && defined(CYCLIST_TRICYCLE)
  #undef CYCLIST_TRICYCLE
#endif
#if defined(_WIN32) && defined(ANIMAL)
  #undef ANIMAL
#endif
#if defined(_WIN32) && defined(ANIMAL_DOGLIKE)
  #undef ANIMAL_DOGLIKE
#endif
#if defined(_WIN32) && defined(ANIMAL_DEERLIKE)
  #undef ANIMAL_DEERLIKE
#endif
#if defined(_WIN32) && defined(ANIMAL_COWLIKE)
  #undef ANIMAL_COWLIKE
#endif
#if defined(_WIN32) && defined(ROAD_OBJECT)
  #undef ROAD_OBJECT
#endif
#if defined(_WIN32) && defined(ROAD_TRAFFIC_CONE)
  #undef ROAD_TRAFFIC_CONE
#endif
#if defined(_WIN32) && defined(ROAD_TRAFFIC_BLOCKER)
  #undef ROAD_TRAFFIC_BLOCKER
#endif
#if defined(_WIN32) && defined(ROADSIDE_OBJECT)
  #undef ROADSIDE_OBJECT
#endif
#if defined(_WIN32) && defined(ROADSIDE_TRAFFIC_LIGHT)
  #undef ROADSIDE_TRAFFIC_LIGHT
#endif
#if defined(_WIN32) && defined(ROADSIDE_TRAFFIC_SIGN)
  #undef ROADSIDE_TRAFFIC_SIGN
#endif
#if defined(_WIN32) && defined(ROADSIDE_TREE)
  #undef ROADSIDE_TREE
#endif
#if defined(_WIN32) && defined(LEVEL_MASK_0)
  #undef LEVEL_MASK_0
#endif
#if defined(_WIN32) && defined(LEVEL_MASK_1)
  #undef LEVEL_MASK_1
#endif
#if defined(_WIN32) && defined(LEVEL_MASK_2)
  #undef LEVEL_MASK_2
#endif
#if defined(_WIN32) && defined(LEVEL_MASK_3)
  #undef LEVEL_MASK_3
#endif

  enum {
    UNKNOWN = 0u,
    UNKNOWN_DYNAMIC = 16u,
    UNKNOWN_STATIC = 32u,
    VEHICLE = 1u,
    VEHICLE_PASSENGER = 17u,
    VEHICEL_VAN = 33u,
    VEHICLE_TRUCK = 49u,
    VEHICLE_BUS = 65u,
    VEHICLE_SCHOOLBUS = 321u,
    VEHICLE_SCHOOLBUS_STOP = 4417u,
    VEHICLE_EMERGENCY = 81u,
    VEHICLE_EMERGENCY_POLICE = 337u,
    VEHICLE_EMERGENCY_POLICE_FLASH = 4433u,
    VEHICLE_EMERGENCY_FIRE = 593u,
    VEHICLE_EMERGENCY_FIRE_FLASH = 4689u,
    VEHICLE_EMERGENCY_CIVIL = 849u,
    VEHICLE_EMERGENCY_CIVIL_FLASH = 4945u,
    HUMAN = 2u,
    HUMAN_PEDESTRIAN = 18u,
    HUMAN_ROADWORKER = 34u,
    CYCLIST = 3u,
    CYCLIST_BICYCLE = 19u,
    CYCLIST_MOTORCYCLE = 35u,
    CYCLIST_TRICYCLE = 51u,
    ANIMAL = 4u,
    ANIMAL_DOGLIKE = 20u,
    ANIMAL_DEERLIKE = 36u,
    ANIMAL_COWLIKE = 52u,
    ROAD_OBJECT = 5u,
    ROAD_TRAFFIC_CONE = 21u,
    ROAD_TRAFFIC_BLOCKER = 37u,
    ROADSIDE_OBJECT = 6u,
    ROADSIDE_TRAFFIC_LIGHT = 22u,
    ROADSIDE_TRAFFIC_SIGN = 38u,
    ROADSIDE_TREE = 54u,
    LEVEL_MASK_0 = 15u,
    LEVEL_MASK_1 = 255u,
    LEVEL_MASK_2 = 4095u,
    LEVEL_MASK_3 = 65535u,
  };


  typedef boost::shared_ptr< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectClass_

typedef ::zzz_perception_msgs::ObjectClass_<std::allocator<void> > ObjectClass;

typedef boost::shared_ptr< ::zzz_perception_msgs::ObjectClass > ObjectClassPtr;
typedef boost::shared_ptr< ::zzz_perception_msgs::ObjectClass const> ObjectClassConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator1> & lhs, const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator2> & rhs)
{
  return lhs.classid == rhs.classid &&
    lhs.score == rhs.score &&
    lhs.comments == rhs.comments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator1> & lhs, const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "991b8d3acc01ea523d3201482c907466";
  }

  static const char* value(const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x991b8d3acc01ea52ULL;
  static const uint64_t static_value2 = 0x3d3201482c907466ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_perception_msgs/ObjectClass";
  }

  static const char* value(const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The size of (in meters) the bounding box surrounding the object's center pose.\n"
"\n"
"# The unique numeric classification ID of object detected\n"
"uint32 classid\n"
"\n"
"# The probability or confidence value of the detected object. By convention, this value should lie in the range 0~1.\n"
"float32 score\n"
"\n"
"# Other information about the class (e.g. class name). Only for debug\n"
"string comments\n"
"\n"
"##############################################################\n"
"###   Here is a hierarchical table of all included types   ###\n"
"##############################################################\n"
"# Hierarchy is encoded in a 32-bit integer. Each 8 bit stand for a level, and leftmost 8 bit is the top level\n"
"\n"
"uint32 UNKNOWN                          = 0     # 0x0000\n"
"uint32 UNKNOWN_DYNAMIC                  = 16    # 0x0010\n"
"uint32 UNKNOWN_STATIC                   = 32    # 0x0020\n"
"\n"
"uint32 VEHICLE                          = 1     # 0x0001\n"
"uint32 VEHICLE_PASSENGER                = 17    # 0x0011, normal passenger_vehicles\n"
"uint32 VEHICEL_VAN                      = 33    # 0x0021\n"
"uint32 VEHICLE_TRUCK                    = 49    # 0x0031\n"
"uint32 VEHICLE_BUS                      = 65    # 0x0041\n"
"uint32 VEHICLE_SCHOOLBUS                = 321   # 0x0141\n"
"uint32 VEHICLE_SCHOOLBUS_STOP           = 4417  # 0x1141\n"
"uint32 VEHICLE_EMERGENCY                = 81    # 0x0051, emergency vehicles, including \n"
"uint32 VEHICLE_EMERGENCY_POLICE         = 337   # 0x0151\n"
"uint32 VEHICLE_EMERGENCY_POLICE_FLASH   = 4433  # 0x1151\n"
"uint32 VEHICLE_EMERGENCY_FIRE           = 593   # 0x0251\n"
"uint32 VEHICLE_EMERGENCY_FIRE_FLASH     = 4689  # 0x1251\n"
"uint32 VEHICLE_EMERGENCY_CIVIL          = 849   # 0x0351, including utility vehicle and tow trucks\n"
"uint32 VEHICLE_EMERGENCY_CIVIL_FLASH    = 4945  # 0x1351\n"
"\n"
"uint32 HUMAN                            = 2     # 0x0002\n"
"uint32 HUMAN_PEDESTRIAN                 = 18    # 0x0012\n"
"uint32 HUMAN_ROADWORKER                 = 34    # 0x0022\n"
"\n"
"uint32 CYCLIST                          = 3     # 0x0003\n"
"uint32 CYCLIST_BICYCLE                  = 19    # 0x0013\n"
"uint32 CYCLIST_MOTORCYCLE               = 35    # 0x0023\n"
"uint32 CYCLIST_TRICYCLE                 = 51    # 0x0033\n"
"\n"
"uint32 ANIMAL                           = 4     # 0x0004\n"
"uint32 ANIMAL_DOGLIKE                   = 20    # 0x0014, includes dog, cat, wolf, etc.\n"
"uint32 ANIMAL_DEERLIKE                  = 36    # 0x0024, includes deer, etc.\n"
"uint32 ANIMAL_COWLIKE                   = 52    # 0x0034, includes cow, horse, pig, etc.\n"
"\n"
"uint32 ROAD_OBJECT                      = 5     # 0x0005, objects in road area\n"
"uint32 ROAD_TRAFFIC_CONE                = 21    # 0x0015, traffic cone\n"
"uint32 ROAD_TRAFFIC_BLOCKER             = 37    # 0x0025, traffic blocker, e.g. \"Road Closed\" sign\n"
"\n"
"uint32 ROADSIDE_OBJECT                  = 6     # 0x0006, objects in road side\n"
"uint32 ROADSIDE_TRAFFIC_LIGHT           = 22    # 0x0016\n"
"uint32 ROADSIDE_TRAFFIC_SIGN            = 38    # 0x0026\n"
"uint32 ROADSIDE_TREE                    = 54    # 0x0036, including all roadside vegetation\n"
"\n"
"uint32 LEVEL_MASK_0                     = 15    # 0x000f\n"
"uint32 LEVEL_MASK_1                     = 255   # 0x00ff\n"
"uint32 LEVEL_MASK_2                     = 4095  # 0x0fff\n"
"uint32 LEVEL_MASK_3                     = 65535 # 0xffff\n"
;
  }

  static const char* value(const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.classid);
      stream.next(m.score);
      stream.next(m.comments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectClass_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_perception_msgs::ObjectClass_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_perception_msgs::ObjectClass_<ContainerAllocator>& v)
  {
    s << indent << "classid: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.classid);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "comments: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.comments);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_PERCEPTION_MSGS_MESSAGE_OBJECTCLASS_H
