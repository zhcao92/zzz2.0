// Generated by gencpp from file zzz_perception_msgs/BoundingBox.msg
// DO NOT EDIT!


#ifndef ZZZ_PERCEPTION_MSGS_MESSAGE_BOUNDINGBOX_H
#define ZZZ_PERCEPTION_MSGS_MESSAGE_BOUNDINGBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovariance.h>
#include <zzz_perception_msgs/DimensionWithCovariance.h>

namespace zzz_perception_msgs
{
template <class ContainerAllocator>
struct BoundingBox_
{
  typedef BoundingBox_<ContainerAllocator> Type;

  BoundingBox_()
    : pose()
    , dimension()  {
    }
  BoundingBox_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , dimension(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::zzz_perception_msgs::DimensionWithCovariance_<ContainerAllocator>  _dimension_type;
  _dimension_type dimension;





  typedef boost::shared_ptr< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox_

typedef ::zzz_perception_msgs::BoundingBox_<std::allocator<void> > BoundingBox;

typedef boost::shared_ptr< ::zzz_perception_msgs::BoundingBox > BoundingBoxPtr;
typedef boost::shared_ptr< ::zzz_perception_msgs::BoundingBox const> BoundingBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator1> & lhs, const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.dimension == rhs.dimension;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator1> & lhs, const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b86d93b46fb62aa8e76866d776c9de52";
  }

  static const char* value(const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb86d93b46fb62aa8ULL;
  static const uint64_t static_value2 = 0xe76866d776c9de52ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_perception_msgs/BoundingBox";
  }

  static const char* value(const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# A 3D bounding box that can be positioned and rotated about its center (6 DOF). Dimensions of this box are in meters\n"
"\n"
"# The position and orientation of the rigid body center\n"
"geometry_msgs/PoseWithCovariance pose\n"
"\n"
"# The size of (in meters) the bounding box surrounding the object's center pose.\n"
"DimensionWithCovariance dimension\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: zzz_perception_msgs/DimensionWithCovariance\n"
"# Describing the size object in 3D space (in meters) with uncertainty\n"
"\n"
"float64 length_x # length(longitudinal direction)\n"
"float64 length_y # width(lateral direction)\n"
"float64 length_z # height\n"
"\n"
"# Row-major representation of the 3x3 covariance matrix\n"
"# In order, the parameters are: (length_x, length_y, length_z)\n"
"float64[9] covariance\n"
;
  }

  static const char* value(const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.dimension);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_perception_msgs::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_perception_msgs::BoundingBox_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "dimension: ";
    s << std::endl;
    Printer< ::zzz_perception_msgs::DimensionWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.dimension);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_PERCEPTION_MSGS_MESSAGE_BOUNDINGBOX_H
