// Generated by gencpp from file zzz_perception_msgs/Pose2DWithCovariance.msg
// DO NOT EDIT!


#ifndef ZZZ_PERCEPTION_MSGS_MESSAGE_POSE2DWITHCOVARIANCE_H
#define ZZZ_PERCEPTION_MSGS_MESSAGE_POSE2DWITHCOVARIANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_perception_msgs
{
template <class ContainerAllocator>
struct Pose2DWithCovariance_
{
  typedef Pose2DWithCovariance_<ContainerAllocator> Type;

  Pose2DWithCovariance_()
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , covariance()  {
      covariance.assign(0.0);
  }
  Pose2DWithCovariance_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , covariance()  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef boost::array<double, 9>  _covariance_type;
  _covariance_type covariance;





  typedef boost::shared_ptr< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> const> ConstPtr;

}; // struct Pose2DWithCovariance_

typedef ::zzz_perception_msgs::Pose2DWithCovariance_<std::allocator<void> > Pose2DWithCovariance;

typedef boost::shared_ptr< ::zzz_perception_msgs::Pose2DWithCovariance > Pose2DWithCovariancePtr;
typedef boost::shared_ptr< ::zzz_perception_msgs::Pose2DWithCovariance const> Pose2DWithCovarianceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator1> & lhs, const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta &&
    lhs.covariance == rhs.covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator1> & lhs, const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5a368996278e1e9cb10088f43ec5e39";
  }

  static const char* value(const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5a368996278e1e9ULL;
  static const uint64_t static_value2 = 0xcb10088f43ec5e39ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_perception_msgs/Pose2DWithCovariance";
  }

  static const char* value(const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 x # or u in u-v plane\n"
"float64 y # or v in u-v plane\n"
"float64 theta\n"
"\n"
"# Row-major representation of the 3x3 covariance matrix\n"
"# In order, the parameters are: (x, y, theta)\n"
"float64[9] covariance\n"
;
  }

  static const char* value(const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose2DWithCovariance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_perception_msgs::Pose2DWithCovariance_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_PERCEPTION_MSGS_MESSAGE_POSE2DWITHCOVARIANCE_H
