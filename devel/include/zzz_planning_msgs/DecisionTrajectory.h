// Generated by gencpp from file zzz_planning_msgs/DecisionTrajectory.msg
// DO NOT EDIT!


#ifndef ZZZ_PLANNING_MSGS_MESSAGE_DECISIONTRAJECTORY_H
#define ZZZ_PLANNING_MSGS_MESSAGE_DECISIONTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_msgs/Path.h>

namespace zzz_planning_msgs
{
template <class ContainerAllocator>
struct DecisionTrajectory_
{
  typedef DecisionTrajectory_<ContainerAllocator> Type;

  DecisionTrajectory_()
    : header()
    , trajectory()
    , desired_speed()
    , desired_acc(0.0)
    , RLS_action(0.0)
    , x()
    , y()
    , z()
    , theta()
    , kappa()
    , s()
    , dkappa()
    , ddkappa()
    , v()
    , a()
    , relative_time()  {
    }
  DecisionTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trajectory(_alloc)
    , desired_speed(_alloc)
    , desired_acc(0.0)
    , RLS_action(0.0)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , theta(_alloc)
    , kappa(_alloc)
    , s(_alloc)
    , dkappa(_alloc)
    , ddkappa(_alloc)
    , v(_alloc)
    , a(_alloc)
    , relative_time(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _desired_speed_type;
  _desired_speed_type desired_speed;

   typedef float _desired_acc_type;
  _desired_acc_type desired_acc;

   typedef float _RLS_action_type;
  _RLS_action_type RLS_action;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  _x_type x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_type;
  _y_type y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _z_type;
  _z_type z;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _theta_type;
  _theta_type theta;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kappa_type;
  _kappa_type kappa;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _s_type;
  _s_type s;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _dkappa_type;
  _dkappa_type dkappa;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ddkappa_type;
  _ddkappa_type ddkappa;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _v_type;
  _v_type v;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _a_type;
  _a_type a;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _relative_time_type;
  _relative_time_type relative_time;





  typedef boost::shared_ptr< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct DecisionTrajectory_

typedef ::zzz_planning_msgs::DecisionTrajectory_<std::allocator<void> > DecisionTrajectory;

typedef boost::shared_ptr< ::zzz_planning_msgs::DecisionTrajectory > DecisionTrajectoryPtr;
typedef boost::shared_ptr< ::zzz_planning_msgs::DecisionTrajectory const> DecisionTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator1> & lhs, const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.trajectory == rhs.trajectory &&
    lhs.desired_speed == rhs.desired_speed &&
    lhs.desired_acc == rhs.desired_acc &&
    lhs.RLS_action == rhs.RLS_action &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.theta == rhs.theta &&
    lhs.kappa == rhs.kappa &&
    lhs.s == rhs.s &&
    lhs.dkappa == rhs.dkappa &&
    lhs.ddkappa == rhs.ddkappa &&
    lhs.v == rhs.v &&
    lhs.a == rhs.a &&
    lhs.relative_time == rhs.relative_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator1> & lhs, const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05b7e02cfb660bc5a6c2606f9e700187";
  }

  static const char* value(const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05b7e02cfb660bc5ULL;
  static const uint64_t static_value2 = 0xa6c2606f9e700187ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_planning_msgs/DecisionTrajectory";
  }

  static const char* value(const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"Header header\n"
"\n"
"nav_msgs/Path trajectory\n"
"\n"
"float32[] desired_speed # m/s\n"
"\n"
"float32 desired_acc # m^2/s\n"
"\n"
"float32 RLS_action #\n"
"\n"
"## coordinate xyz  m(UTM)\n"
"float32[] x \n"
"float32[] y \n"
"float32[] z \n"
"## direction on the x-y plane\n"
"float32[] theta\n"
"## curvature on the x-y planning\n"
"float32[] kappa\n"
"## accumulated distance from beginning of the path\n"
"float32[] s \n"
"## derivative of kappa w.r.t s.\n"
"float32[] dkappa\n"
"## derivative of derivative of kappa w.r.t s.\n"
"float32[] ddkappa\n"
"## linear velocity\n"
"float32[] v    ## in [m/s]\n"
"## linear acceleration\n"
"float32[] a \n"
"## relative time from beginning of the trajectory\n"
"float32[] relative_time \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trajectory);
      stream.next(m.desired_speed);
      stream.next(m.desired_acc);
      stream.next(m.RLS_action);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.theta);
      stream.next(m.kappa);
      stream.next(m.s);
      stream.next(m.dkappa);
      stream.next(m.ddkappa);
      stream.next(m.v);
      stream.next(m.a);
      stream.next(m.relative_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DecisionTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_planning_msgs::DecisionTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
    s << indent << "desired_speed[]" << std::endl;
    for (size_t i = 0; i < v.desired_speed.size(); ++i)
    {
      s << indent << "  desired_speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.desired_speed[i]);
    }
    s << indent << "desired_acc: ";
    Printer<float>::stream(s, indent + "  ", v.desired_acc);
    s << indent << "RLS_action: ";
    Printer<float>::stream(s, indent + "  ", v.RLS_action);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z[i]);
    }
    s << indent << "theta[]" << std::endl;
    for (size_t i = 0; i < v.theta.size(); ++i)
    {
      s << indent << "  theta[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.theta[i]);
    }
    s << indent << "kappa[]" << std::endl;
    for (size_t i = 0; i < v.kappa.size(); ++i)
    {
      s << indent << "  kappa[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kappa[i]);
    }
    s << indent << "s[]" << std::endl;
    for (size_t i = 0; i < v.s.size(); ++i)
    {
      s << indent << "  s[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.s[i]);
    }
    s << indent << "dkappa[]" << std::endl;
    for (size_t i = 0; i < v.dkappa.size(); ++i)
    {
      s << indent << "  dkappa[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dkappa[i]);
    }
    s << indent << "ddkappa[]" << std::endl;
    for (size_t i = 0; i < v.ddkappa.size(); ++i)
    {
      s << indent << "  ddkappa[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ddkappa[i]);
    }
    s << indent << "v[]" << std::endl;
    for (size_t i = 0; i < v.v.size(); ++i)
    {
      s << indent << "  v[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.v[i]);
    }
    s << indent << "a[]" << std::endl;
    for (size_t i = 0; i < v.a.size(); ++i)
    {
      s << indent << "  a[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.a[i]);
    }
    s << indent << "relative_time[]" << std::endl;
    for (size_t i = 0; i < v.relative_time.size(); ++i)
    {
      s << indent << "  relative_time[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.relative_time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_PLANNING_MSGS_MESSAGE_DECISIONTRAJECTORY_H
