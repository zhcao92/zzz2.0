// Generated by gencpp from file zzz_planning_msgs/VehicleState.msg
// DO NOT EDIT!


#ifndef ZZZ_PLANNING_MSGS_MESSAGE_VEHICLESTATE_H
#define ZZZ_PLANNING_MSGS_MESSAGE_VEHICLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zzz_planning_msgs
{
template <class ContainerAllocator>
struct VehicleState_
{
  typedef VehicleState_<ContainerAllocator> Type;

  VehicleState_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , vl(0.0)
    , vr(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , steer_angle(0.0)
    , acc(0.0)  {
    }
  VehicleState_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , vl(0.0)
    , vr(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , steer_angle(0.0)
    , acc(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;

   typedef float _vl_type;
  _vl_type vl;

   typedef float _vr_type;
  _vr_type vr;

   typedef float _ax_type;
  _ax_type ax;

   typedef float _ay_type;
  _ay_type ay;

   typedef float _az_type;
  _az_type az;

   typedef float _steer_angle_type;
  _steer_angle_type steer_angle;

   typedef float _acc_type;
  _acc_type acc;





  typedef boost::shared_ptr< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleState_

typedef ::zzz_planning_msgs::VehicleState_<std::allocator<void> > VehicleState;

typedef boost::shared_ptr< ::zzz_planning_msgs::VehicleState > VehicleStatePtr;
typedef boost::shared_ptr< ::zzz_planning_msgs::VehicleState const> VehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_planning_msgs::VehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_planning_msgs::VehicleState_<ContainerAllocator1> & lhs, const ::zzz_planning_msgs::VehicleState_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.vl == rhs.vl &&
    lhs.vr == rhs.vr &&
    lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.az == rhs.az &&
    lhs.steer_angle == rhs.steer_angle &&
    lhs.acc == rhs.acc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_planning_msgs::VehicleState_<ContainerAllocator1> & lhs, const ::zzz_planning_msgs::VehicleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c05802da177a7a3327b6d367f339831e";
  }

  static const char* value(const ::zzz_planning_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc05802da177a7a33ULL;
  static const uint64_t static_value2 = 0x27b6d367f339831eULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_planning_msgs/VehicleState";
  }

  static const char* value(const ::zzz_planning_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32 x # m\n"
"float32 y # m\n"
"float32 z # m\n"
"\n"
"float32 vx # m/s\n"
"float32 vy # m/s\n"
"float32 vz # m/s\n"
"\n"
"float32 vl # m/s\n"
"float32 vr # m/s\n"
"\n"
"float32 ax # m/s\n"
"float32 ay # m/s\n"
"float32 az # m/s\n"
"\n"
"float32 steer_angle #degree\n"
"float32 acc #m/ss\n"
;
  }

  static const char* value(const ::zzz_planning_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.vl);
      stream.next(m.vr);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.steer_angle);
      stream.next(m.acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_planning_msgs::VehicleState_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "vl: ";
    Printer<float>::stream(s, indent + "  ", v.vl);
    s << indent << "vr: ";
    Printer<float>::stream(s, indent + "  ", v.vr);
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
    s << indent << "steer_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle);
    s << indent << "acc: ";
    Printer<float>::stream(s, indent + "  ", v.acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_PLANNING_MSGS_MESSAGE_VEHICLESTATE_H
