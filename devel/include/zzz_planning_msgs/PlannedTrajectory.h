// Generated by gencpp from file zzz_planning_msgs/PlannedTrajectory.msg
// DO NOT EDIT!


#ifndef ZZZ_PLANNING_MSGS_MESSAGE_PLANNEDTRAJECTORY_H
#define ZZZ_PLANNING_MSGS_MESSAGE_PLANNEDTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <zzz_planning_msgs/VehicleState.h>

namespace zzz_planning_msgs
{
template <class ContainerAllocator>
struct PlannedTrajectory_
{
  typedef PlannedTrajectory_<ContainerAllocator> Type;

  PlannedTrajectory_()
    : Trajectory()  {
    }
  PlannedTrajectory_(const ContainerAllocator& _alloc)
    : Trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >::other >  _Trajectory_type;
  _Trajectory_type Trajectory;





  typedef boost::shared_ptr< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct PlannedTrajectory_

typedef ::zzz_planning_msgs::PlannedTrajectory_<std::allocator<void> > PlannedTrajectory;

typedef boost::shared_ptr< ::zzz_planning_msgs::PlannedTrajectory > PlannedTrajectoryPtr;
typedef boost::shared_ptr< ::zzz_planning_msgs::PlannedTrajectory const> PlannedTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator1> & lhs, const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.Trajectory == rhs.Trajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator1> & lhs, const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae087f427f20285f5721d2851c9817a3";
  }

  static const char* value(const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae087f427f20285fULL;
  static const uint64_t static_value2 = 0x5721d2851c9817a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_planning_msgs/PlannedTrajectory";
  }

  static const char* value(const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "VehicleState[] Trajectory\n"
"================================================================================\n"
"MSG: zzz_planning_msgs/VehicleState\n"
"\n"
"float32 x # m\n"
"float32 y # m\n"
"float32 z # m\n"
"\n"
"float32 vx # m/s\n"
"float32 vy # m/s\n"
"float32 vz # m/s\n"
"\n"
"float32 vl # m/s\n"
"float32 vr # m/s\n"
"\n"
"float32 ax # m/s\n"
"float32 ay # m/s\n"
"float32 az # m/s\n"
"\n"
"float32 steer_angle #degree\n"
"float32 acc #m/ss\n"
;
  }

  static const char* value(const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlannedTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_planning_msgs::PlannedTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "Trajectory[]" << std::endl;
    for (size_t i = 0; i < v.Trajectory.size(); ++i)
    {
      s << indent << "  Trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::zzz_planning_msgs::VehicleState_<ContainerAllocator> >::stream(s, indent + "    ", v.Trajectory[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_PLANNING_MSGS_MESSAGE_PLANNEDTRAJECTORY_H
