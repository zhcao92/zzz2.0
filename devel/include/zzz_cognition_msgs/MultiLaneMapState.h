// Generated by gencpp from file zzz_cognition_msgs/MultiLaneMapState.msg
// DO NOT EDIT!


#ifndef ZZZ_COGNITION_MSGS_MESSAGE_MULTILANEMAPSTATE_H
#define ZZZ_COGNITION_MSGS_MESSAGE_MULTILANEMAPSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <zzz_cognition_msgs/LaneState.h>

namespace zzz_cognition_msgs
{
template <class ContainerAllocator>
struct MultiLaneMapState_
{
  typedef MultiLaneMapState_<ContainerAllocator> Type;

  MultiLaneMapState_()
    : distance_to_junction(0.0)
    , lanes()
    , ego_lane_index(0.0)
    , exit_lane_index()  {
    }
  MultiLaneMapState_(const ContainerAllocator& _alloc)
    : distance_to_junction(0.0)
    , lanes(_alloc)
    , ego_lane_index(0.0)
    , exit_lane_index(_alloc)  {
  (void)_alloc;
    }



   typedef float _distance_to_junction_type;
  _distance_to_junction_type distance_to_junction;

   typedef std::vector< ::zzz_cognition_msgs::LaneState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::zzz_cognition_msgs::LaneState_<ContainerAllocator> >::other >  _lanes_type;
  _lanes_type lanes;

   typedef float _ego_lane_index_type;
  _ego_lane_index_type ego_lane_index;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _exit_lane_index_type;
  _exit_lane_index_type exit_lane_index;





  typedef boost::shared_ptr< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> const> ConstPtr;

}; // struct MultiLaneMapState_

typedef ::zzz_cognition_msgs::MultiLaneMapState_<std::allocator<void> > MultiLaneMapState;

typedef boost::shared_ptr< ::zzz_cognition_msgs::MultiLaneMapState > MultiLaneMapStatePtr;
typedef boost::shared_ptr< ::zzz_cognition_msgs::MultiLaneMapState const> MultiLaneMapStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator1> & lhs, const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator2> & rhs)
{
  return lhs.distance_to_junction == rhs.distance_to_junction &&
    lhs.lanes == rhs.lanes &&
    lhs.ego_lane_index == rhs.ego_lane_index &&
    lhs.exit_lane_index == rhs.exit_lane_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator1> & lhs, const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zzz_cognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b11c970afbbe4b3cb2ead9f27eb736e";
  }

  static const char* value(const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b11c970afbbe4b3ULL;
  static const uint64_t static_value2 = 0xcb2ead9f27eb736eULL;
};

template<class ContainerAllocator>
struct DataType< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zzz_cognition_msgs/MultiLaneMapState";
  }

  static const char* value(const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes a multi-lane dynamic map model\n"
"\n"
"\n"
"# distance before next junction\n"
"float32 distance_to_junction\n"
"\n"
"# -------- Multi-lanes info --------\n"
"# all lane info, lanes must be ordered from right most lane\n"
"LaneState[] lanes\n"
"\n"
"# the lane that ego vehicle drives on\n"
"float32 ego_lane_index\n"
"\n"
"# exit lane index (0 refer to right-most lane in right-side driving situation)\n"
"int8[] exit_lane_index\n"
"\n"
"================================================================================\n"
"MSG: zzz_cognition_msgs/LaneState\n"
"# This message represent a state of lane in dynamic map\n"
"\n"
"# Static properties of the lane\n"
"zzz_navigation_msgs/Lane map_lane\n"
"\n"
"# distance to lane end\n"
"float32 ego_dis_to_lane_tail # = Inf\n"
"float32 ego_dis_to_lane_head # = Inf\n"
"\n"
"# the front vehicles on this lane, sorted by their distances in ascending order\n"
"# TODO: Change name to front_objects\n"
"RoadObstacle[] front_vehicles\n"
"\n"
"# the rear vehicles on this lane, sorted by their distances in ascending order\n"
"# TODO: Change name to rear_objects\n"
"RoadObstacle[] rear_vehicles\n"
"\n"
"================================================================================\n"
"MSG: zzz_navigation_msgs/Lane\n"
"# This message describe a lane with polyline representation\n"
"\n"
"# ----- Basic properties -----\n"
"# the rightest lane is 0, reference lane is -1\n"
"# TODO: remove this field\n"
"int16 index\n"
"\n"
"# Speed limit (km/h)\n"
"float32 speed_limit\n"
"\n"
"# Length of the lane. Provided for easy computation\n"
"float32 length\n"
"float32 width\n"
"\n"
"# Whether this lane allow two way traffic\n"
"# This can be true when the road is too narrow or in the center turning lane\n"
"bool bidirectional # = False\n"
"\n"
"# The situation when lane ends. This field could be updated with dynamic info.\n"
"uint8 stop_state # = 0\n"
"uint8 STOP_STATE_UNKNOWN = 0\n"
"uint8 STOP_STATE_THRU = 1 # e.g. drive through at lane connection, green light\n"
"uint8 STOP_STATE_YIELD = 2 # e.g. unprotected left/right turn, flashing yellow light\n"
"uint8 STOP_STATE_STOP = 3 # e.g. red light, yellow light\n"
"uint8 STOP_STATE_STOP_YIELD = 4 # e.g. stop sign, right turn at red light\n"
"uint8 STOP_STATE_STOP_YIELD_ALL_WAY = 5 # e.g. flashing red light, all way stop sign\n"
"\n"
"# ----- Central path representation -----\n"
"# The central_path_points field is used when central_path_type is waypoint.\n"
"# Otherwise, central_path_coeffs should be used\n"
"LanePoint[] central_path_points\n"
"float32[] central_path_coeffs\n"
"\n"
"uint8 central_path_type # = 0\n"
"uint8 CENTRAL_PATH_WAYPOINT = 0 # discretized\n"
"uint8 CENTRAL_PATH_LINE = 1\n"
"uint8 CENTRAL_PATH_CONIC = 2 # conic section, including parabola and hyperbola\n"
"uint8 CENTRAL_PATH_POLYNOMIAL = 3 #\n"
"uint8 CENTRAL_PATH_BEZIER = 4\n"
"\n"
"# ----- Boundary representation -----\n"
"# The boundary description of current lane.\n"
"# Not that the boundary type only describe the behaviour from current lane to neighbour lane or road shoulder\n"
"LaneBoundary[] left_boundaries\n"
"LaneBoundary[] right_boundaries\n"
"\n"
"# ----- Auxiliary information of the lane -----\n"
"# Road situations on this line. This field could be updated with dynamic info.\n"
"LaneSituation[] situations\n"
"\n"
"# ---- traffic ligth position ------ \n"
"float32[] traffic_light_pos\n"
"================================================================================\n"
"MSG: zzz_navigation_msgs/LanePoint\n"
"# This message describe a road point from polyline represented lane\n"
"\n"
"# The 3D position of the lane point\n"
"geometry_msgs/Point position\n"
"\n"
"# ----- Other useful information -----\n"
"# Distance from lane start to current point. The distance of the first point should be zero\n"
"float32 s\n"
"\n"
"# Slope at current position of the road\n"
"# Can be used to control the throttle\n"
"float32 slope\n"
"\n"
"# Road curvature at current position of the road\n"
"# Can be used to slow down before turning\n"
"float32 curvature\n"
"\n"
"# The yaw angle of tangent line (in radian)\n"
"float32 tangent\n"
"\n"
"# Road width at current position\n"
"# Can be used to determine the carefulness of driving\n"
"float32 width\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: zzz_navigation_msgs/LaneBoundary\n"
"# This message describe the boundary type of a part of a lane\n"
"\n"
"# Lane boundary point\n"
"LanePoint boundary_point\n"
"\n"
"# Boundary type from between `s` and `s` of the next section start\n"
"uint8 boundary_type\n"
"uint8 BOUNDARY_UNKNOWN = 0\n"
"uint8 BOUNDARY_DASHED_WHITE = 1  # neighbour lane has same direction.\n"
"uint8 BOUNDARY_DASHED_YELLOW = 2 # neighbour lane has different direction.\n"
"uint8 BOUNDARY_SOLID_WHITE = 3   # neighbour lane has same direction, not allowed to change lane.\n"
"uint8 BOUNDARY_SOLID_YELLOW = 4  # neighbour lane has different direction, not allowed to change lane.\n"
"uint8 BOUNDARY_SOLID_YELLOW_TURN = 5  # neighbour lane has different direction, not allowed to change lane unless turning.\n"
"uint8 BOUNDARY_CURB = 6          # neighbour is road shoulder\n"
"\n"
"# Confidence of the lane boundary classification\n"
"float32 confidence\n"
"\n"
"================================================================================\n"
"MSG: zzz_navigation_msgs/LaneSituation\n"
"# This message store any uncommon situations on a road\n"
"# Situation can be a map specified object or fresh events\n"
"\n"
"# The location of the situation in a lane (distance from lane start)\n"
"float32 s\n"
"\n"
"# How long this situation affect along the lane.\n"
"# Inf means take effect until lane ends\n"
"float32 length\n"
"\n"
"# Type of situation\n"
"uint8 situation_type\n"
"uint8 SITUATION_NOT_SPECIFIED = 0\n"
"uint8 SITUATION_BLOCKED = 1 # Something blocked this lane, vehicle should stop here\n"
"uint8 SITUATION_CROSSWALK = 2 # Crosswalk\n"
"uint8 SITUATION_REDUCE_SPEED = 3 # Reducing speed is required. This can be due to speed bump, construction, or school bus stop, etc\n"
"\n"
"# ------- Situation information -------\n"
"# The new speed limit. Zero means the vehicle is required to stop\n"
"float32 reduced_max_speed\n"
"\n"
"# Additional information\n"
"string comments\n"
"\n"
"================================================================================\n"
"MSG: zzz_cognition_msgs/RoadObstacle\n"
"# This message contains all the information that planning needs for a road object\n"
"\n"
"\n"
"# Unique indentity of the obstacle\n"
"uint64 uid\n"
"\n"
"# The confidence of existence, can be used to determine whether this object is valid, or invalid\n"
"# A possible way of get the confidence is by using tracking age\n"
"float32 confidence\n"
"\n"
"# The best guess of obstacle type\n"
"zzz_perception_msgs/ObjectClass cls\n"
"\n"
"# Estimated kinematic properties\n"
"zzz_driver_msgs/RigidBodyState state\n"
"# Kinematic properties in Frenet Frame\n"
"zzz_driver_msgs/FrenetSerretState2D ffstate\n"
"\n"
"# Relationship to lane, for prediction or locating\n"
"float32 lane_index # in which lane\n"
"float32 lane_anglediff # angle difference\n"
"float32 lane_dist_left_t # distance to lane\n"
"float32 lane_dist_right_t\n"
"float32 lane_dist_s # s position in the road\n"
"\n"
"# A flag to mark whether the object is static\n"
"bool is_static\n"
"\n"
"# XXX: Do we need history trajectories?\n"
"\n"
"# ----- Physical Boundary (Optional) -----\n"
"uint8 shape_type\n"
"uint8 SHAPE_UNDEFINED = 0\n"
"uint8 SHAPE_POLYGON = 1\n"
"\n"
"# Representation of the object if it's represented by polygon\n"
"geometry_msgs/Polygon shape\n"
"\n"
"# bbox, refer to BoundingBox in zzz_perception_msgs\n"
"\n"
"zzz_perception_msgs/DimensionWithCovariance dimension\n"
"#uint8 dimension\n"
"\n"
"# Null uncertainty of Inf uncertainty means that the shape is not actually generated\n"
"float32[] shape_uncertainty\n"
"\n"
"# ----- High level behavior estimation -----\n"
"\n"
"uint8 behavior\n"
"uint8 BEHAVIOR_UNKNOWN = 0\n"
"uint8 BEHAVIOR_STOPPING = 1 # vehicle is going to stop completely or stay stopped\n"
"uint8 BEHAVIOR_FOLLOW = 2 # follow lane or straight line\n"
"uint8 BEHAVIOR_MOVING_LEFT = 3 # changing to its left lane or branch left\n"
"uint8 BEHAVIOR_MOVING_RIGHT = 4 # changing to its right lane or branch right\n"
"\n"
"# This field is preserved to adapt to yield situation.\n"
"# Yield situation includes left turn, right turn, sequencial stop sign, emergency vehicle, etc.\n"
"# Yield means if your path conflict with the object's, you should wait for the object\n"
"# to go through the conflict point.\n"
"uint8 priority\n"
"uint8 PRIORITY_UNKNOWN = 0\n"
"uint8 PRIORITY_NORMAL = 1\n"
"uint8 PRIORITY_CAUTIOUS = 2 # You can move when this obstacle is far away\n"
"uint8 PRIORITY_STOP = 3 # Should let this vehicle to go and then you can move\n"
"\n"
"================================================================================\n"
"MSG: zzz_perception_msgs/ObjectClass\n"
"# The size of (in meters) the bounding box surrounding the object's center pose.\n"
"\n"
"# The unique numeric classification ID of object detected\n"
"uint32 classid\n"
"\n"
"# The probability or confidence value of the detected object. By convention, this value should lie in the range 0~1.\n"
"float32 score\n"
"\n"
"# Other information about the class (e.g. class name). Only for debug\n"
"string comments\n"
"\n"
"##############################################################\n"
"###   Here is a hierarchical table of all included types   ###\n"
"##############################################################\n"
"# Hierarchy is encoded in a 32-bit integer. Each 8 bit stand for a level, and leftmost 8 bit is the top level\n"
"\n"
"uint32 UNKNOWN                          = 0     # 0x0000\n"
"uint32 UNKNOWN_DYNAMIC                  = 16    # 0x0010\n"
"uint32 UNKNOWN_STATIC                   = 32    # 0x0020\n"
"\n"
"uint32 VEHICLE                          = 1     # 0x0001\n"
"uint32 VEHICLE_PASSENGER                = 17    # 0x0011, normal passenger_vehicles\n"
"uint32 VEHICEL_VAN                      = 33    # 0x0021\n"
"uint32 VEHICLE_TRUCK                    = 49    # 0x0031\n"
"uint32 VEHICLE_BUS                      = 65    # 0x0041\n"
"uint32 VEHICLE_SCHOOLBUS                = 321   # 0x0141\n"
"uint32 VEHICLE_SCHOOLBUS_STOP           = 4417  # 0x1141\n"
"uint32 VEHICLE_EMERGENCY                = 81    # 0x0051, emergency vehicles, including \n"
"uint32 VEHICLE_EMERGENCY_POLICE         = 337   # 0x0151\n"
"uint32 VEHICLE_EMERGENCY_POLICE_FLASH   = 4433  # 0x1151\n"
"uint32 VEHICLE_EMERGENCY_FIRE           = 593   # 0x0251\n"
"uint32 VEHICLE_EMERGENCY_FIRE_FLASH     = 4689  # 0x1251\n"
"uint32 VEHICLE_EMERGENCY_CIVIL          = 849   # 0x0351, including utility vehicle and tow trucks\n"
"uint32 VEHICLE_EMERGENCY_CIVIL_FLASH    = 4945  # 0x1351\n"
"\n"
"uint32 HUMAN                            = 2     # 0x0002\n"
"uint32 HUMAN_PEDESTRIAN                 = 18    # 0x0012\n"
"uint32 HUMAN_ROADWORKER                 = 34    # 0x0022\n"
"\n"
"uint32 CYCLIST                          = 3     # 0x0003\n"
"uint32 CYCLIST_BICYCLE                  = 19    # 0x0013\n"
"uint32 CYCLIST_MOTORCYCLE               = 35    # 0x0023\n"
"uint32 CYCLIST_TRICYCLE                 = 51    # 0x0033\n"
"\n"
"uint32 ANIMAL                           = 4     # 0x0004\n"
"uint32 ANIMAL_DOGLIKE                   = 20    # 0x0014, includes dog, cat, wolf, etc.\n"
"uint32 ANIMAL_DEERLIKE                  = 36    # 0x0024, includes deer, etc.\n"
"uint32 ANIMAL_COWLIKE                   = 52    # 0x0034, includes cow, horse, pig, etc.\n"
"\n"
"uint32 ROAD_OBJECT                      = 5     # 0x0005, objects in road area\n"
"uint32 ROAD_TRAFFIC_CONE                = 21    # 0x0015, traffic cone\n"
"uint32 ROAD_TRAFFIC_BLOCKER             = 37    # 0x0025, traffic blocker, e.g. \"Road Closed\" sign\n"
"\n"
"uint32 ROADSIDE_OBJECT                  = 6     # 0x0006, objects in road side\n"
"uint32 ROADSIDE_TRAFFIC_LIGHT           = 22    # 0x0016\n"
"uint32 ROADSIDE_TRAFFIC_SIGN            = 38    # 0x0026\n"
"uint32 ROADSIDE_TREE                    = 54    # 0x0036, including all roadside vegetation\n"
"\n"
"uint32 LEVEL_MASK_0                     = 15    # 0x000f\n"
"uint32 LEVEL_MASK_1                     = 255   # 0x00ff\n"
"uint32 LEVEL_MASK_2                     = 4095  # 0x0fff\n"
"uint32 LEVEL_MASK_3                     = 65535 # 0xffff\n"
"\n"
"================================================================================\n"
"MSG: zzz_driver_msgs/RigidBodyState\n"
"# This message contains commonly used state variables of rigid body\n"
"\n"
"# ID of frame fixed to the rigid body\n"
"string child_frame_id\n"
"\n"
"# Location and orientatation of the object\n"
"geometry_msgs/PoseWithCovariance  pose\n"
"\n"
"# Linear and angular velocity of the object\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"# Linear and angular acceleration of the object\n"
"geometry_msgs/AccelWithCovariance accel\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/AccelWithCovariance\n"
"# This expresses acceleration in free space with uncertainty.\n"
"\n"
"Accel accel\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: zzz_driver_msgs/FrenetSerretState2D\n"
"# This message describes a state in 2d Frenet-Serret Frame\n"
"# By 2d Frenet-Serret Frame we ignore the movement in z (in Cartesian) / b (in Frenet) direction\n"
"# For more information, refer to https://en.wikipedia.org/wiki/Frenet-Serret_formulas\n"
"\n"
"# 2D states\n"
"float32 s # Offset in tanget direction\n"
"float32 d # Offset in normal direction\n"
"          # we omit the offset in binormal direction\n"
"float32 psi # Heading angle in s-d plane\n"
"float32[9] pose_covariance\n"
"\n"
"# First order derivatives\n"
"float32 vs\n"
"float32 vd\n"
"float32 omega\n"
"float32[9] twist_covariance\n"
"\n"
"# Second order derivatives\n"
"float32 sa # prevent keyword conflict\n"
"float32 ad\n"
"float32 epsilon\n"
"float32[9] accel_covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: zzz_perception_msgs/DimensionWithCovariance\n"
"# Describing the size object in 3D space (in meters) with uncertainty\n"
"\n"
"float64 length_x # length(longitudinal direction)\n"
"float64 length_y # width(lateral direction)\n"
"float64 length_z # height\n"
"\n"
"# Row-major representation of the 3x3 covariance matrix\n"
"# In order, the parameters are: (length_x, length_y, length_z)\n"
"float64[9] covariance\n"
;
  }

  static const char* value(const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance_to_junction);
      stream.next(m.lanes);
      stream.next(m.ego_lane_index);
      stream.next(m.exit_lane_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiLaneMapState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zzz_cognition_msgs::MultiLaneMapState_<ContainerAllocator>& v)
  {
    s << indent << "distance_to_junction: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_junction);
    s << indent << "lanes[]" << std::endl;
    for (size_t i = 0; i < v.lanes.size(); ++i)
    {
      s << indent << "  lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::zzz_cognition_msgs::LaneState_<ContainerAllocator> >::stream(s, indent + "    ", v.lanes[i]);
    }
    s << indent << "ego_lane_index: ";
    Printer<float>::stream(s, indent + "  ", v.ego_lane_index);
    s << indent << "exit_lane_index[]" << std::endl;
    for (size_t i = 0; i < v.exit_lane_index.size(); ++i)
    {
      s << indent << "  exit_lane_index[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.exit_lane_index[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZZZ_COGNITION_MSGS_MESSAGE_MULTILANEMAPSTATE_H
